/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.ibu.flight.internalws.models.thirdcontract.rebooking;

import com.ctriposs.baiji.convert.TypeConverter;
import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 *         咨询单回复费用明细
 *       
 */
@DtoDoc("咨询单回复费用明细")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AskReplyFeeDetail", namespace = "http://soa.ctrip.com/flight/Order/FlightOrderRebooking/v1", propOrder = {
    "feeDetailID",
    "payAmount",
    "printPrice",
    "salePrice",
    "oilFee",
    "tax",
    "currency",
    "currencyRate",
    "totalRebookFee",
    "dateChangeFee",
    "priceDifferential",
    "taxDifferential",
    "ctripServiceFee",
    "supplierCurrency",
    "supplierCurrencyRate",
    "supplierTotalRebookFee",
    "supplierDateChangeFee",
    "supplierPriceDifferential",
    "supplierTaxDifferential",
    "supplierSalePrice",
    "supplierTax"
})
@SuppressWarnings("all")
public class AskReplyFeeDetail implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"AskReplyFeeDetail\",\"namespace\":\"" + AskReplyFeeDetail.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"feeDetailID\",\"type\":\"long\"},{\"name\":\"payAmount\",\"type\":[\"string\",\"null\"]},{\"name\":\"printPrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"salePrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"oilFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"tax\",\"type\":[\"string\",\"null\"]},{\"name\":\"currency\",\"type\":[\"string\",\"null\"]},{\"name\":\"currencyRate\",\"type\":[\"string\",\"null\"]},{\"name\":\"totalRebookFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"dateChangeFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"priceDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"taxDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"ctripServiceFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierCurrency\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierCurrencyRate\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierTotalRebookFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierDateChangeFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierPriceDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierTaxDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierSalePrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierTax\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public AskReplyFeeDetail(
        long feeDetailID, 
        BigDecimal payAmount, 
        BigDecimal printPrice, 
        BigDecimal salePrice, 
        BigDecimal oilFee, 
        BigDecimal tax, 
        String currency, 
        BigDecimal currencyRate, 
        BigDecimal totalRebookFee, 
        BigDecimal dateChangeFee, 
        BigDecimal priceDifferential, 
        BigDecimal taxDifferential, 
        BigDecimal ctripServiceFee, 
        String supplierCurrency, 
        BigDecimal supplierCurrencyRate, 
        BigDecimal supplierTotalRebookFee, 
        BigDecimal supplierDateChangeFee, 
        BigDecimal supplierPriceDifferential, 
        BigDecimal supplierTaxDifferential, 
        BigDecimal supplierSalePrice, 
        BigDecimal supplierTax) {
        this.feeDetailID = feeDetailID;
        this.payAmount = payAmount;
        this.printPrice = printPrice;
        this.salePrice = salePrice;
        this.oilFee = oilFee;
        this.tax = tax;
        this.currency = currency;
        this.currencyRate = currencyRate;
        this.totalRebookFee = totalRebookFee;
        this.dateChangeFee = dateChangeFee;
        this.priceDifferential = priceDifferential;
        this.taxDifferential = taxDifferential;
        this.ctripServiceFee = ctripServiceFee;
        this.supplierCurrency = supplierCurrency;
        this.supplierCurrencyRate = supplierCurrencyRate;
        this.supplierTotalRebookFee = supplierTotalRebookFee;
        this.supplierDateChangeFee = supplierDateChangeFee;
        this.supplierPriceDifferential = supplierPriceDifferential;
        this.supplierTaxDifferential = supplierTaxDifferential;
        this.supplierSalePrice = supplierSalePrice;
        this.supplierTax = supplierTax;
    }

    public AskReplyFeeDetail() {
        this.supplierCurrencyRate = new BigDecimal(0);
    }

    @FieldDoc("费用明细ID")
    @JsonProperty("FeeDetailID")
    @XmlElement(name = "FeeDetailID")
    private long feeDetailID;

    @FieldDoc("客人实付金额")
    @JsonProperty("PayAmount")
    @XmlElement(name = "PayAmount", nillable = true)
    private BigDecimal payAmount;

    @FieldDoc("面价")
    @JsonProperty("PrintPrice")
    @XmlElement(name = "PrintPrice", nillable = true)
    private BigDecimal printPrice;

    @FieldDoc("售价")
    @JsonProperty("SalePrice")
    @XmlElement(name = "SalePrice", nillable = true)
    private BigDecimal salePrice;

    @FieldDoc("油费")
    @JsonProperty("OilFee")
    @XmlElement(name = "OilFee", nillable = true)
    private BigDecimal oilFee;

    @FieldDoc("税")
    @JsonProperty("Tax")
    @XmlElement(name = "Tax", nillable = true)
    private BigDecimal tax;

    @FieldDoc("币种（RMB,HKD,USD等）")
    @JsonProperty("Currency")
    @XmlElement(name = "Currency")
    private String currency;

    @FieldDoc("汇率(相对人民币的)")
    @JsonProperty("CurrencyRate")
    @XmlElement(name = "CurrencyRate", nillable = true)
    private BigDecimal currencyRate;

    @FieldDoc("总改签费(由差价,改期费,升舱费按几种不同公式计算出来)")
    @JsonProperty("TotalRebookFee")
    @XmlElement(name = "TotalRebookFee", nillable = true)
    private BigDecimal totalRebookFee;

    @FieldDoc("改期费")
    @JsonProperty("DateChangeFee")
    @XmlElement(name = "DateChangeFee", nillable = true)
    private BigDecimal dateChangeFee;

    @FieldDoc("机票差价")
    @JsonProperty("PriceDifferential")
    @XmlElement(name = "PriceDifferential", nillable = true)
    private BigDecimal priceDifferential;

    @FieldDoc("税差")
    @JsonProperty("TaxDifferential")
    @XmlElement(name = "TaxDifferential", nillable = true)
    private BigDecimal taxDifferential;

    @FieldDoc("携程服务费")
    @JsonProperty("CtripServiceFee")
    @XmlElement(name = "CtripServiceFee", nillable = true)
    private BigDecimal ctripServiceFee;

    @FieldDoc("供应商币种（RMB,HKD,USD等）")
    @JsonProperty("SupplierCurrency")
    @XmlElement(name = "SupplierCurrency")
    private String supplierCurrency;

    @FieldDoc("供应商汇率(相对人民币的)")
    @JsonProperty("SupplierCurrencyRate")
    @XmlElement(name = "SupplierCurrencyRate")
    private BigDecimal supplierCurrencyRate;

    @FieldDoc("供应商总改签费")
    @JsonProperty("SupplierTotalRebookFee")
    @XmlElement(name = "SupplierTotalRebookFee", nillable = true)
    private BigDecimal supplierTotalRebookFee;

    @FieldDoc("供应商改期费")
    @JsonProperty("SupplierDateChangeFee")
    @XmlElement(name = "SupplierDateChangeFee", nillable = true)
    private BigDecimal supplierDateChangeFee;

    @FieldDoc("供应商差价")
    @JsonProperty("SupplierPriceDifferential")
    @XmlElement(name = "SupplierPriceDifferential", nillable = true)
    private BigDecimal supplierPriceDifferential;

    @FieldDoc("供应商税差")
    @JsonProperty("SupplierTaxDifferential")
    @XmlElement(name = "SupplierTaxDifferential", nillable = true)
    private BigDecimal supplierTaxDifferential;

    @FieldDoc("供应商售价")
    @JsonProperty("SupplierSalePrice")
    @XmlElement(name = "SupplierSalePrice", nillable = true)
    private BigDecimal supplierSalePrice;

    @FieldDoc("供应商税")
    @JsonProperty("SupplierTax")
    @XmlElement(name = "SupplierTax", nillable = true)
    private BigDecimal supplierTax;

    /**
     * 费用明细ID
     */
    public long getFeeDetailID() {
        return this.feeDetailID;
    }

    public void setFeeDetailID(long feeDetailID) {
        this.feeDetailID = feeDetailID;
    }

    /**
     * 客人实付金额
     */
    public BigDecimal getPayAmount() {
        return this.payAmount;
    }

    public void setPayAmount(BigDecimal payAmount) {
        this.payAmount = payAmount;
    }

    /**
     * 面价
     */
    public BigDecimal getPrintPrice() {
        return this.printPrice;
    }

    public void setPrintPrice(BigDecimal printPrice) {
        this.printPrice = printPrice;
    }

    /**
     * 售价
     */
    public BigDecimal getSalePrice() {
        return this.salePrice;
    }

    public void setSalePrice(BigDecimal salePrice) {
        this.salePrice = salePrice;
    }

    /**
     * 油费
     */
    public BigDecimal getOilFee() {
        return this.oilFee;
    }

    public void setOilFee(BigDecimal oilFee) {
        this.oilFee = oilFee;
    }

    /**
     * 税
     */
    public BigDecimal getTax() {
        return this.tax;
    }

    public void setTax(BigDecimal tax) {
        this.tax = tax;
    }

    /**
     * 币种（RMB,HKD,USD等）
     */
    public String getCurrency() {
        return this.currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    /**
     * 汇率(相对人民币的)
     */
    public BigDecimal getCurrencyRate() {
        return this.currencyRate;
    }

    public void setCurrencyRate(BigDecimal currencyRate) {
        this.currencyRate = currencyRate;
    }

    /**
     * 总改签费(由差价,改期费,升舱费按几种不同公式计算出来)
     */
    public BigDecimal getTotalRebookFee() {
        return this.totalRebookFee;
    }

    public void setTotalRebookFee(BigDecimal totalRebookFee) {
        this.totalRebookFee = totalRebookFee;
    }

    /**
     * 改期费
     */
    public BigDecimal getDateChangeFee() {
        return this.dateChangeFee;
    }

    public void setDateChangeFee(BigDecimal dateChangeFee) {
        this.dateChangeFee = dateChangeFee;
    }

    /**
     * 机票差价
     */
    public BigDecimal getPriceDifferential() {
        return this.priceDifferential;
    }

    public void setPriceDifferential(BigDecimal priceDifferential) {
        this.priceDifferential = priceDifferential;
    }

    /**
     * 税差
     */
    public BigDecimal getTaxDifferential() {
        return this.taxDifferential;
    }

    public void setTaxDifferential(BigDecimal taxDifferential) {
        this.taxDifferential = taxDifferential;
    }

    /**
     * 携程服务费
     */
    public BigDecimal getCtripServiceFee() {
        return this.ctripServiceFee;
    }

    public void setCtripServiceFee(BigDecimal ctripServiceFee) {
        this.ctripServiceFee = ctripServiceFee;
    }

    /**
     * 供应商币种（RMB,HKD,USD等）
     */
    public String getSupplierCurrency() {
        return this.supplierCurrency;
    }

    public void setSupplierCurrency(String supplierCurrency) {
        this.supplierCurrency = supplierCurrency;
    }

    /**
     * 供应商汇率(相对人民币的)
     */
    public BigDecimal getSupplierCurrencyRate() {
        return this.supplierCurrencyRate;
    }

    public void setSupplierCurrencyRate(BigDecimal supplierCurrencyRate) {
        this.supplierCurrencyRate = supplierCurrencyRate;
    }

    /**
     * 供应商总改签费
     */
    public BigDecimal getSupplierTotalRebookFee() {
        return this.supplierTotalRebookFee;
    }

    public void setSupplierTotalRebookFee(BigDecimal supplierTotalRebookFee) {
        this.supplierTotalRebookFee = supplierTotalRebookFee;
    }

    /**
     * 供应商改期费
     */
    public BigDecimal getSupplierDateChangeFee() {
        return this.supplierDateChangeFee;
    }

    public void setSupplierDateChangeFee(BigDecimal supplierDateChangeFee) {
        this.supplierDateChangeFee = supplierDateChangeFee;
    }

    /**
     * 供应商差价
     */
    public BigDecimal getSupplierPriceDifferential() {
        return this.supplierPriceDifferential;
    }

    public void setSupplierPriceDifferential(BigDecimal supplierPriceDifferential) {
        this.supplierPriceDifferential = supplierPriceDifferential;
    }

    /**
     * 供应商税差
     */
    public BigDecimal getSupplierTaxDifferential() {
        return this.supplierTaxDifferential;
    }

    public void setSupplierTaxDifferential(BigDecimal supplierTaxDifferential) {
        this.supplierTaxDifferential = supplierTaxDifferential;
    }

    /**
     * 供应商售价
     */
    public BigDecimal getSupplierSalePrice() {
        return this.supplierSalePrice;
    }

    public void setSupplierSalePrice(BigDecimal supplierSalePrice) {
        this.supplierSalePrice = supplierSalePrice;
    }

    /**
     * 供应商税
     */
    public BigDecimal getSupplierTax() {
        return this.supplierTax;
    }

    public void setSupplierTax(BigDecimal supplierTax) {
        this.supplierTax = supplierTax;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (long) this.feeDetailID;
            case 1: return TypeConverter.convert(this.payAmount, String.class);
            case 2: return TypeConverter.convert(this.printPrice, String.class);
            case 3: return TypeConverter.convert(this.salePrice, String.class);
            case 4: return TypeConverter.convert(this.oilFee, String.class);
            case 5: return TypeConverter.convert(this.tax, String.class);
            case 6: return (String) this.currency;
            case 7: return TypeConverter.convert(this.currencyRate, String.class);
            case 8: return TypeConverter.convert(this.totalRebookFee, String.class);
            case 9: return TypeConverter.convert(this.dateChangeFee, String.class);
            case 10: return TypeConverter.convert(this.priceDifferential, String.class);
            case 11: return TypeConverter.convert(this.taxDifferential, String.class);
            case 12: return TypeConverter.convert(this.ctripServiceFee, String.class);
            case 13: return (String) this.supplierCurrency;
            case 14: return TypeConverter.convert(this.supplierCurrencyRate, String.class);
            case 15: return TypeConverter.convert(this.supplierTotalRebookFee, String.class);
            case 16: return TypeConverter.convert(this.supplierDateChangeFee, String.class);
            case 17: return TypeConverter.convert(this.supplierPriceDifferential, String.class);
            case 18: return TypeConverter.convert(this.supplierTaxDifferential, String.class);
            case 19: return TypeConverter.convert(this.supplierSalePrice, String.class);
            case 20: return TypeConverter.convert(this.supplierTax, String.class);
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.feeDetailID = (long)fieldValue; break;
            case 1: this.payAmount = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 2: this.printPrice = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 3: this.salePrice = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 4: this.oilFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 5: this.tax = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 6: this.currency = (String)fieldValue; break;
            case 7: this.currencyRate = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 8: this.totalRebookFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 9: this.dateChangeFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 10: this.priceDifferential = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 11: this.taxDifferential = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 12: this.ctripServiceFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 13: this.supplierCurrency = (String)fieldValue; break;
            case 14: this.supplierCurrencyRate = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 15: this.supplierTotalRebookFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 16: this.supplierDateChangeFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 17: this.supplierPriceDifferential = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 18: this.supplierTaxDifferential = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 19: this.supplierSalePrice = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 20: this.supplierTax = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final AskReplyFeeDetail other = (AskReplyFeeDetail)obj;
        return
            Objects.equal(this.feeDetailID, other.feeDetailID) && 
            Objects.equal(this.payAmount, other.payAmount) && 
            Objects.equal(this.printPrice, other.printPrice) && 
            Objects.equal(this.salePrice, other.salePrice) && 
            Objects.equal(this.oilFee, other.oilFee) && 
            Objects.equal(this.tax, other.tax) && 
            Objects.equal(this.currency, other.currency) && 
            Objects.equal(this.currencyRate, other.currencyRate) && 
            Objects.equal(this.totalRebookFee, other.totalRebookFee) && 
            Objects.equal(this.dateChangeFee, other.dateChangeFee) && 
            Objects.equal(this.priceDifferential, other.priceDifferential) && 
            Objects.equal(this.taxDifferential, other.taxDifferential) && 
            Objects.equal(this.ctripServiceFee, other.ctripServiceFee) && 
            Objects.equal(this.supplierCurrency, other.supplierCurrency) && 
            Objects.equal(this.supplierCurrencyRate, other.supplierCurrencyRate) && 
            Objects.equal(this.supplierTotalRebookFee, other.supplierTotalRebookFee) && 
            Objects.equal(this.supplierDateChangeFee, other.supplierDateChangeFee) && 
            Objects.equal(this.supplierPriceDifferential, other.supplierPriceDifferential) && 
            Objects.equal(this.supplierTaxDifferential, other.supplierTaxDifferential) && 
            Objects.equal(this.supplierSalePrice, other.supplierSalePrice) && 
            Objects.equal(this.supplierTax, other.supplierTax);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.feeDetailID);
        result = 31 * result + Objects.hashCode(this.payAmount);
        result = 31 * result + Objects.hashCode(this.printPrice);
        result = 31 * result + Objects.hashCode(this.salePrice);
        result = 31 * result + Objects.hashCode(this.oilFee);
        result = 31 * result + Objects.hashCode(this.tax);
        result = 31 * result + Objects.hashCode(this.currency);
        result = 31 * result + Objects.hashCode(this.currencyRate);
        result = 31 * result + Objects.hashCode(this.totalRebookFee);
        result = 31 * result + Objects.hashCode(this.dateChangeFee);
        result = 31 * result + Objects.hashCode(this.priceDifferential);
        result = 31 * result + Objects.hashCode(this.taxDifferential);
        result = 31 * result + Objects.hashCode(this.ctripServiceFee);
        result = 31 * result + Objects.hashCode(this.supplierCurrency);
        result = 31 * result + Objects.hashCode(this.supplierCurrencyRate);
        result = 31 * result + Objects.hashCode(this.supplierTotalRebookFee);
        result = 31 * result + Objects.hashCode(this.supplierDateChangeFee);
        result = 31 * result + Objects.hashCode(this.supplierPriceDifferential);
        result = 31 * result + Objects.hashCode(this.supplierTaxDifferential);
        result = 31 * result + Objects.hashCode(this.supplierSalePrice);
        result = 31 * result + Objects.hashCode(this.supplierTax);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("feeDetailID", feeDetailID)
            .add("payAmount", payAmount)
            .add("printPrice", printPrice)
            .add("salePrice", salePrice)
            .add("oilFee", oilFee)
            .add("tax", tax)
            .add("currency", currency)
            .add("currencyRate", currencyRate)
            .add("totalRebookFee", totalRebookFee)
            .add("dateChangeFee", dateChangeFee)
            .add("priceDifferential", priceDifferential)
            .add("taxDifferential", taxDifferential)
            .add("ctripServiceFee", ctripServiceFee)
            .add("supplierCurrency", supplierCurrency)
            .add("supplierCurrencyRate", supplierCurrencyRate)
            .add("supplierTotalRebookFee", supplierTotalRebookFee)
            .add("supplierDateChangeFee", supplierDateChangeFee)
            .add("supplierPriceDifferential", supplierPriceDifferential)
            .add("supplierTaxDifferential", supplierTaxDifferential)
            .add("supplierSalePrice", supplierSalePrice)
            .add("supplierTax", supplierTax)
            .toString();
    }
}