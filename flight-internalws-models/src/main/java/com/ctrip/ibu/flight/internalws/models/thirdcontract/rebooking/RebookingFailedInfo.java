/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.ibu.flight.internalws.models.thirdcontract.rebooking;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.util.Calendar;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 *         改签失败信息
 *       
 */
@DtoDoc("改签失败信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RebookingFailedInfo", namespace = "http://soa.ctrip.com/flight/Order/FlightOrderRebooking/v1", propOrder = {
    "rebookingApplicationFailedID",
    "reasonType",
    "remark",
    "owner",
    "rebookingOrderDistributeTime",
    "distributeID",
    "processStatus",
    "reminderCount",
    "additionalInfoCount",
    "reservationCount",
    "resultId"
})
@SuppressWarnings("all")
public class RebookingFailedInfo implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"RebookingFailedInfo\",\"namespace\":\"" + RebookingFailedInfo.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"rebookingApplicationFailedID\",\"type\":\"long\"},{\"name\":\"reasonType\",\"type\":\"int\"},{\"name\":\"remark\",\"type\":[\"string\",\"null\"]},{\"name\":\"owner\",\"type\":[\"string\",\"null\"]},{\"name\":\"rebookingOrderDistributeTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"distributeID\",\"type\":[\"long\",\"null\"]},{\"name\":\"processStatus\",\"type\":[\"string\",\"null\"]},{\"name\":\"reminderCount\",\"type\":\"int\"},{\"name\":\"additionalInfoCount\",\"type\":\"int\"},{\"name\":\"reservationCount\",\"type\":\"int\"},{\"name\":\"resultId\",\"type\":\"long\"}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public RebookingFailedInfo(
        long rebookingApplicationFailedID, 
        int reasonType, 
        String remark, 
        String owner, 
        Calendar rebookingOrderDistributeTime, 
        Long distributeID, 
        String processStatus, 
        int reminderCount, 
        int additionalInfoCount, 
        int reservationCount, 
        long resultId) {
        this.rebookingApplicationFailedID = rebookingApplicationFailedID;
        this.reasonType = reasonType;
        this.remark = remark;
        this.owner = owner;
        this.rebookingOrderDistributeTime = rebookingOrderDistributeTime;
        this.distributeID = distributeID;
        this.processStatus = processStatus;
        this.reminderCount = reminderCount;
        this.additionalInfoCount = additionalInfoCount;
        this.reservationCount = reservationCount;
        this.resultId = resultId;
    }

    public RebookingFailedInfo() {
    }

    @FieldDoc("失败编号")
    @JsonProperty("RebookingApplicationFailedID")
    @XmlElement(name = "RebookingApplicationFailedID")
    private long rebookingApplicationFailedID;

    @FieldDoc("改签申请因何原因需要人工处理:" +
              "10001.费用不可计算" +
              "10002.无可改航班" +
              "10003.QTE失败" +
              "10004.携程不可改" +
              "10005.携程不可改（婴儿订单）" +
              "10006.订位失败" +
              "10007.支付失败" +
              "10008.创建服务单失败" +
              "10009.费用待确认" +
              "10010.支付超时" +
              "10011.扣款超时" +
              "10012.人工处理" +
              "10013.升舱" +
              "10014.更改行程" +
              "10015.取消留用" +
              "10016.病改")
    @JsonProperty("ReasonType")
    @XmlElement(name = "ReasonType")
    private int reasonType;

    @FieldDoc("备注")
    @JsonProperty("Remark")
    @XmlElement(name = "Remark")
    private String remark;

    @FieldDoc("分配者，表明谁来处理这个问题")
    @JsonProperty("Owner")
    @XmlElement(name = "Owner")
    private String owner;

    @FieldDoc("改签单分配时间")
    @JsonProperty("RebookingOrderDistributeTime")
    @XmlElement(name = "RebookingOrderDistributeTime", nillable = true)
    private Calendar rebookingOrderDistributeTime;

    @FieldDoc("唯一分配编号")
    @JsonProperty("DistributeID")
    @XmlElement(name = "DistributeID", nillable = true)
    private Long distributeID;

    @FieldDoc("U 未处理  D 已分配 P 处理中 S 处理完成 F处理失败")
    @JsonProperty("ProcessStatus")
    @XmlElement(name = "ProcessStatus")
    private String processStatus;

    @FieldDoc("催次数")
    @JsonProperty("ReminderCount")
    @XmlElement(name = "ReminderCount")
    private int reminderCount;

    @FieldDoc("补充信息次数")
    @JsonProperty("AdditionalInfoCount")
    @XmlElement(name = "AdditionalInfoCount")
    private int additionalInfoCount;

    @FieldDoc("预约次数")
    @JsonProperty("ReservationCount")
    @XmlElement(name = "ReservationCount")
    private int reservationCount;

    @FieldDoc("唯一的分配结果ID")
    @JsonProperty("ResultId")
    @XmlElement(name = "ResultId")
    private long resultId;

    /**
     * 失败编号
     */
    public long getRebookingApplicationFailedID() {
        return this.rebookingApplicationFailedID;
    }

    public void setRebookingApplicationFailedID(long rebookingApplicationFailedID) {
        this.rebookingApplicationFailedID = rebookingApplicationFailedID;
    }

    /**
     * 改签申请因何原因需要人工处理:
     *             10001.费用不可计算
     *             10002.无可改航班
     *             10003.QTE失败
     *             10004.携程不可改
     *             10005.携程不可改（婴儿订单）
     *             10006.订位失败
     *             10007.支付失败
     *             10008.创建服务单失败
     *             10009.费用待确认
     *             10010.支付超时
     *             10011.扣款超时
     *             10012.人工处理
     *             10013.升舱
     *             10014.更改行程
     *             10015.取消留用
     *             10016.病改
     */
    public int getReasonType() {
        return this.reasonType;
    }

    public void setReasonType(int reasonType) {
        this.reasonType = reasonType;
    }

    /**
     * 备注
     */
    public String getRemark() {
        return this.remark;
    }

    public void setRemark(String remark) {
        this.remark = remark;
    }

    /**
     * 分配者，表明谁来处理这个问题
     */
    public String getOwner() {
        return this.owner;
    }

    public void setOwner(String owner) {
        this.owner = owner;
    }

    /**
     * 改签单分配时间
     */
    public Calendar getRebookingOrderDistributeTime() {
        return this.rebookingOrderDistributeTime;
    }

    public void setRebookingOrderDistributeTime(Calendar rebookingOrderDistributeTime) {
        this.rebookingOrderDistributeTime = rebookingOrderDistributeTime;
    }

    /**
     * 唯一分配编号
     */
    public Long getDistributeID() {
        return this.distributeID;
    }

    public void setDistributeID(Long distributeID) {
        this.distributeID = distributeID;
    }

    /**
     * U 未处理  D 已分配 P 处理中 S 处理完成 F处理失败
     */
    public String getProcessStatus() {
        return this.processStatus;
    }

    public void setProcessStatus(String processStatus) {
        this.processStatus = processStatus;
    }

    /**
     * 催次数
     */
    public int getReminderCount() {
        return this.reminderCount;
    }

    public void setReminderCount(int reminderCount) {
        this.reminderCount = reminderCount;
    }

    /**
     * 补充信息次数
     */
    public int getAdditionalInfoCount() {
        return this.additionalInfoCount;
    }

    public void setAdditionalInfoCount(int additionalInfoCount) {
        this.additionalInfoCount = additionalInfoCount;
    }

    /**
     * 预约次数
     */
    public int getReservationCount() {
        return this.reservationCount;
    }

    public void setReservationCount(int reservationCount) {
        this.reservationCount = reservationCount;
    }

    /**
     * 唯一的分配结果ID
     */
    public long getResultId() {
        return this.resultId;
    }

    public void setResultId(long resultId) {
        this.resultId = resultId;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (long) this.rebookingApplicationFailedID;
            case 1: return (int) this.reasonType;
            case 2: return (String) this.remark;
            case 3: return (String) this.owner;
            case 4: return (Calendar) this.rebookingOrderDistributeTime;
            case 5: return (Long) this.distributeID;
            case 6: return (String) this.processStatus;
            case 7: return (int) this.reminderCount;
            case 8: return (int) this.additionalInfoCount;
            case 9: return (int) this.reservationCount;
            case 10: return (long) this.resultId;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.rebookingApplicationFailedID = (long)fieldValue; break;
            case 1: this.reasonType = (int)fieldValue; break;
            case 2: this.remark = (String)fieldValue; break;
            case 3: this.owner = (String)fieldValue; break;
            case 4: this.rebookingOrderDistributeTime = (Calendar)fieldValue; break;
            case 5: this.distributeID = (Long)fieldValue; break;
            case 6: this.processStatus = (String)fieldValue; break;
            case 7: this.reminderCount = (int)fieldValue; break;
            case 8: this.additionalInfoCount = (int)fieldValue; break;
            case 9: this.reservationCount = (int)fieldValue; break;
            case 10: this.resultId = (long)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final RebookingFailedInfo other = (RebookingFailedInfo)obj;
        return
            Objects.equal(this.rebookingApplicationFailedID, other.rebookingApplicationFailedID) && 
            Objects.equal(this.reasonType, other.reasonType) && 
            Objects.equal(this.remark, other.remark) && 
            Objects.equal(this.owner, other.owner) && 
            Objects.equal(this.rebookingOrderDistributeTime, other.rebookingOrderDistributeTime) && 
            Objects.equal(this.distributeID, other.distributeID) && 
            Objects.equal(this.processStatus, other.processStatus) && 
            Objects.equal(this.reminderCount, other.reminderCount) && 
            Objects.equal(this.additionalInfoCount, other.additionalInfoCount) && 
            Objects.equal(this.reservationCount, other.reservationCount) && 
            Objects.equal(this.resultId, other.resultId);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.rebookingApplicationFailedID);
        result = 31 * result + Objects.hashCode(this.reasonType);
        result = 31 * result + Objects.hashCode(this.remark);
        result = 31 * result + Objects.hashCode(this.owner);
        result = 31 * result + Objects.hashCode(this.rebookingOrderDistributeTime);
        result = 31 * result + Objects.hashCode(this.distributeID);
        result = 31 * result + Objects.hashCode(this.processStatus);
        result = 31 * result + Objects.hashCode(this.reminderCount);
        result = 31 * result + Objects.hashCode(this.additionalInfoCount);
        result = 31 * result + Objects.hashCode(this.reservationCount);
        result = 31 * result + Objects.hashCode(this.resultId);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("rebookingApplicationFailedID", rebookingApplicationFailedID)
            .add("reasonType", reasonType)
            .add("remark", remark)
            .add("owner", owner)
            .add("rebookingOrderDistributeTime", rebookingOrderDistributeTime)
            .add("distributeID", distributeID)
            .add("processStatus", processStatus)
            .add("reminderCount", reminderCount)
            .add("additionalInfoCount", additionalInfoCount)
            .add("reservationCount", reservationCount)
            .add("resultId", resultId)
            .toString();
    }
}