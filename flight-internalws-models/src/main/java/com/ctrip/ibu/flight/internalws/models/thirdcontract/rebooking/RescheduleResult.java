/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.ibu.flight.internalws.models.thirdcontract.rebooking;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 *         响应结果
 *       
 */
@DtoDoc("响应结果")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RescheduleResult", namespace = "http://soa.ctrip.com/flight/Order/RescheduleCommon/v1", propOrder = {
    "isSuccess",
    "resultCode",
    "resultMsg",
    "otherErrorCode",
    "otherErrorDetail"
})
@SuppressWarnings("all")
public class RescheduleResult implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"RescheduleResult\",\"namespace\":\"" + RescheduleResult.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"isSuccess\",\"type\":\"boolean\"},{\"name\":\"resultCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"resultMsg\",\"type\":[\"string\",\"null\"]},{\"name\":\"otherErrorCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"otherErrorDetail\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public RescheduleResult(
        boolean isSuccess, 
        String resultCode, 
        String resultMsg, 
        String otherErrorCode, 
        String otherErrorDetail) {
        this.isSuccess = isSuccess;
        this.resultCode = resultCode;
        this.resultMsg = resultMsg;
        this.otherErrorCode = otherErrorCode;
        this.otherErrorDetail = otherErrorDetail;
    }

    public RescheduleResult() {
    }

    @JsonProperty("IsSuccess")
    @XmlElement(name = "IsSuccess")
    private boolean isSuccess;

    @JsonProperty("ResultCode")
    @XmlElement(name = "ResultCode")
    private String resultCode;

    @JsonProperty("ResultMsg")
    @XmlElement(name = "ResultMsg")
    private String resultMsg;

    @JsonProperty("OtherErrorCode")
    @XmlElement(name = "OtherErrorCode")
    private String otherErrorCode;

    @JsonProperty("OtherErrorDetail")
    @XmlElement(name = "OtherErrorDetail")
    private String otherErrorDetail;

    public boolean getIsSuccess() {
        return this.isSuccess;
    }

    public void setIsSuccess(boolean isSuccess) {
        this.isSuccess = isSuccess;
    }

    public String getResultCode() {
        return this.resultCode;
    }

    public void setResultCode(String resultCode) {
        this.resultCode = resultCode;
    }

    public String getResultMsg() {
        return this.resultMsg;
    }

    public void setResultMsg(String resultMsg) {
        this.resultMsg = resultMsg;
    }

    public String getOtherErrorCode() {
        return this.otherErrorCode;
    }

    public void setOtherErrorCode(String otherErrorCode) {
        this.otherErrorCode = otherErrorCode;
    }

    public String getOtherErrorDetail() {
        return this.otherErrorDetail;
    }

    public void setOtherErrorDetail(String otherErrorDetail) {
        this.otherErrorDetail = otherErrorDetail;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (boolean) this.isSuccess;
            case 1: return (String) this.resultCode;
            case 2: return (String) this.resultMsg;
            case 3: return (String) this.otherErrorCode;
            case 4: return (String) this.otherErrorDetail;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.isSuccess = (boolean)fieldValue; break;
            case 1: this.resultCode = (String)fieldValue; break;
            case 2: this.resultMsg = (String)fieldValue; break;
            case 3: this.otherErrorCode = (String)fieldValue; break;
            case 4: this.otherErrorDetail = (String)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final RescheduleResult other = (RescheduleResult)obj;
        return
            Objects.equal(this.isSuccess, other.isSuccess) && 
            Objects.equal(this.resultCode, other.resultCode) && 
            Objects.equal(this.resultMsg, other.resultMsg) && 
            Objects.equal(this.otherErrorCode, other.otherErrorCode) && 
            Objects.equal(this.otherErrorDetail, other.otherErrorDetail);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.isSuccess);
        result = 31 * result + Objects.hashCode(this.resultCode);
        result = 31 * result + Objects.hashCode(this.resultMsg);
        result = 31 * result + Objects.hashCode(this.otherErrorCode);
        result = 31 * result + Objects.hashCode(this.otherErrorDetail);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("isSuccess", isSuccess)
            .add("resultCode", resultCode)
            .add("resultMsg", resultMsg)
            .add("otherErrorCode", otherErrorCode)
            .add("otherErrorDetail", otherErrorDetail)
            .toString();
    }
}