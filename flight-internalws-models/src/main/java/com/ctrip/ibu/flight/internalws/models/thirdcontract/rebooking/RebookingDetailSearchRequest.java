/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.ibu.flight.internalws.models.thirdcontract.rebooking;


import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name = "RebookingDetailSearchRequest", namespace = "http://soa.ctrip.com/flight/Order/FlightOrderRebooking/v1")
@XmlType(name = "RebookingDetailSearchRequest", namespace = "http://soa.ctrip.com/flight/Order/FlightOrderRebooking/v1", propOrder = {
    "head",
    "orderID",
    "rebookingApplicationID",
    "originOrderID",
    "chooseDBW"
})
@SuppressWarnings("all")
public class RebookingDetailSearchRequest implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"RebookingDetailSearchRequest\",\"namespace\":\"" + RebookingDetailSearchRequest.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"head\",\"type\":{\"type\":\"record\",\"name\":\"RescheduleHead\",\"namespace\":\"" + RescheduleHead.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"transactionID\",\"type\":[\"string\",\"null\"]},{\"name\":\"appid\",\"type\":[\"string\",\"null\"]},{\"name\":\"orderID\",\"type\":\"long\"}]}},{\"name\":\"orderID\",\"type\":\"long\"},{\"name\":\"rebookingApplicationID\",\"type\":\"long\"},{\"name\":\"originOrderID\",\"type\":\"long\"},{\"name\":\"chooseDBW\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public RebookingDetailSearchRequest(
        RescheduleHead head,
        long orderID, 
        long rebookingApplicationID, 
        long originOrderID, 
        String chooseDBW) {
        this.head = head;
        this.orderID = orderID;
        this.rebookingApplicationID = rebookingApplicationID;
        this.originOrderID = originOrderID;
        this.chooseDBW = chooseDBW;
    }

    public RebookingDetailSearchRequest() {
    }

    @FieldDoc("公共Head")
    @JsonProperty("Head")
    @XmlElement(name = "Head")
    private RescheduleHead head;

    @FieldDoc("机票订单号")
    @JsonProperty("OrderID")
    @XmlElement(name = "OrderID")
    private long orderID;

    @FieldDoc("改签申请单编号")
    @JsonProperty("RebookingApplicationID")
    @XmlElement(name = "RebookingApplicationID")
    private long rebookingApplicationID;

    @FieldDoc("原始机票订单号(兼容老流程)")
    @JsonProperty("OriginOrderID")
    @XmlElement(name = "OriginOrderID")
    private long originOrderID;

    @FieldDoc("是否选择读写库  T--写库  其他--走读库（可选，对时效要求高时传T）")
    @JsonProperty("ChooseDBW")
    @XmlElement(name = "ChooseDBW")
    private String chooseDBW;

    /**
     * 公共Head
     */
    public RescheduleHead getHead() {
        return this.head;
    }

    public void setHead(RescheduleHead head) {
        this.head = head;
    }

    /**
     * 机票订单号
     */
    public long getOrderID() {
        return this.orderID;
    }

    public void setOrderID(long orderID) {
        this.orderID = orderID;
    }

    /**
     * 改签申请单编号
     */
    public long getRebookingApplicationID() {
        return this.rebookingApplicationID;
    }

    public void setRebookingApplicationID(long rebookingApplicationID) {
        this.rebookingApplicationID = rebookingApplicationID;
    }

    /**
     * 原始机票订单号(兼容老流程)
     */
    public long getOriginOrderID() {
        return this.originOrderID;
    }

    public void setOriginOrderID(long originOrderID) {
        this.originOrderID = originOrderID;
    }

    /**
     * 是否选择读写库  T--写库  其他--走读库（可选，对时效要求高时传T）
     */
    public String getChooseDBW() {
        return this.chooseDBW;
    }

    public void setChooseDBW(String chooseDBW) {
        this.chooseDBW = chooseDBW;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (RescheduleHead) this.head;
            case 1: return (long) this.orderID;
            case 2: return (long) this.rebookingApplicationID;
            case 3: return (long) this.originOrderID;
            case 4: return (String) this.chooseDBW;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.head = (RescheduleHead)fieldValue; break;
            case 1: this.orderID = (long)fieldValue; break;
            case 2: this.rebookingApplicationID = (long)fieldValue; break;
            case 3: this.originOrderID = (long)fieldValue; break;
            case 4: this.chooseDBW = (String)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final RebookingDetailSearchRequest other = (RebookingDetailSearchRequest)obj;
        return
            Objects.equal(this.head, other.head) && 
            Objects.equal(this.orderID, other.orderID) && 
            Objects.equal(this.rebookingApplicationID, other.rebookingApplicationID) && 
            Objects.equal(this.originOrderID, other.originOrderID) && 
            Objects.equal(this.chooseDBW, other.chooseDBW);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.head);
        result = 31 * result + Objects.hashCode(this.orderID);
        result = 31 * result + Objects.hashCode(this.rebookingApplicationID);
        result = 31 * result + Objects.hashCode(this.originOrderID);
        result = 31 * result + Objects.hashCode(this.chooseDBW);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("head", head)
            .add("orderID", orderID)
            .add("rebookingApplicationID", rebookingApplicationID)
            .add("originOrderID", originOrderID)
            .add("chooseDBW", chooseDBW)
            .toString();
    }
}