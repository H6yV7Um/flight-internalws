/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.ibu.flight.internalws.models.thirdcontract.rebooking;

import com.ctriposs.baiji.convert.TypeConverter;
import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlType;

/**
 * 改签单信息
 */
@DtoDoc("改签单信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TicketingOrderRebookingInfo", namespace = "http://soa.ctrip.com/flight/Ticket/Rebooking/QueryApi/v1", propOrder = {
    "rebookQueryFee",
    "orderID",
    "rebookingTime",
    "rebookType",
    "processStatus",
    "rebookStatus",
    "priceDifferential",
    "dateChangeFee",
    "rebookQueryFeeCalType",
    "rbkId",
    "payed",
    "externalNo",
    "source",
    "deliverType",
    "contactType",
    "reimbursementType",
    "address",
    "invoiceTitle",
    "titleType",
    "companyAddress",
    "phoneNumber",
    "bankName",
    "cardNumber",
    "taxNumber",
    "newPnrTime",
    "estimateFinishTime",
    "canRemind",
    "paymentType",
    "failReason",
    "cancelReason",
    "continuePayExpiryTime",
    "canShowFee",
    "isFirstPay",
    "ticketingOrderRebookingDetailInfoList",
    "ticketingOrderRebookingProcessList",
    "isSpecialUpgrade",
    "specialRebookFlag",
    "rebookOperator",
    "isEInvoice",
    "mainOrderID",
    "eInvoiceEmailAddress",
    "sendTicketFee",
    "mileageCount",
    "rebookGeneralType",
    "deliveryProvince",
    "deliveryCity",
    "deliveryDistrict",
    "deliveryProvinceId",
    "deliveryCityId",
    "deliveryDistrictId",
    "expressCompanyID",
    "countryCode",
    "deliveryReceiverTel",
    "deliverySenderTel",
    "deliveryPostCode",
    "isDeliveruAhead",
    "invoicingSite",
    "invoicingCity",
    "payReferenceId",
    "deliveryTime",
    "isEmail",
    "receiverName",
    "invoiceContent",
    "changeRebookSuccessRate",
    "changeRebookElapsedTime",
    "isChangeRebook",
    "isPreAuthorization",
    "specialUpgradeEarliestProcessTime",
    "specialUpgradeType",
    "isSelfPay",
    "newAirLineOrderId",
    "rebookContactInfo",
    "finishedTime",
    "payAmount",
    "ticketingOrderRebookingFlowList"
})
@SuppressWarnings("all")
public class TicketingOrderRebookingInfo implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"TicketingOrderRebookingInfo\",\"namespace\":\"" + TicketingOrderRebookingInfo.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"rebookQueryFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"orderID\",\"type\":\"long\"},{\"name\":\"rebookingTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"rebookType\",\"type\":\"int\"},{\"name\":\"processStatus\",\"type\":\"int\"},{\"name\":\"rebookStatus\",\"type\":[\"string\",\"null\"]},{\"name\":\"priceDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"dateChangeFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"rebookQueryFeeCalType\",\"type\":\"int\"},{\"name\":\"rbkId\",\"type\":\"long\"},{\"name\":\"payed\",\"type\":\"boolean\"},{\"name\":\"externalNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"source\",\"type\":[\"string\",\"null\"]},{\"name\":\"deliverType\",\"type\":[\"string\",\"null\"]},{\"name\":\"contactType\",\"type\":\"int\"},{\"name\":\"reimbursementType\",\"type\":\"int\"},{\"name\":\"address\",\"type\":[\"string\",\"null\"]},{\"name\":\"invoiceTitle\",\"type\":[\"string\",\"null\"]},{\"name\":\"titleType\",\"type\":[\"string\",\"null\"]},{\"name\":\"companyAddress\",\"type\":[\"string\",\"null\"]},{\"name\":\"phoneNumber\",\"type\":[\"string\",\"null\"]},{\"name\":\"bankName\",\"type\":[\"string\",\"null\"]},{\"name\":\"cardNumber\",\"type\":[\"string\",\"null\"]},{\"name\":\"taxNumber\",\"type\":[\"string\",\"null\"]},{\"name\":\"newPnrTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"estimateFinishTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"canRemind\",\"type\":\"boolean\"},{\"name\":\"paymentType\",\"type\":[\"string\",\"null\"]},{\"name\":\"failReason\",\"type\":[\"string\",\"null\"]},{\"name\":\"cancelReason\",\"type\":[\"string\",\"null\"]},{\"name\":\"continuePayExpiryTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"canShowFee\",\"type\":\"boolean\"},{\"name\":\"isFirstPay\",\"type\":\"boolean\"},{\"name\":\"ticketingOrderRebookingDetailInfoList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TicketingOrderRebookingDetailInfo\",\"namespace\":\"" + TicketingOrderRebookingDetailInfo.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"passengerName\",\"type\":[\"string\",\"null\"]},{\"name\":\"sequence\",\"type\":\"int\"},{\"name\":\"flight\",\"type\":[\"string\",\"null\"]},{\"name\":\"takeOffTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"arrivalTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"ticketNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"subClass\",\"type\":[\"string\",\"null\"]},{\"name\":\"printPrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"dCity\",\"type\":\"int\"},{\"name\":\"aCity\",\"type\":\"int\"},{\"name\":\"dPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"aPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"subsidy\",\"type\":[\"string\",\"null\"]},{\"name\":\"oilFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"tax\",\"type\":[\"string\",\"null\"]},{\"name\":\"airline\",\"type\":[\"string\",\"null\"]},{\"name\":\"airType\",\"type\":[\"string\",\"null\"]},{\"name\":\"shareFlight\",\"type\":[\"string\",\"null\"]},{\"name\":\"dTerminal\",\"type\":[\"string\",\"null\"]},{\"name\":\"aTerminal\",\"type\":[\"string\",\"null\"]},{\"name\":\"flightTime\",\"type\":[\"string\",\"null\"]},{\"name\":\"isRebookPolicyMatch\",\"type\":\"boolean\"},{\"name\":\"airLineCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"ticketingOrderRebookingStopInfoList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TicketingOrderRebookingStopInfo\",\"namespace\":\"" + TicketingOrderRebookingStopInfo.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"stopCity\",\"type\":[\"string\",\"null\"]},{\"name\":\"stopTime\",\"type\":[\"string\",\"null\"]}]}}},{\"name\":\"Class\",\"type\":[\"string\",\"null\"]},{\"name\":\"rebookFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"craftType\",\"type\":[\"string\",\"null\"]},{\"name\":\"aTerminalBuildingID\",\"type\":[\"string\",\"null\"]},{\"name\":\"dTerminalBuildingID\",\"type\":[\"string\",\"null\"]},{\"name\":\"refundInfo\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierRefundInfo\",\"type\":[\"string\",\"null\"]},{\"name\":\"originAttachAmount\",\"type\":[\"string\",\"null\"]},{\"name\":\"mealType\",\"type\":[\"int\",\"null\"]}]}}},{\"name\":\"ticketingOrderRebookingProcessList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TicketingOrderRebookingProcess\",\"namespace\":\"" + TicketingOrderRebookingProcess.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"processName\",\"type\":[\"string\",\"null\"]},{\"name\":\"processTime\",\"type\":[\"datetime\",\"null\"]}]}}},{\"name\":\"isSpecialUpgrade\",\"type\":[\"string\",\"null\"]},{\"name\":\"specialRebookFlag\",\"type\":\"int\"},{\"name\":\"rebookOperator\",\"type\":[\"string\",\"null\"]},{\"name\":\"isEInvoice\",\"type\":\"boolean\"},{\"name\":\"mainOrderID\",\"type\":\"long\"},{\"name\":\"eInvoiceEmailAddress\",\"type\":[\"string\",\"null\"]},{\"name\":\"sendTicketFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"mileageCount\",\"type\":[\"string\",\"null\"]},{\"name\":\"rebookGeneralType\",\"type\":\"int\"},{\"name\":\"deliveryProvince\",\"type\":[\"string\",\"null\"]},{\"name\":\"deliveryCity\",\"type\":[\"string\",\"null\"]},{\"name\":\"deliveryDistrict\",\"type\":[\"string\",\"null\"]},{\"name\":\"deliveryProvinceId\",\"type\":\"int\"},{\"name\":\"deliveryCityId\",\"type\":\"int\"},{\"name\":\"deliveryDistrictId\",\"type\":\"int\"},{\"name\":\"expressCompanyID\",\"type\":\"int\"},{\"name\":\"countryCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"deliveryReceiverTel\",\"type\":[\"string\",\"null\"]},{\"name\":\"deliverySenderTel\",\"type\":[\"string\",\"null\"]},{\"name\":\"deliveryPostCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"isDeliveruAhead\",\"type\":\"boolean\"},{\"name\":\"invoicingSite\",\"type\":[\"string\",\"null\"]},{\"name\":\"invoicingCity\",\"type\":[\"string\",\"null\"]},{\"name\":\"payReferenceId\",\"type\":[\"string\",\"null\"]},{\"name\":\"deliveryTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"isEmail\",\"type\":\"boolean\"},{\"name\":\"receiverName\",\"type\":[\"string\",\"null\"]},{\"name\":\"invoiceContent\",\"type\":[\"string\",\"null\"]},{\"name\":\"changeRebookSuccessRate\",\"type\":[\"string\",\"null\"]},{\"name\":\"changeRebookElapsedTime\",\"type\":\"long\"},{\"name\":\"isChangeRebook\",\"type\":\"int\"},{\"name\":\"isPreAuthorization\",\"type\":[\"string\",\"null\"]},{\"name\":\"specialUpgradeEarliestProcessTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"specialUpgradeType\",\"type\":\"int\"},{\"name\":\"isSelfPay\",\"type\":\"boolean\"},{\"name\":\"newAirLineOrderId\",\"type\":[\"string\",\"null\"]},{\"name\":\"rebookContactInfo\",\"type\":{\"type\":\"record\",\"name\":\"RebookContactInfo\",\"namespace\":\"" + RebookContactInfo.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"contactor\",\"type\":[\"string\",\"null\"]},{\"name\":\"countryCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"contactPhoneNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"contactEmail\",\"type\":[\"string\",\"null\"]},{\"name\":\"confirmType\",\"type\":\"int\"}]}},{\"name\":\"finishedTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"payAmount\",\"type\":[\"string\",\"null\"]},{\"name\":\"ticketingOrderRebookingFlowList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TicketingOrderRebookingFlowItem\",\"namespace\":\"" + TicketingOrderRebookingFlowItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"rescheduleFlowID\",\"type\":\"long\"},{\"name\":\"flowNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"isEstimate\",\"type\":\"boolean\"},{\"name\":\"estimatedStartTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"estimatedFinishTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"processContent\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TicketingOrderRebookingFlowKvItem\",\"namespace\":\"" + TicketingOrderRebookingFlowKvItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"key\",\"type\":[\"string\",\"null\"]},{\"name\":\"actionId\",\"type\":[\"string\",\"null\"]}]}}}]}}}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public TicketingOrderRebookingInfo(
        BigDecimal rebookQueryFee, 
        long orderID, 
        Calendar rebookingTime, 
        int rebookType, 
        int processStatus, 
        String rebookStatus, 
        BigDecimal priceDifferential, 
        BigDecimal dateChangeFee, 
        int rebookQueryFeeCalType, 
        long rbkId, 
        boolean payed, 
        String externalNo, 
        String source, 
        String deliverType, 
        int contactType, 
        int reimbursementType, 
        String address, 
        String invoiceTitle, 
        String titleType, 
        String companyAddress, 
        String phoneNumber, 
        String bankName, 
        String cardNumber, 
        String taxNumber, 
        Calendar newPnrTime, 
        Calendar estimateFinishTime, 
        boolean canRemind, 
        String paymentType, 
        String failReason, 
        String cancelReason, 
        Calendar continuePayExpiryTime, 
        boolean canShowFee, 
        boolean isFirstPay, 
        List<TicketingOrderRebookingDetailInfo> ticketingOrderRebookingDetailInfoList, 
        List<TicketingOrderRebookingProcess> ticketingOrderRebookingProcessList, 
        String isSpecialUpgrade, 
        int specialRebookFlag, 
        String rebookOperator, 
        boolean isEInvoice, 
        long mainOrderID, 
        String eInvoiceEmailAddress, 
        BigDecimal sendTicketFee, 
        BigDecimal mileageCount, 
        int rebookGeneralType, 
        String deliveryProvince, 
        String deliveryCity, 
        String deliveryDistrict, 
        int deliveryProvinceId, 
        int deliveryCityId, 
        int deliveryDistrictId, 
        int expressCompanyID, 
        String countryCode, 
        String deliveryReceiverTel, 
        String deliverySenderTel, 
        String deliveryPostCode, 
        boolean isDeliveruAhead, 
        String invoicingSite, 
        String invoicingCity, 
        String payReferenceId, 
        Calendar deliveryTime, 
        boolean isEmail, 
        String receiverName, 
        String invoiceContent, 
        BigDecimal changeRebookSuccessRate, 
        long changeRebookElapsedTime, 
        int isChangeRebook, 
        String isPreAuthorization, 
        Calendar specialUpgradeEarliestProcessTime, 
        int specialUpgradeType, 
        boolean isSelfPay, 
        String newAirLineOrderId, 
        RebookContactInfo rebookContactInfo, 
        Calendar finishedTime, 
        BigDecimal payAmount, 
        List<TicketingOrderRebookingFlowItem> ticketingOrderRebookingFlowList) {
        this.rebookQueryFee = rebookQueryFee;
        this.orderID = orderID;
        this.rebookingTime = rebookingTime;
        this.rebookType = rebookType;
        this.processStatus = processStatus;
        this.rebookStatus = rebookStatus;
        this.priceDifferential = priceDifferential;
        this.dateChangeFee = dateChangeFee;
        this.rebookQueryFeeCalType = rebookQueryFeeCalType;
        this.rbkId = rbkId;
        this.payed = payed;
        this.externalNo = externalNo;
        this.source = source;
        this.deliverType = deliverType;
        this.contactType = contactType;
        this.reimbursementType = reimbursementType;
        this.address = address;
        this.invoiceTitle = invoiceTitle;
        this.titleType = titleType;
        this.companyAddress = companyAddress;
        this.phoneNumber = phoneNumber;
        this.bankName = bankName;
        this.cardNumber = cardNumber;
        this.taxNumber = taxNumber;
        this.newPnrTime = newPnrTime;
        this.estimateFinishTime = estimateFinishTime;
        this.canRemind = canRemind;
        this.paymentType = paymentType;
        this.failReason = failReason;
        this.cancelReason = cancelReason;
        this.continuePayExpiryTime = continuePayExpiryTime;
        this.canShowFee = canShowFee;
        this.isFirstPay = isFirstPay;
        this.ticketingOrderRebookingDetailInfoList = ticketingOrderRebookingDetailInfoList;
        this.ticketingOrderRebookingProcessList = ticketingOrderRebookingProcessList;
        this.isSpecialUpgrade = isSpecialUpgrade;
        this.specialRebookFlag = specialRebookFlag;
        this.rebookOperator = rebookOperator;
        this.isEInvoice = isEInvoice;
        this.mainOrderID = mainOrderID;
        this.eInvoiceEmailAddress = eInvoiceEmailAddress;
        this.sendTicketFee = sendTicketFee;
        this.mileageCount = mileageCount;
        this.rebookGeneralType = rebookGeneralType;
        this.deliveryProvince = deliveryProvince;
        this.deliveryCity = deliveryCity;
        this.deliveryDistrict = deliveryDistrict;
        this.deliveryProvinceId = deliveryProvinceId;
        this.deliveryCityId = deliveryCityId;
        this.deliveryDistrictId = deliveryDistrictId;
        this.expressCompanyID = expressCompanyID;
        this.countryCode = countryCode;
        this.deliveryReceiverTel = deliveryReceiverTel;
        this.deliverySenderTel = deliverySenderTel;
        this.deliveryPostCode = deliveryPostCode;
        this.isDeliveruAhead = isDeliveruAhead;
        this.invoicingSite = invoicingSite;
        this.invoicingCity = invoicingCity;
        this.payReferenceId = payReferenceId;
        this.deliveryTime = deliveryTime;
        this.isEmail = isEmail;
        this.receiverName = receiverName;
        this.invoiceContent = invoiceContent;
        this.changeRebookSuccessRate = changeRebookSuccessRate;
        this.changeRebookElapsedTime = changeRebookElapsedTime;
        this.isChangeRebook = isChangeRebook;
        this.isPreAuthorization = isPreAuthorization;
        this.specialUpgradeEarliestProcessTime = specialUpgradeEarliestProcessTime;
        this.specialUpgradeType = specialUpgradeType;
        this.isSelfPay = isSelfPay;
        this.newAirLineOrderId = newAirLineOrderId;
        this.rebookContactInfo = rebookContactInfo;
        this.finishedTime = finishedTime;
        this.payAmount = payAmount;
        this.ticketingOrderRebookingFlowList = ticketingOrderRebookingFlowList;
    }

    public TicketingOrderRebookingInfo() {
        this.rebookQueryFee = new BigDecimal(0);
        this.rebookingTime = new java.util.GregorianCalendar(1, 0, 1, 0, 0, 0);
        this.rebookingTime.setTimeZone(java.util.TimeZone.getTimeZone("UTC"));
        this.priceDifferential = new BigDecimal(0);
        this.dateChangeFee = new BigDecimal(0);
        this.newPnrTime = new java.util.GregorianCalendar(1, 0, 1, 0, 0, 0);
        this.newPnrTime.setTimeZone(java.util.TimeZone.getTimeZone("UTC"));
        this.estimateFinishTime = new java.util.GregorianCalendar(1, 0, 1, 0, 0, 0);
        this.estimateFinishTime.setTimeZone(java.util.TimeZone.getTimeZone("UTC"));
        this.continuePayExpiryTime = new java.util.GregorianCalendar(1, 0, 1, 0, 0, 0);
        this.continuePayExpiryTime.setTimeZone(java.util.TimeZone.getTimeZone("UTC"));
        this.sendTicketFee = new BigDecimal(0);
        this.mileageCount = new BigDecimal(0);
        this.deliveryTime = new java.util.GregorianCalendar(1, 0, 1, 0, 0, 0);
        this.deliveryTime.setTimeZone(java.util.TimeZone.getTimeZone("UTC"));
        this.changeRebookSuccessRate = new BigDecimal(0);
        this.specialUpgradeEarliestProcessTime = new java.util.GregorianCalendar(1, 0, 1, 0, 0, 0);
        this.specialUpgradeEarliestProcessTime.setTimeZone(java.util.TimeZone.getTimeZone("UTC"));
        this.finishedTime = new java.util.GregorianCalendar(1, 0, 1, 0, 0, 0);
        this.finishedTime.setTimeZone(java.util.TimeZone.getTimeZone("UTC"));
        this.payAmount = new BigDecimal(0);
    }

    @FieldDoc("改签总费用")
    @JsonProperty("RebookQueryFee")
    @XmlElement(name = "RebookQueryFee")
    private BigDecimal rebookQueryFee;

    @FieldDoc("订单号")
    @JsonProperty("OrderID")
    @XmlElement(name = "OrderID")
    private long orderID;

    @FieldDoc("改签申请时间")
    @JsonProperty("RebookingTime")
    @XmlElement(name = "RebookingTime")
    private Calendar rebookingTime;

    @FieldDoc("改期升舱类型.1同舱2升舱")
    @JsonProperty("RebookType")
    @XmlElement(name = "RebookType")
    private int rebookType;

    @FieldDoc("处理状态	4已收款8已付款16已出票32收款失败64付款失败128出票失败256非自动改签512自动改签失败1024手工退款成功2048手工退款失败")
    @JsonProperty("ProcessStatus")
    @XmlElement(name = "ProcessStatus")
    private int processStatus;

    @FieldDoc("改签单状态.U未提交W等待处理P处理中C取消S改签成功F改签失败")
    @JsonProperty("RebookStatus")
    @XmlElement(name = "RebookStatus")
    private String rebookStatus;

    @FieldDoc("差价")
    @JsonProperty("PriceDifferential")
    @XmlElement(name = "PriceDifferential")
    private BigDecimal priceDifferential;

    @FieldDoc("更改费")
    @JsonProperty("DateChangeFee")
    @XmlElement(name = "DateChangeFee")
    private BigDecimal dateChangeFee;

    @FieldDoc("更改费计算类型 0:未知 1：自动 2：人工 3：待确认")
    @JsonProperty("RebookQueryFeeCalType")
    @XmlElement(name = "RebookQueryFeeCalType")
    private int rebookQueryFeeCalType;

    @FieldDoc("改签单号")
    @JsonProperty("RbkId")
    @XmlElement(name = "RbkId")
    private long rbkId;

    @FieldDoc("是否已支付:true已经支付或不需支付")
    @JsonProperty("Payed")
    @XmlElement(name = "Payed")
    private boolean payed;

    @FieldDoc("支付ExternalNo")
    @JsonProperty("ExternalNo")
    @XmlElement(name = "ExternalNo")
    private String externalNo;

    @FieldDoc("来源")
    @JsonProperty("Source")
    @XmlElement(name = "Source")
    private String source;

    @FieldDoc("配送方式(pjs/pjn/cjs等)")
    @JsonProperty("DeliverType")
    @XmlElement(name = "DeliverType")
    private String deliverType;

    @FieldDoc("0：无 1：短信确认 2：电话确认 3：邮件确认")
    @JsonProperty("ContactType")
    @XmlElement(name = "ContactType")
    private int contactType;

    @FieldDoc("0：未知 1：无需凭证 2：差价行程单 3：发票")
    @JsonProperty("ReimbursementType")
    @XmlElement(name = "ReimbursementType")
    private int reimbursementType;

    @FieldDoc("邮寄地址")
    @JsonProperty("Address")
    @XmlElement(name = "Address")
    private String address;

    @FieldDoc("发票抬头")
    @JsonProperty("InvoiceTitle")
    @XmlElement(name = "InvoiceTitle")
    private String invoiceTitle;

    @FieldDoc("发票抬头类型 P:个人,B:公司")
    @JsonProperty("TitleType")
    @XmlElement(name = "TitleType")
    private String titleType;

    @FieldDoc("公司地址")
    @JsonProperty("CompanyAddress")
    @XmlElement(name = "CompanyAddress")
    private String companyAddress;

    @FieldDoc("电话")
    @JsonProperty("PhoneNumber")
    @XmlElement(name = "PhoneNumber")
    private String phoneNumber;

    @FieldDoc("开户行")
    @JsonProperty("BankName")
    @XmlElement(name = "BankName")
    private String bankName;

    @FieldDoc("卡号")
    @JsonProperty("CardNumber")
    @XmlElement(name = "CardNumber")
    private String cardNumber;

    @FieldDoc("税号")
    @JsonProperty("TaxNumber")
    @XmlElement(name = "TaxNumber")
    private String taxNumber;

    @FieldDoc("新pnr生成时间")
    @JsonProperty("NewPnrTime")
    @XmlElement(name = "NewPnrTime")
    private Calendar newPnrTime;

    @FieldDoc("预计完成时间")
    @JsonProperty("EstimateFinishTime")
    @XmlElement(name = "EstimateFinishTime")
    private Calendar estimateFinishTime;

    @FieldDoc("是否可发催")
    @JsonProperty("CanRemind")
    @XmlElement(name = "CanRemind")
    private boolean canRemind;

    @FieldDoc("支付方式")
    @JsonProperty("PaymentType")
    @XmlElement(name = "PaymentType")
    private String paymentType;

    @FieldDoc("失败原因")
    @JsonProperty("FailReason")
    @XmlElement(name = "FailReason")
    private String failReason;

    @FieldDoc("取消原因")
    @JsonProperty("CancelReason")
    @XmlElement(name = "CancelReason")
    private String cancelReason;

    @FieldDoc("继续支付截止时间")
    @JsonProperty("ContinuePayExpiryTime")
    @XmlElement(name = "ContinuePayExpiryTime")
    private Calendar continuePayExpiryTime;

    @FieldDoc("是否显示费用给客人")
    @JsonProperty("CanShowFee")
    @XmlElement(name = "CanShowFee")
    private boolean canShowFee;

    @FieldDoc("是否首次支付 需要先看其他状态确认是否能支付 这个字段是和其他字段混合使用的")
    @JsonProperty("IsFirstPay")
    @XmlElement(name = "IsFirstPay")
    private boolean isFirstPay;

    @FieldDoc("改期单明细")
    @JsonProperty("TicketingOrderRebookingDetailInfoList")
    @XmlElement(name = "TicketingOrderRebookingDetailInfoList")
    private List<TicketingOrderRebookingDetailInfo> ticketingOrderRebookingDetailInfoList;

    @FieldDoc("改期单处理进度明细")
    @JsonProperty("TicketingOrderRebookingProcessList")
    @XmlElement(name = "TicketingOrderRebookingProcessList")
    private List<TicketingOrderRebookingProcess> ticketingOrderRebookingProcessList;

    @FieldDoc("MU升舱标识：T：标识是、非T：标识不是")
    @JsonProperty("IsSpecialUpgrade")
    @XmlElement(name = "IsSpecialUpgrade")
    private String isSpecialUpgrade;

    @FieldDoc("1：快线改签")
    @JsonProperty("SpecialRebookFlag")
    @XmlElement(name = "SpecialRebookFlag")
    private int specialRebookFlag;

    @FieldDoc("改签操作人：航司改签、供应商改签、人工操作、未知改签")
    @JsonProperty("RebookOperator")
    @XmlElement(name = "RebookOperator")
    private String rebookOperator;

    @FieldDoc("电子发票标识")
    @JsonProperty("IsEInvoice")
    @XmlElement(name = "IsEInvoice")
    private boolean isEInvoice;

    @FieldDoc("行程单/发票合并邮寄的主订单号")
    @JsonProperty("MainOrderID")
    @XmlElement(name = "MainOrderID")
    private long mainOrderID;

    @FieldDoc("电子发票接收邮箱")
    @JsonProperty("EInvoiceEmailAddress")
    @XmlElement(name = "EInvoiceEmailAddress")
    private String eInvoiceEmailAddress;

    @FieldDoc("行程单/发票配送费用")
    @JsonProperty("SendTicketFee")
    @XmlElement(name = "SendTicketFee")
    private BigDecimal sendTicketFee;

    @FieldDoc("行程单/发票配送费用积分抵扣数目")
    @JsonProperty("MileageCount")
    @XmlElement(name = "MileageCount")
    private BigDecimal mileageCount;

    @FieldDoc("改签单扩展标记")
    @JsonProperty("RebookGeneralType")
    @XmlElement(name = "RebookGeneralType")
    private int rebookGeneralType;

    @FieldDoc("邮寄目的地-省/直辖市/特区")
    @JsonProperty("DeliveryProvince")
    @XmlElement(name = "DeliveryProvince")
    private String deliveryProvince;

    @FieldDoc("邮寄目的地-市")
    @JsonProperty("DeliveryCity")
    @XmlElement(name = "DeliveryCity")
    private String deliveryCity;

    @FieldDoc("邮寄目的地-区")
    @JsonProperty("DeliveryDistrict")
    @XmlElement(name = "DeliveryDistrict")
    private String deliveryDistrict;

    @FieldDoc("邮寄目的地-省Id")
    @JsonProperty("DeliveryProvinceId")
    @XmlElement(name = "DeliveryProvinceId")
    private int deliveryProvinceId;

    @FieldDoc("邮寄目的地-市Id")
    @JsonProperty("DeliveryCityId")
    @XmlElement(name = "DeliveryCityId")
    private int deliveryCityId;

    @FieldDoc("邮寄目的地-区Id")
    @JsonProperty("DeliveryDistrictId")
    @XmlElement(name = "DeliveryDistrictId")
    private int deliveryDistrictId;

    @FieldDoc("快递公司Id")
    @JsonProperty("ExpressCompanyID")
    @XmlElement(name = "ExpressCompanyID")
    private int expressCompanyID;

    @FieldDoc("收件人电话国家码")
    @JsonProperty("CountryCode")
    @XmlElement(name = "CountryCode")
    private String countryCode;

    @FieldDoc("邮寄收货人电话")
    @JsonProperty("DeliveryReceiverTel")
    @XmlElement(name = "DeliveryReceiverTel")
    private String deliveryReceiverTel;

    @FieldDoc("邮寄送货人电话")
    @JsonProperty("DeliverySenderTel")
    @XmlElement(name = "DeliverySenderTel")
    private String deliverySenderTel;

    @FieldDoc("邮寄目的地邮编")
    @JsonProperty("DeliveryPostCode")
    @XmlElement(name = "DeliveryPostCode")
    private String deliveryPostCode;

    @FieldDoc("是否提前邮寄")
    @JsonProperty("IsDeliveruAhead")
    @XmlElement(name = "IsDeliveruAhead")
    private boolean isDeliveruAhead;

    @FieldDoc("开票票点")
    @JsonProperty("InvoicingSite")
    @XmlElement(name = "InvoicingSite")
    private String invoicingSite;

    @FieldDoc("开票城市")
    @JsonProperty("InvoicingCity")
    @XmlElement(name = "InvoicingCity")
    private String invoicingCity;

    @FieldDoc("报销凭证支付流水号")
    @JsonProperty("PayReferenceId")
    @XmlElement(name = "PayReferenceId")
    private String payReferenceId;

    @FieldDoc("邮寄时间")
    @JsonProperty("DeliveryTime")
    @XmlElement(name = "DeliveryTime")
    private Calendar deliveryTime;

    @FieldDoc("是否发送邮件")
    @JsonProperty("IsEmail")
    @XmlElement(name = "IsEmail")
    private boolean isEmail;

    @FieldDoc("收件人")
    @JsonProperty("ReceiverName")
    @XmlElement(name = "ReceiverName")
    private String receiverName;

    @FieldDoc("发票内容")
    @JsonProperty("InvoiceContent")
    @XmlElement(name = "InvoiceContent")
    private String invoiceContent;

    @FieldDoc("航变改签成功率(例如：0.9825)")
    @JsonProperty("ChangeRebookSuccessRate")
    @XmlElement(name = "ChangeRebookSuccessRate")
    private BigDecimal changeRebookSuccessRate;

    @FieldDoc("航变改签平均时长(单位：秒)")
    @JsonProperty("ChangeRebookElapsedTime")
    @XmlElement(name = "ChangeRebookElapsedTime")
    private long changeRebookElapsedTime;

    @FieldDoc("是否航变改签(0：否，1：是)")
    @JsonProperty("IsChangeRebook")
    @XmlElement(name = "IsChangeRebook")
    private int isChangeRebook;

    @FieldDoc("预授权标记(T：是；非T：否)")
    @JsonProperty("IsPreAuthorization")
    @XmlElement(name = "IsPreAuthorization")
    private String isPreAuthorization;

    @FieldDoc("东航升舱最早处理时间")
    @JsonProperty("SpecialUpgradeEarliestProcessTime")
    @XmlElement(name = "SpecialUpgradeEarliestProcessTime")
    private Calendar specialUpgradeEarliestProcessTime;

    @FieldDoc("升舱类型（0：预订升舱暂缓处理 1：补订升舱暂缓处理 2：补订升舱立即处理）")
    @JsonProperty("SpecialUpgradeType")
    @XmlElement(name = "SpecialUpgradeType")
    private int specialUpgradeType;

    @FieldDoc("是否自助支付")
    @JsonProperty("IsSelfPay")
    @XmlElement(name = "IsSelfPay")
    private boolean isSelfPay;

    @FieldDoc("新航司订单号")
    @JsonProperty("NewAirLineOrderId")
    @XmlElement(name = "NewAirLineOrderId")
    private String newAirLineOrderId;

    @FieldDoc("改签联系信息")
    @JsonProperty("RebookContactInfo")
    @XmlElement(name = "RebookContactInfo")
    private RebookContactInfo rebookContactInfo;

    @FieldDoc("改签完成时间")
    @JsonProperty("FinishedTime")
    @XmlElement(name = "FinishedTime")
    private Calendar finishedTime;

    @FieldDoc("支付总费用(改签费+送票费)")
    @JsonProperty("PayAmount")
    @XmlElement(name = "PayAmount")
    private BigDecimal payAmount;

    @FieldDoc("改签状态事件信息")
    @JsonProperty("TicketingOrderRebookingFlowList")
    @XmlElement(name = "TicketingOrderRebookingFlowItem")
    @XmlElementWrapper(name = "TicketingOrderRebookingFlowList")
    private List<TicketingOrderRebookingFlowItem> ticketingOrderRebookingFlowList;

    /**
     * 改签总费用
     */
    public BigDecimal getRebookQueryFee() {
        return this.rebookQueryFee;
    }

    public void setRebookQueryFee(BigDecimal rebookQueryFee) {
        this.rebookQueryFee = rebookQueryFee;
    }

    /**
     * 订单号
     */
    public long getOrderID() {
        return this.orderID;
    }

    public void setOrderID(long orderID) {
        this.orderID = orderID;
    }

    /**
     * 改签申请时间
     */
    public Calendar getRebookingTime() {
        return this.rebookingTime;
    }

    public void setRebookingTime(Calendar rebookingTime) {
        this.rebookingTime = rebookingTime;
    }

    /**
     * 改期升舱类型.1同舱2升舱
     */
    public int getRebookType() {
        return this.rebookType;
    }

    public void setRebookType(int rebookType) {
        this.rebookType = rebookType;
    }

    /**
     * 处理状态4已收款8已付款16已出票32收款失败64付款失败128出票失败256非自动改签512自动改签失败1024手工退款成功2048手工退款失败
     */
    public int getProcessStatus() {
        return this.processStatus;
    }

    public void setProcessStatus(int processStatus) {
        this.processStatus = processStatus;
    }

    /**
     * 改签单状态.U未提交W等待处理P处理中C取消S改签成功F改签失败
     */
    public String getRebookStatus() {
        return this.rebookStatus;
    }

    public void setRebookStatus(String rebookStatus) {
        this.rebookStatus = rebookStatus;
    }

    /**
     * 差价
     */
    public BigDecimal getPriceDifferential() {
        return this.priceDifferential;
    }

    public void setPriceDifferential(BigDecimal priceDifferential) {
        this.priceDifferential = priceDifferential;
    }

    /**
     * 更改费
     */
    public BigDecimal getDateChangeFee() {
        return this.dateChangeFee;
    }

    public void setDateChangeFee(BigDecimal dateChangeFee) {
        this.dateChangeFee = dateChangeFee;
    }

    /**
     * 更改费计算类型 0:未知 1：自动 2：人工 3：待确认
     */
    public int getRebookQueryFeeCalType() {
        return this.rebookQueryFeeCalType;
    }

    public void setRebookQueryFeeCalType(int rebookQueryFeeCalType) {
        this.rebookQueryFeeCalType = rebookQueryFeeCalType;
    }

    /**
     * 改签单号
     */
    public long getRbkId() {
        return this.rbkId;
    }

    public void setRbkId(long rbkId) {
        this.rbkId = rbkId;
    }

    /**
     * 是否已支付:true已经支付或不需支付
     */
    public boolean getPayed() {
        return this.payed;
    }

    public void setPayed(boolean payed) {
        this.payed = payed;
    }

    /**
     * 支付ExternalNo
     */
    public String getExternalNo() {
        return this.externalNo;
    }

    public void setExternalNo(String externalNo) {
        this.externalNo = externalNo;
    }

    /**
     * 来源
     */
    public String getSource() {
        return this.source;
    }

    public void setSource(String source) {
        this.source = source;
    }

    /**
     * 配送方式(pjs/pjn/cjs等)
     */
    public String getDeliverType() {
        return this.deliverType;
    }

    public void setDeliverType(String deliverType) {
        this.deliverType = deliverType;
    }

    /**
     * 0：无 1：短信确认 2：电话确认 3：邮件确认
     */
    public int getContactType() {
        return this.contactType;
    }

    public void setContactType(int contactType) {
        this.contactType = contactType;
    }

    /**
     * 0：未知 1：无需凭证 2：差价行程单 3：发票
     */
    public int getReimbursementType() {
        return this.reimbursementType;
    }

    public void setReimbursementType(int reimbursementType) {
        this.reimbursementType = reimbursementType;
    }

    /**
     * 邮寄地址
     */
    public String getAddress() {
        return this.address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    /**
     * 发票抬头
     */
    public String getInvoiceTitle() {
        return this.invoiceTitle;
    }

    public void setInvoiceTitle(String invoiceTitle) {
        this.invoiceTitle = invoiceTitle;
    }

    /**
     * 发票抬头类型 P:个人,B:公司
     */
    public String getTitleType() {
        return this.titleType;
    }

    public void setTitleType(String titleType) {
        this.titleType = titleType;
    }

    /**
     * 公司地址
     */
    public String getCompanyAddress() {
        return this.companyAddress;
    }

    public void setCompanyAddress(String companyAddress) {
        this.companyAddress = companyAddress;
    }

    /**
     * 电话
     */
    public String getPhoneNumber() {
        return this.phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    /**
     * 开户行
     */
    public String getBankName() {
        return this.bankName;
    }

    public void setBankName(String bankName) {
        this.bankName = bankName;
    }

    /**
     * 卡号
     */
    public String getCardNumber() {
        return this.cardNumber;
    }

    public void setCardNumber(String cardNumber) {
        this.cardNumber = cardNumber;
    }

    /**
     * 税号
     */
    public String getTaxNumber() {
        return this.taxNumber;
    }

    public void setTaxNumber(String taxNumber) {
        this.taxNumber = taxNumber;
    }

    /**
     * 新pnr生成时间
     */
    public Calendar getNewPnrTime() {
        return this.newPnrTime;
    }

    public void setNewPnrTime(Calendar newPnrTime) {
        this.newPnrTime = newPnrTime;
    }

    /**
     * 预计完成时间
     */
    public Calendar getEstimateFinishTime() {
        return this.estimateFinishTime;
    }

    public void setEstimateFinishTime(Calendar estimateFinishTime) {
        this.estimateFinishTime = estimateFinishTime;
    }

    /**
     * 是否可发催
     */
    public boolean getCanRemind() {
        return this.canRemind;
    }

    public void setCanRemind(boolean canRemind) {
        this.canRemind = canRemind;
    }

    /**
     * 支付方式
     */
    public String getPaymentType() {
        return this.paymentType;
    }

    public void setPaymentType(String paymentType) {
        this.paymentType = paymentType;
    }

    /**
     * 失败原因
     */
    public String getFailReason() {
        return this.failReason;
    }

    public void setFailReason(String failReason) {
        this.failReason = failReason;
    }

    /**
     * 取消原因
     */
    public String getCancelReason() {
        return this.cancelReason;
    }

    public void setCancelReason(String cancelReason) {
        this.cancelReason = cancelReason;
    }

    /**
     * 继续支付截止时间
     */
    public Calendar getContinuePayExpiryTime() {
        return this.continuePayExpiryTime;
    }

    public void setContinuePayExpiryTime(Calendar continuePayExpiryTime) {
        this.continuePayExpiryTime = continuePayExpiryTime;
    }

    /**
     * 是否显示费用给客人
     */
    public boolean getCanShowFee() {
        return this.canShowFee;
    }

    public void setCanShowFee(boolean canShowFee) {
        this.canShowFee = canShowFee;
    }

    /**
     * 是否首次支付 需要先看其他状态确认是否能支付 这个字段是和其他字段混合使用的
     */
    public boolean getIsFirstPay() {
        return this.isFirstPay;
    }

    public void setIsFirstPay(boolean isFirstPay) {
        this.isFirstPay = isFirstPay;
    }

    /**
     * 改期单明细
     */
    public List<TicketingOrderRebookingDetailInfo> getTicketingOrderRebookingDetailInfoList() {
        return this.ticketingOrderRebookingDetailInfoList;
    }

    public void setTicketingOrderRebookingDetailInfoList(List<TicketingOrderRebookingDetailInfo> ticketingOrderRebookingDetailInfoList) {
        this.ticketingOrderRebookingDetailInfoList = ticketingOrderRebookingDetailInfoList;
    }

    /**
     * 改期单处理进度明细
     */
    public List<TicketingOrderRebookingProcess> getTicketingOrderRebookingProcessList() {
        return this.ticketingOrderRebookingProcessList;
    }

    public void setTicketingOrderRebookingProcessList(List<TicketingOrderRebookingProcess> ticketingOrderRebookingProcessList) {
        this.ticketingOrderRebookingProcessList = ticketingOrderRebookingProcessList;
    }

    /**
     * MU升舱标识：T：标识是、非T：标识不是
     */
    public String getIsSpecialUpgrade() {
        return this.isSpecialUpgrade;
    }

    public void setIsSpecialUpgrade(String isSpecialUpgrade) {
        this.isSpecialUpgrade = isSpecialUpgrade;
    }

    /**
     * 1：快线改签
     */
    public int getSpecialRebookFlag() {
        return this.specialRebookFlag;
    }

    public void setSpecialRebookFlag(int specialRebookFlag) {
        this.specialRebookFlag = specialRebookFlag;
    }

    /**
     * 改签操作人：航司改签、供应商改签、人工操作、未知改签
     */
    public String getRebookOperator() {
        return this.rebookOperator;
    }

    public void setRebookOperator(String rebookOperator) {
        this.rebookOperator = rebookOperator;
    }

    /**
     * 电子发票标识
     */
    public boolean getIsEInvoice() {
        return this.isEInvoice;
    }

    public void setIsEInvoice(boolean isEInvoice) {
        this.isEInvoice = isEInvoice;
    }

    /**
     * 行程单/发票合并邮寄的主订单号
     */
    public long getMainOrderID() {
        return this.mainOrderID;
    }

    public void setMainOrderID(long mainOrderID) {
        this.mainOrderID = mainOrderID;
    }

    /**
     * 电子发票接收邮箱
     */
    public String getEInvoiceEmailAddress() {
        return this.eInvoiceEmailAddress;
    }

    public void setEInvoiceEmailAddress(String eInvoiceEmailAddress) {
        this.eInvoiceEmailAddress = eInvoiceEmailAddress;
    }

    /**
     * 行程单/发票配送费用
     */
    public BigDecimal getSendTicketFee() {
        return this.sendTicketFee;
    }

    public void setSendTicketFee(BigDecimal sendTicketFee) {
        this.sendTicketFee = sendTicketFee;
    }

    /**
     * 行程单/发票配送费用积分抵扣数目
     */
    public BigDecimal getMileageCount() {
        return this.mileageCount;
    }

    public void setMileageCount(BigDecimal mileageCount) {
        this.mileageCount = mileageCount;
    }

    /**
     * 改签单扩展标记
     */
    public int getRebookGeneralType() {
        return this.rebookGeneralType;
    }

    public void setRebookGeneralType(int rebookGeneralType) {
        this.rebookGeneralType = rebookGeneralType;
    }

    /**
     * 邮寄目的地-省/直辖市/特区
     */
    public String getDeliveryProvince() {
        return this.deliveryProvince;
    }

    public void setDeliveryProvince(String deliveryProvince) {
        this.deliveryProvince = deliveryProvince;
    }

    /**
     * 邮寄目的地-市
     */
    public String getDeliveryCity() {
        return this.deliveryCity;
    }

    public void setDeliveryCity(String deliveryCity) {
        this.deliveryCity = deliveryCity;
    }

    /**
     * 邮寄目的地-区
     */
    public String getDeliveryDistrict() {
        return this.deliveryDistrict;
    }

    public void setDeliveryDistrict(String deliveryDistrict) {
        this.deliveryDistrict = deliveryDistrict;
    }

    /**
     * 邮寄目的地-省Id
     */
    public int getDeliveryProvinceId() {
        return this.deliveryProvinceId;
    }

    public void setDeliveryProvinceId(int deliveryProvinceId) {
        this.deliveryProvinceId = deliveryProvinceId;
    }

    /**
     * 邮寄目的地-市Id
     */
    public int getDeliveryCityId() {
        return this.deliveryCityId;
    }

    public void setDeliveryCityId(int deliveryCityId) {
        this.deliveryCityId = deliveryCityId;
    }

    /**
     * 邮寄目的地-区Id
     */
    public int getDeliveryDistrictId() {
        return this.deliveryDistrictId;
    }

    public void setDeliveryDistrictId(int deliveryDistrictId) {
        this.deliveryDistrictId = deliveryDistrictId;
    }

    /**
     * 快递公司Id
     */
    public int getExpressCompanyID() {
        return this.expressCompanyID;
    }

    public void setExpressCompanyID(int expressCompanyID) {
        this.expressCompanyID = expressCompanyID;
    }

    /**
     * 收件人电话国家码
     */
    public String getCountryCode() {
        return this.countryCode;
    }

    public void setCountryCode(String countryCode) {
        this.countryCode = countryCode;
    }

    /**
     * 邮寄收货人电话
     */
    public String getDeliveryReceiverTel() {
        return this.deliveryReceiverTel;
    }

    public void setDeliveryReceiverTel(String deliveryReceiverTel) {
        this.deliveryReceiverTel = deliveryReceiverTel;
    }

    /**
     * 邮寄送货人电话
     */
    public String getDeliverySenderTel() {
        return this.deliverySenderTel;
    }

    public void setDeliverySenderTel(String deliverySenderTel) {
        this.deliverySenderTel = deliverySenderTel;
    }

    /**
     * 邮寄目的地邮编
     */
    public String getDeliveryPostCode() {
        return this.deliveryPostCode;
    }

    public void setDeliveryPostCode(String deliveryPostCode) {
        this.deliveryPostCode = deliveryPostCode;
    }

    /**
     * 是否提前邮寄
     */
    public boolean getIsDeliveruAhead() {
        return this.isDeliveruAhead;
    }

    public void setIsDeliveruAhead(boolean isDeliveruAhead) {
        this.isDeliveruAhead = isDeliveruAhead;
    }

    /**
     * 开票票点
     */
    public String getInvoicingSite() {
        return this.invoicingSite;
    }

    public void setInvoicingSite(String invoicingSite) {
        this.invoicingSite = invoicingSite;
    }

    /**
     * 开票城市
     */
    public String getInvoicingCity() {
        return this.invoicingCity;
    }

    public void setInvoicingCity(String invoicingCity) {
        this.invoicingCity = invoicingCity;
    }

    /**
     * 报销凭证支付流水号
     */
    public String getPayReferenceId() {
        return this.payReferenceId;
    }

    public void setPayReferenceId(String payReferenceId) {
        this.payReferenceId = payReferenceId;
    }

    /**
     * 邮寄时间
     */
    public Calendar getDeliveryTime() {
        return this.deliveryTime;
    }

    public void setDeliveryTime(Calendar deliveryTime) {
        this.deliveryTime = deliveryTime;
    }

    /**
     * 是否发送邮件
     */
    public boolean getIsEmail() {
        return this.isEmail;
    }

    public void setIsEmail(boolean isEmail) {
        this.isEmail = isEmail;
    }

    /**
     * 收件人
     */
    public String getReceiverName() {
        return this.receiverName;
    }

    public void setReceiverName(String receiverName) {
        this.receiverName = receiverName;
    }

    /**
     * 发票内容
     */
    public String getInvoiceContent() {
        return this.invoiceContent;
    }

    public void setInvoiceContent(String invoiceContent) {
        this.invoiceContent = invoiceContent;
    }

    /**
     * 航变改签成功率(例如：0.9825)
     */
    public BigDecimal getChangeRebookSuccessRate() {
        return this.changeRebookSuccessRate;
    }

    public void setChangeRebookSuccessRate(BigDecimal changeRebookSuccessRate) {
        this.changeRebookSuccessRate = changeRebookSuccessRate;
    }

    /**
     * 航变改签平均时长(单位：秒)
     */
    public long getChangeRebookElapsedTime() {
        return this.changeRebookElapsedTime;
    }

    public void setChangeRebookElapsedTime(long changeRebookElapsedTime) {
        this.changeRebookElapsedTime = changeRebookElapsedTime;
    }

    /**
     * 是否航变改签(0：否，1：是)
     */
    public int getIsChangeRebook() {
        return this.isChangeRebook;
    }

    public void setIsChangeRebook(int isChangeRebook) {
        this.isChangeRebook = isChangeRebook;
    }

    /**
     * 预授权标记(T：是；非T：否)
     */
    public String getIsPreAuthorization() {
        return this.isPreAuthorization;
    }

    public void setIsPreAuthorization(String isPreAuthorization) {
        this.isPreAuthorization = isPreAuthorization;
    }

    /**
     * 东航升舱最早处理时间
     */
    public Calendar getSpecialUpgradeEarliestProcessTime() {
        return this.specialUpgradeEarliestProcessTime;
    }

    public void setSpecialUpgradeEarliestProcessTime(Calendar specialUpgradeEarliestProcessTime) {
        this.specialUpgradeEarliestProcessTime = specialUpgradeEarliestProcessTime;
    }

    /**
     * 升舱类型（0：预订升舱暂缓处理 1：补订升舱暂缓处理 2：补订升舱立即处理）
     */
    public int getSpecialUpgradeType() {
        return this.specialUpgradeType;
    }

    public void setSpecialUpgradeType(int specialUpgradeType) {
        this.specialUpgradeType = specialUpgradeType;
    }

    /**
     * 是否自助支付
     */
    public boolean getIsSelfPay() {
        return this.isSelfPay;
    }

    public void setIsSelfPay(boolean isSelfPay) {
        this.isSelfPay = isSelfPay;
    }

    /**
     * 新航司订单号
     */
    public String getNewAirLineOrderId() {
        return this.newAirLineOrderId;
    }

    public void setNewAirLineOrderId(String newAirLineOrderId) {
        this.newAirLineOrderId = newAirLineOrderId;
    }

    /**
     * 改签联系信息
     */
    public RebookContactInfo getRebookContactInfo() {
        return this.rebookContactInfo;
    }

    public void setRebookContactInfo(RebookContactInfo rebookContactInfo) {
        this.rebookContactInfo = rebookContactInfo;
    }

    /**
     * 改签完成时间
     */
    public Calendar getFinishedTime() {
        return this.finishedTime;
    }

    public void setFinishedTime(Calendar finishedTime) {
        this.finishedTime = finishedTime;
    }

    /**
     * 支付总费用(改签费+送票费)
     */
    public BigDecimal getPayAmount() {
        return this.payAmount;
    }

    public void setPayAmount(BigDecimal payAmount) {
        this.payAmount = payAmount;
    }

    /**
     * 改签状态事件信息
     */
    public List<TicketingOrderRebookingFlowItem> getTicketingOrderRebookingFlowList() {
        return this.ticketingOrderRebookingFlowList;
    }

    public void setTicketingOrderRebookingFlowList(List<TicketingOrderRebookingFlowItem> ticketingOrderRebookingFlowList) {
        this.ticketingOrderRebookingFlowList = ticketingOrderRebookingFlowList;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return TypeConverter.convert(this.rebookQueryFee, String.class);
            case 1: return (long) this.orderID;
            case 2: return (Calendar) this.rebookingTime;
            case 3: return (int) this.rebookType;
            case 4: return (int) this.processStatus;
            case 5: return (String) this.rebookStatus;
            case 6: return TypeConverter.convert(this.priceDifferential, String.class);
            case 7: return TypeConverter.convert(this.dateChangeFee, String.class);
            case 8: return (int) this.rebookQueryFeeCalType;
            case 9: return (long) this.rbkId;
            case 10: return (boolean) this.payed;
            case 11: return (String) this.externalNo;
            case 12: return (String) this.source;
            case 13: return (String) this.deliverType;
            case 14: return (int) this.contactType;
            case 15: return (int) this.reimbursementType;
            case 16: return (String) this.address;
            case 17: return (String) this.invoiceTitle;
            case 18: return (String) this.titleType;
            case 19: return (String) this.companyAddress;
            case 20: return (String) this.phoneNumber;
            case 21: return (String) this.bankName;
            case 22: return (String) this.cardNumber;
            case 23: return (String) this.taxNumber;
            case 24: return (Calendar) this.newPnrTime;
            case 25: return (Calendar) this.estimateFinishTime;
            case 26: return (boolean) this.canRemind;
            case 27: return (String) this.paymentType;
            case 28: return (String) this.failReason;
            case 29: return (String) this.cancelReason;
            case 30: return (Calendar) this.continuePayExpiryTime;
            case 31: return (boolean) this.canShowFee;
            case 32: return (boolean) this.isFirstPay;
            case 33: return (List<TicketingOrderRebookingDetailInfo>) this.ticketingOrderRebookingDetailInfoList;
            case 34: return (List<TicketingOrderRebookingProcess>) this.ticketingOrderRebookingProcessList;
            case 35: return (String) this.isSpecialUpgrade;
            case 36: return (int) this.specialRebookFlag;
            case 37: return (String) this.rebookOperator;
            case 38: return (boolean) this.isEInvoice;
            case 39: return (long) this.mainOrderID;
            case 40: return (String) this.eInvoiceEmailAddress;
            case 41: return TypeConverter.convert(this.sendTicketFee, String.class);
            case 42: return TypeConverter.convert(this.mileageCount, String.class);
            case 43: return (int) this.rebookGeneralType;
            case 44: return (String) this.deliveryProvince;
            case 45: return (String) this.deliveryCity;
            case 46: return (String) this.deliveryDistrict;
            case 47: return (int) this.deliveryProvinceId;
            case 48: return (int) this.deliveryCityId;
            case 49: return (int) this.deliveryDistrictId;
            case 50: return (int) this.expressCompanyID;
            case 51: return (String) this.countryCode;
            case 52: return (String) this.deliveryReceiverTel;
            case 53: return (String) this.deliverySenderTel;
            case 54: return (String) this.deliveryPostCode;
            case 55: return (boolean) this.isDeliveruAhead;
            case 56: return (String) this.invoicingSite;
            case 57: return (String) this.invoicingCity;
            case 58: return (String) this.payReferenceId;
            case 59: return (Calendar) this.deliveryTime;
            case 60: return (boolean) this.isEmail;
            case 61: return (String) this.receiverName;
            case 62: return (String) this.invoiceContent;
            case 63: return TypeConverter.convert(this.changeRebookSuccessRate, String.class);
            case 64: return (long) this.changeRebookElapsedTime;
            case 65: return (int) this.isChangeRebook;
            case 66: return (String) this.isPreAuthorization;
            case 67: return (Calendar) this.specialUpgradeEarliestProcessTime;
            case 68: return (int) this.specialUpgradeType;
            case 69: return (boolean) this.isSelfPay;
            case 70: return (String) this.newAirLineOrderId;
            case 71: return (RebookContactInfo) this.rebookContactInfo;
            case 72: return (Calendar) this.finishedTime;
            case 73: return TypeConverter.convert(this.payAmount, String.class);
            case 74: return (List<TicketingOrderRebookingFlowItem>) this.ticketingOrderRebookingFlowList;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.rebookQueryFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 1: this.orderID = (long)fieldValue; break;
            case 2: this.rebookingTime = (Calendar)fieldValue; break;
            case 3: this.rebookType = (int)fieldValue; break;
            case 4: this.processStatus = (int)fieldValue; break;
            case 5: this.rebookStatus = (String)fieldValue; break;
            case 6: this.priceDifferential = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 7: this.dateChangeFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 8: this.rebookQueryFeeCalType = (int)fieldValue; break;
            case 9: this.rbkId = (long)fieldValue; break;
            case 10: this.payed = (boolean)fieldValue; break;
            case 11: this.externalNo = (String)fieldValue; break;
            case 12: this.source = (String)fieldValue; break;
            case 13: this.deliverType = (String)fieldValue; break;
            case 14: this.contactType = (int)fieldValue; break;
            case 15: this.reimbursementType = (int)fieldValue; break;
            case 16: this.address = (String)fieldValue; break;
            case 17: this.invoiceTitle = (String)fieldValue; break;
            case 18: this.titleType = (String)fieldValue; break;
            case 19: this.companyAddress = (String)fieldValue; break;
            case 20: this.phoneNumber = (String)fieldValue; break;
            case 21: this.bankName = (String)fieldValue; break;
            case 22: this.cardNumber = (String)fieldValue; break;
            case 23: this.taxNumber = (String)fieldValue; break;
            case 24: this.newPnrTime = (Calendar)fieldValue; break;
            case 25: this.estimateFinishTime = (Calendar)fieldValue; break;
            case 26: this.canRemind = (boolean)fieldValue; break;
            case 27: this.paymentType = (String)fieldValue; break;
            case 28: this.failReason = (String)fieldValue; break;
            case 29: this.cancelReason = (String)fieldValue; break;
            case 30: this.continuePayExpiryTime = (Calendar)fieldValue; break;
            case 31: this.canShowFee = (boolean)fieldValue; break;
            case 32: this.isFirstPay = (boolean)fieldValue; break;
            case 33: this.ticketingOrderRebookingDetailInfoList = (List<TicketingOrderRebookingDetailInfo>)fieldValue; break;
            case 34: this.ticketingOrderRebookingProcessList = (List<TicketingOrderRebookingProcess>)fieldValue; break;
            case 35: this.isSpecialUpgrade = (String)fieldValue; break;
            case 36: this.specialRebookFlag = (int)fieldValue; break;
            case 37: this.rebookOperator = (String)fieldValue; break;
            case 38: this.isEInvoice = (boolean)fieldValue; break;
            case 39: this.mainOrderID = (long)fieldValue; break;
            case 40: this.eInvoiceEmailAddress = (String)fieldValue; break;
            case 41: this.sendTicketFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 42: this.mileageCount = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 43: this.rebookGeneralType = (int)fieldValue; break;
            case 44: this.deliveryProvince = (String)fieldValue; break;
            case 45: this.deliveryCity = (String)fieldValue; break;
            case 46: this.deliveryDistrict = (String)fieldValue; break;
            case 47: this.deliveryProvinceId = (int)fieldValue; break;
            case 48: this.deliveryCityId = (int)fieldValue; break;
            case 49: this.deliveryDistrictId = (int)fieldValue; break;
            case 50: this.expressCompanyID = (int)fieldValue; break;
            case 51: this.countryCode = (String)fieldValue; break;
            case 52: this.deliveryReceiverTel = (String)fieldValue; break;
            case 53: this.deliverySenderTel = (String)fieldValue; break;
            case 54: this.deliveryPostCode = (String)fieldValue; break;
            case 55: this.isDeliveruAhead = (boolean)fieldValue; break;
            case 56: this.invoicingSite = (String)fieldValue; break;
            case 57: this.invoicingCity = (String)fieldValue; break;
            case 58: this.payReferenceId = (String)fieldValue; break;
            case 59: this.deliveryTime = (Calendar)fieldValue; break;
            case 60: this.isEmail = (boolean)fieldValue; break;
            case 61: this.receiverName = (String)fieldValue; break;
            case 62: this.invoiceContent = (String)fieldValue; break;
            case 63: this.changeRebookSuccessRate = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 64: this.changeRebookElapsedTime = (long)fieldValue; break;
            case 65: this.isChangeRebook = (int)fieldValue; break;
            case 66: this.isPreAuthorization = (String)fieldValue; break;
            case 67: this.specialUpgradeEarliestProcessTime = (Calendar)fieldValue; break;
            case 68: this.specialUpgradeType = (int)fieldValue; break;
            case 69: this.isSelfPay = (boolean)fieldValue; break;
            case 70: this.newAirLineOrderId = (String)fieldValue; break;
            case 71: this.rebookContactInfo = (RebookContactInfo)fieldValue; break;
            case 72: this.finishedTime = (Calendar)fieldValue; break;
            case 73: this.payAmount = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 74: this.ticketingOrderRebookingFlowList = (List<TicketingOrderRebookingFlowItem>)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final TicketingOrderRebookingInfo other = (TicketingOrderRebookingInfo)obj;
        return
            Objects.equal(this.rebookQueryFee, other.rebookQueryFee) && 
            Objects.equal(this.orderID, other.orderID) && 
            Objects.equal(this.rebookingTime, other.rebookingTime) && 
            Objects.equal(this.rebookType, other.rebookType) && 
            Objects.equal(this.processStatus, other.processStatus) && 
            Objects.equal(this.rebookStatus, other.rebookStatus) && 
            Objects.equal(this.priceDifferential, other.priceDifferential) && 
            Objects.equal(this.dateChangeFee, other.dateChangeFee) && 
            Objects.equal(this.rebookQueryFeeCalType, other.rebookQueryFeeCalType) && 
            Objects.equal(this.rbkId, other.rbkId) && 
            Objects.equal(this.payed, other.payed) && 
            Objects.equal(this.externalNo, other.externalNo) && 
            Objects.equal(this.source, other.source) && 
            Objects.equal(this.deliverType, other.deliverType) && 
            Objects.equal(this.contactType, other.contactType) && 
            Objects.equal(this.reimbursementType, other.reimbursementType) && 
            Objects.equal(this.address, other.address) && 
            Objects.equal(this.invoiceTitle, other.invoiceTitle) && 
            Objects.equal(this.titleType, other.titleType) && 
            Objects.equal(this.companyAddress, other.companyAddress) && 
            Objects.equal(this.phoneNumber, other.phoneNumber) && 
            Objects.equal(this.bankName, other.bankName) && 
            Objects.equal(this.cardNumber, other.cardNumber) && 
            Objects.equal(this.taxNumber, other.taxNumber) && 
            Objects.equal(this.newPnrTime, other.newPnrTime) && 
            Objects.equal(this.estimateFinishTime, other.estimateFinishTime) && 
            Objects.equal(this.canRemind, other.canRemind) && 
            Objects.equal(this.paymentType, other.paymentType) && 
            Objects.equal(this.failReason, other.failReason) && 
            Objects.equal(this.cancelReason, other.cancelReason) && 
            Objects.equal(this.continuePayExpiryTime, other.continuePayExpiryTime) && 
            Objects.equal(this.canShowFee, other.canShowFee) && 
            Objects.equal(this.isFirstPay, other.isFirstPay) && 
            Objects.equal(this.ticketingOrderRebookingDetailInfoList, other.ticketingOrderRebookingDetailInfoList) && 
            Objects.equal(this.ticketingOrderRebookingProcessList, other.ticketingOrderRebookingProcessList) && 
            Objects.equal(this.isSpecialUpgrade, other.isSpecialUpgrade) && 
            Objects.equal(this.specialRebookFlag, other.specialRebookFlag) && 
            Objects.equal(this.rebookOperator, other.rebookOperator) && 
            Objects.equal(this.isEInvoice, other.isEInvoice) && 
            Objects.equal(this.mainOrderID, other.mainOrderID) && 
            Objects.equal(this.eInvoiceEmailAddress, other.eInvoiceEmailAddress) && 
            Objects.equal(this.sendTicketFee, other.sendTicketFee) && 
            Objects.equal(this.mileageCount, other.mileageCount) && 
            Objects.equal(this.rebookGeneralType, other.rebookGeneralType) && 
            Objects.equal(this.deliveryProvince, other.deliveryProvince) && 
            Objects.equal(this.deliveryCity, other.deliveryCity) && 
            Objects.equal(this.deliveryDistrict, other.deliveryDistrict) && 
            Objects.equal(this.deliveryProvinceId, other.deliveryProvinceId) && 
            Objects.equal(this.deliveryCityId, other.deliveryCityId) && 
            Objects.equal(this.deliveryDistrictId, other.deliveryDistrictId) && 
            Objects.equal(this.expressCompanyID, other.expressCompanyID) && 
            Objects.equal(this.countryCode, other.countryCode) && 
            Objects.equal(this.deliveryReceiverTel, other.deliveryReceiverTel) && 
            Objects.equal(this.deliverySenderTel, other.deliverySenderTel) && 
            Objects.equal(this.deliveryPostCode, other.deliveryPostCode) && 
            Objects.equal(this.isDeliveruAhead, other.isDeliveruAhead) && 
            Objects.equal(this.invoicingSite, other.invoicingSite) && 
            Objects.equal(this.invoicingCity, other.invoicingCity) && 
            Objects.equal(this.payReferenceId, other.payReferenceId) && 
            Objects.equal(this.deliveryTime, other.deliveryTime) && 
            Objects.equal(this.isEmail, other.isEmail) && 
            Objects.equal(this.receiverName, other.receiverName) && 
            Objects.equal(this.invoiceContent, other.invoiceContent) && 
            Objects.equal(this.changeRebookSuccessRate, other.changeRebookSuccessRate) && 
            Objects.equal(this.changeRebookElapsedTime, other.changeRebookElapsedTime) && 
            Objects.equal(this.isChangeRebook, other.isChangeRebook) && 
            Objects.equal(this.isPreAuthorization, other.isPreAuthorization) && 
            Objects.equal(this.specialUpgradeEarliestProcessTime, other.specialUpgradeEarliestProcessTime) && 
            Objects.equal(this.specialUpgradeType, other.specialUpgradeType) && 
            Objects.equal(this.isSelfPay, other.isSelfPay) && 
            Objects.equal(this.newAirLineOrderId, other.newAirLineOrderId) && 
            Objects.equal(this.rebookContactInfo, other.rebookContactInfo) && 
            Objects.equal(this.finishedTime, other.finishedTime) && 
            Objects.equal(this.payAmount, other.payAmount) && 
            Objects.equal(this.ticketingOrderRebookingFlowList, other.ticketingOrderRebookingFlowList);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.rebookQueryFee);
        result = 31 * result + Objects.hashCode(this.orderID);
        result = 31 * result + Objects.hashCode(this.rebookingTime);
        result = 31 * result + Objects.hashCode(this.rebookType);
        result = 31 * result + Objects.hashCode(this.processStatus);
        result = 31 * result + Objects.hashCode(this.rebookStatus);
        result = 31 * result + Objects.hashCode(this.priceDifferential);
        result = 31 * result + Objects.hashCode(this.dateChangeFee);
        result = 31 * result + Objects.hashCode(this.rebookQueryFeeCalType);
        result = 31 * result + Objects.hashCode(this.rbkId);
        result = 31 * result + Objects.hashCode(this.payed);
        result = 31 * result + Objects.hashCode(this.externalNo);
        result = 31 * result + Objects.hashCode(this.source);
        result = 31 * result + Objects.hashCode(this.deliverType);
        result = 31 * result + Objects.hashCode(this.contactType);
        result = 31 * result + Objects.hashCode(this.reimbursementType);
        result = 31 * result + Objects.hashCode(this.address);
        result = 31 * result + Objects.hashCode(this.invoiceTitle);
        result = 31 * result + Objects.hashCode(this.titleType);
        result = 31 * result + Objects.hashCode(this.companyAddress);
        result = 31 * result + Objects.hashCode(this.phoneNumber);
        result = 31 * result + Objects.hashCode(this.bankName);
        result = 31 * result + Objects.hashCode(this.cardNumber);
        result = 31 * result + Objects.hashCode(this.taxNumber);
        result = 31 * result + Objects.hashCode(this.newPnrTime);
        result = 31 * result + Objects.hashCode(this.estimateFinishTime);
        result = 31 * result + Objects.hashCode(this.canRemind);
        result = 31 * result + Objects.hashCode(this.paymentType);
        result = 31 * result + Objects.hashCode(this.failReason);
        result = 31 * result + Objects.hashCode(this.cancelReason);
        result = 31 * result + Objects.hashCode(this.continuePayExpiryTime);
        result = 31 * result + Objects.hashCode(this.canShowFee);
        result = 31 * result + Objects.hashCode(this.isFirstPay);
        result = 31 * result + Objects.hashCode(this.ticketingOrderRebookingDetailInfoList);
        result = 31 * result + Objects.hashCode(this.ticketingOrderRebookingProcessList);
        result = 31 * result + Objects.hashCode(this.isSpecialUpgrade);
        result = 31 * result + Objects.hashCode(this.specialRebookFlag);
        result = 31 * result + Objects.hashCode(this.rebookOperator);
        result = 31 * result + Objects.hashCode(this.isEInvoice);
        result = 31 * result + Objects.hashCode(this.mainOrderID);
        result = 31 * result + Objects.hashCode(this.eInvoiceEmailAddress);
        result = 31 * result + Objects.hashCode(this.sendTicketFee);
        result = 31 * result + Objects.hashCode(this.mileageCount);
        result = 31 * result + Objects.hashCode(this.rebookGeneralType);
        result = 31 * result + Objects.hashCode(this.deliveryProvince);
        result = 31 * result + Objects.hashCode(this.deliveryCity);
        result = 31 * result + Objects.hashCode(this.deliveryDistrict);
        result = 31 * result + Objects.hashCode(this.deliveryProvinceId);
        result = 31 * result + Objects.hashCode(this.deliveryCityId);
        result = 31 * result + Objects.hashCode(this.deliveryDistrictId);
        result = 31 * result + Objects.hashCode(this.expressCompanyID);
        result = 31 * result + Objects.hashCode(this.countryCode);
        result = 31 * result + Objects.hashCode(this.deliveryReceiverTel);
        result = 31 * result + Objects.hashCode(this.deliverySenderTel);
        result = 31 * result + Objects.hashCode(this.deliveryPostCode);
        result = 31 * result + Objects.hashCode(this.isDeliveruAhead);
        result = 31 * result + Objects.hashCode(this.invoicingSite);
        result = 31 * result + Objects.hashCode(this.invoicingCity);
        result = 31 * result + Objects.hashCode(this.payReferenceId);
        result = 31 * result + Objects.hashCode(this.deliveryTime);
        result = 31 * result + Objects.hashCode(this.isEmail);
        result = 31 * result + Objects.hashCode(this.receiverName);
        result = 31 * result + Objects.hashCode(this.invoiceContent);
        result = 31 * result + Objects.hashCode(this.changeRebookSuccessRate);
        result = 31 * result + Objects.hashCode(this.changeRebookElapsedTime);
        result = 31 * result + Objects.hashCode(this.isChangeRebook);
        result = 31 * result + Objects.hashCode(this.isPreAuthorization);
        result = 31 * result + Objects.hashCode(this.specialUpgradeEarliestProcessTime);
        result = 31 * result + Objects.hashCode(this.specialUpgradeType);
        result = 31 * result + Objects.hashCode(this.isSelfPay);
        result = 31 * result + Objects.hashCode(this.newAirLineOrderId);
        result = 31 * result + Objects.hashCode(this.rebookContactInfo);
        result = 31 * result + Objects.hashCode(this.finishedTime);
        result = 31 * result + Objects.hashCode(this.payAmount);
        result = 31 * result + Objects.hashCode(this.ticketingOrderRebookingFlowList);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("rebookQueryFee", rebookQueryFee)
            .add("orderID", orderID)
            .add("rebookingTime", rebookingTime)
            .add("rebookType", rebookType)
            .add("processStatus", processStatus)
            .add("rebookStatus", rebookStatus)
            .add("priceDifferential", priceDifferential)
            .add("dateChangeFee", dateChangeFee)
            .add("rebookQueryFeeCalType", rebookQueryFeeCalType)
            .add("rbkId", rbkId)
            .add("payed", payed)
            .add("externalNo", externalNo)
            .add("source", source)
            .add("deliverType", deliverType)
            .add("contactType", contactType)
            .add("reimbursementType", reimbursementType)
            .add("address", address)
            .add("invoiceTitle", invoiceTitle)
            .add("titleType", titleType)
            .add("companyAddress", companyAddress)
            .add("phoneNumber", phoneNumber)
            .add("bankName", bankName)
            .add("cardNumber", cardNumber)
            .add("taxNumber", taxNumber)
            .add("newPnrTime", newPnrTime)
            .add("estimateFinishTime", estimateFinishTime)
            .add("canRemind", canRemind)
            .add("paymentType", paymentType)
            .add("failReason", failReason)
            .add("cancelReason", cancelReason)
            .add("continuePayExpiryTime", continuePayExpiryTime)
            .add("canShowFee", canShowFee)
            .add("isFirstPay", isFirstPay)
            .add("ticketingOrderRebookingDetailInfoList", ticketingOrderRebookingDetailInfoList)
            .add("ticketingOrderRebookingProcessList", ticketingOrderRebookingProcessList)
            .add("isSpecialUpgrade", isSpecialUpgrade)
            .add("specialRebookFlag", specialRebookFlag)
            .add("rebookOperator", rebookOperator)
            .add("isEInvoice", isEInvoice)
            .add("mainOrderID", mainOrderID)
            .add("eInvoiceEmailAddress", eInvoiceEmailAddress)
            .add("sendTicketFee", sendTicketFee)
            .add("mileageCount", mileageCount)
            .add("rebookGeneralType", rebookGeneralType)
            .add("deliveryProvince", deliveryProvince)
            .add("deliveryCity", deliveryCity)
            .add("deliveryDistrict", deliveryDistrict)
            .add("deliveryProvinceId", deliveryProvinceId)
            .add("deliveryCityId", deliveryCityId)
            .add("deliveryDistrictId", deliveryDistrictId)
            .add("expressCompanyID", expressCompanyID)
            .add("countryCode", countryCode)
            .add("deliveryReceiverTel", deliveryReceiverTel)
            .add("deliverySenderTel", deliverySenderTel)
            .add("deliveryPostCode", deliveryPostCode)
            .add("isDeliveruAhead", isDeliveruAhead)
            .add("invoicingSite", invoicingSite)
            .add("invoicingCity", invoicingCity)
            .add("payReferenceId", payReferenceId)
            .add("deliveryTime", deliveryTime)
            .add("isEmail", isEmail)
            .add("receiverName", receiverName)
            .add("invoiceContent", invoiceContent)
            .add("changeRebookSuccessRate", changeRebookSuccessRate)
            .add("changeRebookElapsedTime", changeRebookElapsedTime)
            .add("isChangeRebook", isChangeRebook)
            .add("isPreAuthorization", isPreAuthorization)
            .add("specialUpgradeEarliestProcessTime", specialUpgradeEarliestProcessTime)
            .add("specialUpgradeType", specialUpgradeType)
            .add("isSelfPay", isSelfPay)
            .add("newAirLineOrderId", newAirLineOrderId)
            .add("rebookContactInfo", rebookContactInfo)
            .add("finishedTime", finishedTime)
            .add("payAmount", payAmount)
            .add("ticketingOrderRebookingFlowList", ticketingOrderRebookingFlowList)
            .toString();
    }
}