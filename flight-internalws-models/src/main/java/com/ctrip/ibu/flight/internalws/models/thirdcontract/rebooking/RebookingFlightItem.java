/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.ibu.flight.internalws.models.thirdcontract.rebooking;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.util.Calendar;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 *         改签原始航班信息
 *       
 */
@DtoDoc("改签原始航班信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RebookingFlightItem", namespace = "http://soa.ctrip.com/flight/Order/FlightOrderRebooking/v1", propOrder = {
    "segmentNo",
    "sequence",
    "flightSaleProductType",
    "originTakeOffTime",
    "originArrivalTime",
    "originAPortBuildingID",
    "originAPortBuildingName",
    "originDPortBuildingID",
    "originDPortBuildingName",
    "originFlightNo",
    "originSubClass",
    "originClass",
    "originAPort",
    "originDPort",
    "carrierFlightNo",
    "recordNo",
    "isRebookSequence",
    "originDCity",
    "originACity",
    "airLineRecordNo",
    "officeNO",
    "isSurface"
})
@SuppressWarnings("all")
public class RebookingFlightItem implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"RebookingFlightItem\",\"namespace\":\"" + RebookingFlightItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"segmentNo\",\"type\":\"int\"},{\"name\":\"sequence\",\"type\":\"int\"},{\"name\":\"flightSaleProductType\",\"type\":[\"int\",\"null\"]},{\"name\":\"originTakeOffTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"originArrivalTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"originAPortBuildingID\",\"type\":[\"int\",\"null\"]},{\"name\":\"originAPortBuildingName\",\"type\":[\"string\",\"null\"]},{\"name\":\"originDPortBuildingID\",\"type\":[\"int\",\"null\"]},{\"name\":\"originDPortBuildingName\",\"type\":[\"string\",\"null\"]},{\"name\":\"originFlightNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"originSubClass\",\"type\":[\"string\",\"null\"]},{\"name\":\"originClass\",\"type\":[\"string\",\"null\"]},{\"name\":\"originAPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"originDPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"carrierFlightNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"recordNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"isRebookSequence\",\"type\":\"boolean\"},{\"name\":\"originDCity\",\"type\":[\"int\",\"null\"]},{\"name\":\"originACity\",\"type\":[\"int\",\"null\"]},{\"name\":\"airLineRecordNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"officeNO\",\"type\":[\"string\",\"null\"]},{\"name\":\"isSurface\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public RebookingFlightItem(
        int segmentNo, 
        int sequence, 
        Integer flightSaleProductType, 
        Calendar originTakeOffTime, 
        Calendar originArrivalTime, 
        Integer originAPortBuildingID, 
        String originAPortBuildingName, 
        Integer originDPortBuildingID, 
        String originDPortBuildingName, 
        String originFlightNo, 
        String originSubClass, 
        String originClass, 
        String originAPort, 
        String originDPort, 
        String carrierFlightNo, 
        String recordNo, 
        boolean isRebookSequence, 
        Integer originDCity, 
        Integer originACity, 
        String airLineRecordNo, 
        String officeNO, 
        String isSurface) {
        this.segmentNo = segmentNo;
        this.sequence = sequence;
        this.flightSaleProductType = flightSaleProductType;
        this.originTakeOffTime = originTakeOffTime;
        this.originArrivalTime = originArrivalTime;
        this.originAPortBuildingID = originAPortBuildingID;
        this.originAPortBuildingName = originAPortBuildingName;
        this.originDPortBuildingID = originDPortBuildingID;
        this.originDPortBuildingName = originDPortBuildingName;
        this.originFlightNo = originFlightNo;
        this.originSubClass = originSubClass;
        this.originClass = originClass;
        this.originAPort = originAPort;
        this.originDPort = originDPort;
        this.carrierFlightNo = carrierFlightNo;
        this.recordNo = recordNo;
        this.isRebookSequence = isRebookSequence;
        this.originDCity = originDCity;
        this.originACity = originACity;
        this.airLineRecordNo = airLineRecordNo;
        this.officeNO = officeNO;
        this.isSurface = isSurface;
    }

    public RebookingFlightItem() {
    }

    @FieldDoc("原始多程航班对应客人选择的航段编号")
    @JsonProperty("SegmentNo")
    @XmlElement(name = "SegmentNo")
    private int segmentNo;

    @FieldDoc("原始航段序号")
    @JsonProperty("Sequence")
    @XmlElement(name = "Sequence")
    private int sequence;

    @FieldDoc("产品类型，比如清仓，普通等。来自o_flight.ProudctAttribute")
    @JsonProperty("FlightSaleProductType")
    @XmlElement(name = "FlightSaleProductType", nillable = true)
    private Integer flightSaleProductType;

    @FieldDoc("原始航班起飞时间")
    @JsonProperty("OriginTakeOffTime")
    @XmlElement(name = "OriginTakeOffTime", nillable = true)
    private Calendar originTakeOffTime;

    @FieldDoc("原始航班到达时间")
    @JsonProperty("OriginArrivalTime")
    @XmlElement(name = "OriginArrivalTime", nillable = true)
    private Calendar originArrivalTime;

    @FieldDoc("原始达航站楼编号")
    @JsonProperty("OriginAPortBuildingID")
    @XmlElement(name = "OriginAPortBuildingID", nillable = true)
    private Integer originAPortBuildingID;

    @FieldDoc("原始到达航站楼名称")
    @JsonProperty("OriginAPortBuildingName")
    @XmlElement(name = "OriginAPortBuildingName")
    private String originAPortBuildingName;

    @FieldDoc("原始出发航站楼编号")
    @JsonProperty("OriginDPortBuildingID")
    @XmlElement(name = "OriginDPortBuildingID", nillable = true)
    private Integer originDPortBuildingID;

    @FieldDoc("原始出发航站楼名称")
    @JsonProperty("OriginDPortBuildingName")
    @XmlElement(name = "OriginDPortBuildingName")
    private String originDPortBuildingName;

    @FieldDoc("原始航班号")
    @JsonProperty("OriginFlightNo")
    @XmlElement(name = "OriginFlightNo")
    private String originFlightNo;

    @FieldDoc("原始子舱位")
    @JsonProperty("OriginSubClass")
    @XmlElement(name = "OriginSubClass")
    private String originSubClass;

    @FieldDoc("原始大舱位（Y、C、F）")
    @JsonProperty("OriginClass")
    @XmlElement(name = "OriginClass")
    private String originClass;

    @FieldDoc("原始到达机场")
    @JsonProperty("OriginAPort")
    @XmlElement(name = "OriginAPort")
    private String originAPort;

    @FieldDoc("原始出发机场")
    @JsonProperty("OriginDPort")
    @XmlElement(name = "OriginDPort")
    private String originDPort;

    @FieldDoc("实际承运航班号")
    @JsonProperty("CarrierFlightNo")
    @XmlElement(name = "CarrierFlightNo")
    private String carrierFlightNo;

    @FieldDoc("记录编号")
    @JsonProperty("RecordNo")
    @XmlElement(name = "RecordNo")
    private String recordNo;

    @FieldDoc("是否改签程")
    @JsonProperty("IsRebookSequence")
    @XmlElement(name = "IsRebookSequence")
    private boolean isRebookSequence;

    @FieldDoc("原始出发城市编码")
    @JsonProperty("OriginDCity")
    @XmlElement(name = "OriginDCity", nillable = true)
    private Integer originDCity;

    @FieldDoc("原始到达城市编码")
    @JsonProperty("OriginACity")
    @XmlElement(name = "OriginACity", nillable = true)
    private Integer originACity;

    @FieldDoc("原始航司大编码")
    @JsonProperty("AirLineRecordNo")
    @XmlElement(name = "AirLineRecordNo")
    private String airLineRecordNo;

    @FieldDoc("原始订位的OfficeNO")
    @JsonProperty("OfficeNO")
    @XmlElement(name = "OfficeNO")
    private String officeNO;

    @FieldDoc("是否地面程(T：是，F：否)")
    @JsonProperty("IsSurface")
    @XmlElement(name = "IsSurface")
    private String isSurface;

    /**
     * 原始多程航班对应客人选择的航段编号
     */
    public int getSegmentNo() {
        return this.segmentNo;
    }

    public void setSegmentNo(int segmentNo) {
        this.segmentNo = segmentNo;
    }

    /**
     * 原始航段序号
     */
    public int getSequence() {
        return this.sequence;
    }

    public void setSequence(int sequence) {
        this.sequence = sequence;
    }

    /**
     * 产品类型，比如清仓，普通等。来自o_flight.ProudctAttribute
     */
    public Integer getFlightSaleProductType() {
        return this.flightSaleProductType;
    }

    public void setFlightSaleProductType(Integer flightSaleProductType) {
        this.flightSaleProductType = flightSaleProductType;
    }

    /**
     * 原始航班起飞时间
     */
    public Calendar getOriginTakeOffTime() {
        return this.originTakeOffTime;
    }

    public void setOriginTakeOffTime(Calendar originTakeOffTime) {
        this.originTakeOffTime = originTakeOffTime;
    }

    /**
     * 原始航班到达时间
     */
    public Calendar getOriginArrivalTime() {
        return this.originArrivalTime;
    }

    public void setOriginArrivalTime(Calendar originArrivalTime) {
        this.originArrivalTime = originArrivalTime;
    }

    /**
     * 原始达航站楼编号
     */
    public Integer getOriginAPortBuildingID() {
        return this.originAPortBuildingID;
    }

    public void setOriginAPortBuildingID(Integer originAPortBuildingID) {
        this.originAPortBuildingID = originAPortBuildingID;
    }

    /**
     * 原始到达航站楼名称
     */
    public String getOriginAPortBuildingName() {
        return this.originAPortBuildingName;
    }

    public void setOriginAPortBuildingName(String originAPortBuildingName) {
        this.originAPortBuildingName = originAPortBuildingName;
    }

    /**
     * 原始出发航站楼编号
     */
    public Integer getOriginDPortBuildingID() {
        return this.originDPortBuildingID;
    }

    public void setOriginDPortBuildingID(Integer originDPortBuildingID) {
        this.originDPortBuildingID = originDPortBuildingID;
    }

    /**
     * 原始出发航站楼名称
     */
    public String getOriginDPortBuildingName() {
        return this.originDPortBuildingName;
    }

    public void setOriginDPortBuildingName(String originDPortBuildingName) {
        this.originDPortBuildingName = originDPortBuildingName;
    }

    /**
     * 原始航班号
     */
    public String getOriginFlightNo() {
        return this.originFlightNo;
    }

    public void setOriginFlightNo(String originFlightNo) {
        this.originFlightNo = originFlightNo;
    }

    /**
     * 原始子舱位
     */
    public String getOriginSubClass() {
        return this.originSubClass;
    }

    public void setOriginSubClass(String originSubClass) {
        this.originSubClass = originSubClass;
    }

    /**
     * 原始大舱位（Y、C、F）
     */
    public String getOriginClass() {
        return this.originClass;
    }

    public void setOriginClass(String originClass) {
        this.originClass = originClass;
    }

    /**
     * 原始到达机场
     */
    public String getOriginAPort() {
        return this.originAPort;
    }

    public void setOriginAPort(String originAPort) {
        this.originAPort = originAPort;
    }

    /**
     * 原始出发机场
     */
    public String getOriginDPort() {
        return this.originDPort;
    }

    public void setOriginDPort(String originDPort) {
        this.originDPort = originDPort;
    }

    /**
     * 实际承运航班号
     */
    public String getCarrierFlightNo() {
        return this.carrierFlightNo;
    }

    public void setCarrierFlightNo(String carrierFlightNo) {
        this.carrierFlightNo = carrierFlightNo;
    }

    /**
     * 记录编号
     */
    public String getRecordNo() {
        return this.recordNo;
    }

    public void setRecordNo(String recordNo) {
        this.recordNo = recordNo;
    }

    /**
     * 是否改签程
     */
    public boolean getIsRebookSequence() {
        return this.isRebookSequence;
    }

    public void setIsRebookSequence(boolean isRebookSequence) {
        this.isRebookSequence = isRebookSequence;
    }

    /**
     * 原始出发城市编码
     */
    public Integer getOriginDCity() {
        return this.originDCity;
    }

    public void setOriginDCity(Integer originDCity) {
        this.originDCity = originDCity;
    }

    /**
     * 原始到达城市编码
     */
    public Integer getOriginACity() {
        return this.originACity;
    }

    public void setOriginACity(Integer originACity) {
        this.originACity = originACity;
    }

    /**
     * 原始航司大编码
     */
    public String getAirLineRecordNo() {
        return this.airLineRecordNo;
    }

    public void setAirLineRecordNo(String airLineRecordNo) {
        this.airLineRecordNo = airLineRecordNo;
    }

    /**
     * 原始订位的OfficeNO
     */
    public String getOfficeNO() {
        return this.officeNO;
    }

    public void setOfficeNO(String officeNO) {
        this.officeNO = officeNO;
    }

    /**
     * 是否地面程(T：是，F：否)
     */
    public String getIsSurface() {
        return this.isSurface;
    }

    public void setIsSurface(String isSurface) {
        this.isSurface = isSurface;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (int) this.segmentNo;
            case 1: return (int) this.sequence;
            case 2: return (Integer) this.flightSaleProductType;
            case 3: return (Calendar) this.originTakeOffTime;
            case 4: return (Calendar) this.originArrivalTime;
            case 5: return (Integer) this.originAPortBuildingID;
            case 6: return (String) this.originAPortBuildingName;
            case 7: return (Integer) this.originDPortBuildingID;
            case 8: return (String) this.originDPortBuildingName;
            case 9: return (String) this.originFlightNo;
            case 10: return (String) this.originSubClass;
            case 11: return (String) this.originClass;
            case 12: return (String) this.originAPort;
            case 13: return (String) this.originDPort;
            case 14: return (String) this.carrierFlightNo;
            case 15: return (String) this.recordNo;
            case 16: return (boolean) this.isRebookSequence;
            case 17: return (Integer) this.originDCity;
            case 18: return (Integer) this.originACity;
            case 19: return (String) this.airLineRecordNo;
            case 20: return (String) this.officeNO;
            case 21: return (String) this.isSurface;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.segmentNo = (int)fieldValue; break;
            case 1: this.sequence = (int)fieldValue; break;
            case 2: this.flightSaleProductType = (Integer)fieldValue; break;
            case 3: this.originTakeOffTime = (Calendar)fieldValue; break;
            case 4: this.originArrivalTime = (Calendar)fieldValue; break;
            case 5: this.originAPortBuildingID = (Integer)fieldValue; break;
            case 6: this.originAPortBuildingName = (String)fieldValue; break;
            case 7: this.originDPortBuildingID = (Integer)fieldValue; break;
            case 8: this.originDPortBuildingName = (String)fieldValue; break;
            case 9: this.originFlightNo = (String)fieldValue; break;
            case 10: this.originSubClass = (String)fieldValue; break;
            case 11: this.originClass = (String)fieldValue; break;
            case 12: this.originAPort = (String)fieldValue; break;
            case 13: this.originDPort = (String)fieldValue; break;
            case 14: this.carrierFlightNo = (String)fieldValue; break;
            case 15: this.recordNo = (String)fieldValue; break;
            case 16: this.isRebookSequence = (boolean)fieldValue; break;
            case 17: this.originDCity = (Integer)fieldValue; break;
            case 18: this.originACity = (Integer)fieldValue; break;
            case 19: this.airLineRecordNo = (String)fieldValue; break;
            case 20: this.officeNO = (String)fieldValue; break;
            case 21: this.isSurface = (String)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final RebookingFlightItem other = (RebookingFlightItem)obj;
        return
            Objects.equal(this.segmentNo, other.segmentNo) && 
            Objects.equal(this.sequence, other.sequence) && 
            Objects.equal(this.flightSaleProductType, other.flightSaleProductType) && 
            Objects.equal(this.originTakeOffTime, other.originTakeOffTime) && 
            Objects.equal(this.originArrivalTime, other.originArrivalTime) && 
            Objects.equal(this.originAPortBuildingID, other.originAPortBuildingID) && 
            Objects.equal(this.originAPortBuildingName, other.originAPortBuildingName) && 
            Objects.equal(this.originDPortBuildingID, other.originDPortBuildingID) && 
            Objects.equal(this.originDPortBuildingName, other.originDPortBuildingName) && 
            Objects.equal(this.originFlightNo, other.originFlightNo) && 
            Objects.equal(this.originSubClass, other.originSubClass) && 
            Objects.equal(this.originClass, other.originClass) && 
            Objects.equal(this.originAPort, other.originAPort) && 
            Objects.equal(this.originDPort, other.originDPort) && 
            Objects.equal(this.carrierFlightNo, other.carrierFlightNo) && 
            Objects.equal(this.recordNo, other.recordNo) && 
            Objects.equal(this.isRebookSequence, other.isRebookSequence) && 
            Objects.equal(this.originDCity, other.originDCity) && 
            Objects.equal(this.originACity, other.originACity) && 
            Objects.equal(this.airLineRecordNo, other.airLineRecordNo) && 
            Objects.equal(this.officeNO, other.officeNO) && 
            Objects.equal(this.isSurface, other.isSurface);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.segmentNo);
        result = 31 * result + Objects.hashCode(this.sequence);
        result = 31 * result + Objects.hashCode(this.flightSaleProductType);
        result = 31 * result + Objects.hashCode(this.originTakeOffTime);
        result = 31 * result + Objects.hashCode(this.originArrivalTime);
        result = 31 * result + Objects.hashCode(this.originAPortBuildingID);
        result = 31 * result + Objects.hashCode(this.originAPortBuildingName);
        result = 31 * result + Objects.hashCode(this.originDPortBuildingID);
        result = 31 * result + Objects.hashCode(this.originDPortBuildingName);
        result = 31 * result + Objects.hashCode(this.originFlightNo);
        result = 31 * result + Objects.hashCode(this.originSubClass);
        result = 31 * result + Objects.hashCode(this.originClass);
        result = 31 * result + Objects.hashCode(this.originAPort);
        result = 31 * result + Objects.hashCode(this.originDPort);
        result = 31 * result + Objects.hashCode(this.carrierFlightNo);
        result = 31 * result + Objects.hashCode(this.recordNo);
        result = 31 * result + Objects.hashCode(this.isRebookSequence);
        result = 31 * result + Objects.hashCode(this.originDCity);
        result = 31 * result + Objects.hashCode(this.originACity);
        result = 31 * result + Objects.hashCode(this.airLineRecordNo);
        result = 31 * result + Objects.hashCode(this.officeNO);
        result = 31 * result + Objects.hashCode(this.isSurface);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("segmentNo", segmentNo)
            .add("sequence", sequence)
            .add("flightSaleProductType", flightSaleProductType)
            .add("originTakeOffTime", originTakeOffTime)
            .add("originArrivalTime", originArrivalTime)
            .add("originAPortBuildingID", originAPortBuildingID)
            .add("originAPortBuildingName", originAPortBuildingName)
            .add("originDPortBuildingID", originDPortBuildingID)
            .add("originDPortBuildingName", originDPortBuildingName)
            .add("originFlightNo", originFlightNo)
            .add("originSubClass", originSubClass)
            .add("originClass", originClass)
            .add("originAPort", originAPort)
            .add("originDPort", originDPort)
            .add("carrierFlightNo", carrierFlightNo)
            .add("recordNo", recordNo)
            .add("isRebookSequence", isRebookSequence)
            .add("originDCity", originDCity)
            .add("originACity", originACity)
            .add("airLineRecordNo", airLineRecordNo)
            .add("officeNO", officeNO)
            .add("isSurface", isSurface)
            .toString();
    }
}