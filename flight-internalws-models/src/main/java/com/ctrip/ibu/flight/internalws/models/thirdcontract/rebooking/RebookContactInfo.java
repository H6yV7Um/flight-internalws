/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.ibu.flight.internalws.models.thirdcontract.rebooking;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 改签联系信息
 */
@DtoDoc("改签联系信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RebookContactInfo", namespace = "http://soa.ctrip.com/flight/Ticket/Rebooking/QueryApi/v1", propOrder = {
    "contactor",
    "countryCode",
    "contactPhoneNo",
    "contactEmail",
    "confirmType"
})
@SuppressWarnings("all")
public class RebookContactInfo implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"RebookContactInfo\",\"namespace\":\"" + RebookContactInfo.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"contactor\",\"type\":[\"string\",\"null\"]},{\"name\":\"countryCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"contactPhoneNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"contactEmail\",\"type\":[\"string\",\"null\"]},{\"name\":\"confirmType\",\"type\":\"int\"}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public RebookContactInfo(
        String contactor, 
        String countryCode, 
        String contactPhoneNo, 
        String contactEmail, 
        int confirmType) {
        this.contactor = contactor;
        this.countryCode = countryCode;
        this.contactPhoneNo = contactPhoneNo;
        this.contactEmail = contactEmail;
        this.confirmType = confirmType;
    }

    public RebookContactInfo() {
    }

    @FieldDoc("联系人")
    @JsonProperty("Contactor")
    @XmlElement(name = "Contactor")
    private String contactor;

    @FieldDoc("联系人电话国家码")
    @JsonProperty("CountryCode")
    @XmlElement(name = "CountryCode")
    private String countryCode;

    @FieldDoc("联系电话")
    @JsonProperty("ContactPhoneNo")
    @XmlElement(name = "ContactPhoneNo")
    private String contactPhoneNo;

    @FieldDoc("联系邮件")
    @JsonProperty("ContactEmail")
    @XmlElement(name = "ContactEmail")
    private String contactEmail;

    @FieldDoc("确认方式(0:默认,1:短信确认,2:电话确认,3:邮件确认")
    @JsonProperty("ConfirmType")
    @XmlElement(name = "ConfirmType")
    private int confirmType;

    /**
     * 联系人
     */
    public String getContactor() {
        return this.contactor;
    }

    public void setContactor(String contactor) {
        this.contactor = contactor;
    }

    /**
     * 联系人电话国家码
     */
    public String getCountryCode() {
        return this.countryCode;
    }

    public void setCountryCode(String countryCode) {
        this.countryCode = countryCode;
    }

    /**
     * 联系电话
     */
    public String getContactPhoneNo() {
        return this.contactPhoneNo;
    }

    public void setContactPhoneNo(String contactPhoneNo) {
        this.contactPhoneNo = contactPhoneNo;
    }

    /**
     * 联系邮件
     */
    public String getContactEmail() {
        return this.contactEmail;
    }

    public void setContactEmail(String contactEmail) {
        this.contactEmail = contactEmail;
    }

    /**
     * 确认方式(0:默认,1:短信确认,2:电话确认,3:邮件确认
     */
    public int getConfirmType() {
        return this.confirmType;
    }

    public void setConfirmType(int confirmType) {
        this.confirmType = confirmType;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (String) this.contactor;
            case 1: return (String) this.countryCode;
            case 2: return (String) this.contactPhoneNo;
            case 3: return (String) this.contactEmail;
            case 4: return (int) this.confirmType;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.contactor = (String)fieldValue; break;
            case 1: this.countryCode = (String)fieldValue; break;
            case 2: this.contactPhoneNo = (String)fieldValue; break;
            case 3: this.contactEmail = (String)fieldValue; break;
            case 4: this.confirmType = (int)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final RebookContactInfo other = (RebookContactInfo)obj;
        return
            Objects.equal(this.contactor, other.contactor) && 
            Objects.equal(this.countryCode, other.countryCode) && 
            Objects.equal(this.contactPhoneNo, other.contactPhoneNo) && 
            Objects.equal(this.contactEmail, other.contactEmail) && 
            Objects.equal(this.confirmType, other.confirmType);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.contactor);
        result = 31 * result + Objects.hashCode(this.countryCode);
        result = 31 * result + Objects.hashCode(this.contactPhoneNo);
        result = 31 * result + Objects.hashCode(this.contactEmail);
        result = 31 * result + Objects.hashCode(this.confirmType);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("contactor", contactor)
            .add("countryCode", countryCode)
            .add("contactPhoneNo", contactPhoneNo)
            .add("contactEmail", contactEmail)
            .add("confirmType", confirmType)
            .toString();
    }
}