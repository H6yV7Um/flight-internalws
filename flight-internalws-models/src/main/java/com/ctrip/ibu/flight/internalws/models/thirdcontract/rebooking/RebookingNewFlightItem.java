/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.ibu.flight.internalws.models.thirdcontract.rebooking;

import com.ctriposs.baiji.convert.TypeConverter;
import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import java.util.Calendar;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 *         改签新航班信息
 *       
 */
@DtoDoc("改签新航班信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RebookingNewFlightItem", namespace = "http://soa.ctrip.com/flight/Order/FlightOrderRebooking/v1", propOrder = {
    "segmentNo",
    "sequence",
    "newTakeOffTime",
    "newArrivalTime",
    "newAPortBuildingID",
    "newAPortBuildingName",
    "newDPortBuildingID",
    "newDPortBuildingName",
    "newFlightNo",
    "newSubClass",
    "newClass",
    "newAPort",
    "newDPort",
    "recordNo",
    "airLineRecordNo",
    "officeNO",
    "carrierFlightNo",
    "newDCity",
    "newACity",
    "isRebookSequence",
    "subsidy",
    "printPrice",
    "salePrice",
    "oilFee",
    "tax",
    "currency",
    "currencyRate",
    "totalRebookFee",
    "dateChangeFee",
    "priceDifferential",
    "taxDifferential",
    "supplierCurrency",
    "supplierCurrencyRate",
    "supplierTotalRebookFee",
    "supplierDateChangeFee",
    "supplierPriceDifferential",
    "supplierTaxDifferential",
    "supplierServiceFeeForCustom",
    "ctripServiceFeeForCustom",
    "airlineServiceFeeForCustom",
    "supplierServiceFeeForSupplier",
    "ctripServiceFeeForSupplier",
    "airlineServiceFeeForSupplier",
    "isSurface",
    "newTakeOffTimeOfBeijing",
    "newArriveTimeOfBeijing",
    "supplierSalePrice",
    "supplierTax",
    "craftType",
    "duration"
})
@SuppressWarnings("all")
public class RebookingNewFlightItem implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"RebookingNewFlightItem\",\"namespace\":\"" + RebookingNewFlightItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"segmentNo\",\"type\":\"int\"},{\"name\":\"sequence\",\"type\":\"int\"},{\"name\":\"newTakeOffTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"newArrivalTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"newAPortBuildingID\",\"type\":[\"int\",\"null\"]},{\"name\":\"newAPortBuildingName\",\"type\":[\"string\",\"null\"]},{\"name\":\"newDPortBuildingID\",\"type\":[\"int\",\"null\"]},{\"name\":\"newDPortBuildingName\",\"type\":[\"string\",\"null\"]},{\"name\":\"newFlightNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"newSubClass\",\"type\":[\"string\",\"null\"]},{\"name\":\"newClass\",\"type\":[\"string\",\"null\"]},{\"name\":\"newAPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"newDPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"recordNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"airLineRecordNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"officeNO\",\"type\":[\"string\",\"null\"]},{\"name\":\"carrierFlightNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"newDCity\",\"type\":[\"int\",\"null\"]},{\"name\":\"newACity\",\"type\":[\"int\",\"null\"]},{\"name\":\"isRebookSequence\",\"type\":\"boolean\"},{\"name\":\"subsidy\",\"type\":[\"string\",\"null\"]},{\"name\":\"printPrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"salePrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"oilFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"tax\",\"type\":[\"string\",\"null\"]},{\"name\":\"currency\",\"type\":[\"string\",\"null\"]},{\"name\":\"currencyRate\",\"type\":[\"string\",\"null\"]},{\"name\":\"totalRebookFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"dateChangeFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"priceDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"taxDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierCurrency\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierCurrencyRate\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierTotalRebookFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierDateChangeFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierPriceDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierTaxDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierServiceFeeForCustom\",\"type\":[\"string\",\"null\"]},{\"name\":\"ctripServiceFeeForCustom\",\"type\":[\"string\",\"null\"]},{\"name\":\"airlineServiceFeeForCustom\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierServiceFeeForSupplier\",\"type\":[\"string\",\"null\"]},{\"name\":\"ctripServiceFeeForSupplier\",\"type\":[\"string\",\"null\"]},{\"name\":\"airlineServiceFeeForSupplier\",\"type\":[\"string\",\"null\"]},{\"name\":\"isSurface\",\"type\":[\"string\",\"null\"]},{\"name\":\"newTakeOffTimeOfBeijing\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"newArriveTimeOfBeijing\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"supplierSalePrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierTax\",\"type\":[\"string\",\"null\"]},{\"name\":\"craftType\",\"type\":[\"string\",\"null\"]},{\"name\":\"duration\",\"type\":[\"int\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public RebookingNewFlightItem(
        int segmentNo, 
        int sequence, 
        Calendar newTakeOffTime, 
        Calendar newArrivalTime, 
        Integer newAPortBuildingID, 
        String newAPortBuildingName, 
        Integer newDPortBuildingID, 
        String newDPortBuildingName, 
        String newFlightNo, 
        String newSubClass, 
        String newClass, 
        String newAPort, 
        String newDPort, 
        String recordNo, 
        String airLineRecordNo, 
        String officeNO, 
        String carrierFlightNo, 
        Integer newDCity, 
        Integer newACity, 
        boolean isRebookSequence, 
        BigDecimal subsidy, 
        BigDecimal printPrice, 
        BigDecimal salePrice, 
        BigDecimal oilFee, 
        BigDecimal tax, 
        String currency, 
        BigDecimal currencyRate, 
        BigDecimal totalRebookFee, 
        BigDecimal dateChangeFee, 
        BigDecimal priceDifferential, 
        BigDecimal taxDifferential, 
        String supplierCurrency, 
        BigDecimal supplierCurrencyRate, 
        BigDecimal supplierTotalRebookFee, 
        BigDecimal supplierDateChangeFee, 
        BigDecimal supplierPriceDifferential, 
        BigDecimal supplierTaxDifferential, 
        BigDecimal supplierServiceFeeForCustom, 
        BigDecimal ctripServiceFeeForCustom, 
        BigDecimal airlineServiceFeeForCustom, 
        BigDecimal supplierServiceFeeForSupplier, 
        BigDecimal ctripServiceFeeForSupplier, 
        BigDecimal airlineServiceFeeForSupplier, 
        String isSurface, 
        Calendar newTakeOffTimeOfBeijing, 
        Calendar newArriveTimeOfBeijing, 
        BigDecimal supplierSalePrice, 
        BigDecimal supplierTax, 
        String craftType, 
        Integer duration) {
        this.segmentNo = segmentNo;
        this.sequence = sequence;
        this.newTakeOffTime = newTakeOffTime;
        this.newArrivalTime = newArrivalTime;
        this.newAPortBuildingID = newAPortBuildingID;
        this.newAPortBuildingName = newAPortBuildingName;
        this.newDPortBuildingID = newDPortBuildingID;
        this.newDPortBuildingName = newDPortBuildingName;
        this.newFlightNo = newFlightNo;
        this.newSubClass = newSubClass;
        this.newClass = newClass;
        this.newAPort = newAPort;
        this.newDPort = newDPort;
        this.recordNo = recordNo;
        this.airLineRecordNo = airLineRecordNo;
        this.officeNO = officeNO;
        this.carrierFlightNo = carrierFlightNo;
        this.newDCity = newDCity;
        this.newACity = newACity;
        this.isRebookSequence = isRebookSequence;
        this.subsidy = subsidy;
        this.printPrice = printPrice;
        this.salePrice = salePrice;
        this.oilFee = oilFee;
        this.tax = tax;
        this.currency = currency;
        this.currencyRate = currencyRate;
        this.totalRebookFee = totalRebookFee;
        this.dateChangeFee = dateChangeFee;
        this.priceDifferential = priceDifferential;
        this.taxDifferential = taxDifferential;
        this.supplierCurrency = supplierCurrency;
        this.supplierCurrencyRate = supplierCurrencyRate;
        this.supplierTotalRebookFee = supplierTotalRebookFee;
        this.supplierDateChangeFee = supplierDateChangeFee;
        this.supplierPriceDifferential = supplierPriceDifferential;
        this.supplierTaxDifferential = supplierTaxDifferential;
        this.supplierServiceFeeForCustom = supplierServiceFeeForCustom;
        this.ctripServiceFeeForCustom = ctripServiceFeeForCustom;
        this.airlineServiceFeeForCustom = airlineServiceFeeForCustom;
        this.supplierServiceFeeForSupplier = supplierServiceFeeForSupplier;
        this.ctripServiceFeeForSupplier = ctripServiceFeeForSupplier;
        this.airlineServiceFeeForSupplier = airlineServiceFeeForSupplier;
        this.isSurface = isSurface;
        this.newTakeOffTimeOfBeijing = newTakeOffTimeOfBeijing;
        this.newArriveTimeOfBeijing = newArriveTimeOfBeijing;
        this.supplierSalePrice = supplierSalePrice;
        this.supplierTax = supplierTax;
        this.craftType = craftType;
        this.duration = duration;
    }

    public RebookingNewFlightItem() {
        this.currencyRate = new BigDecimal(0);
        this.supplierCurrencyRate = new BigDecimal(0);
    }

    @FieldDoc("原始多程航班对应客人选择的航段编号")
    @JsonProperty("SegmentNo")
    @XmlElement(name = "SegmentNo")
    private int segmentNo;

    @FieldDoc("改签后的航段序号")
    @JsonProperty("Sequence")
    @XmlElement(name = "Sequence")
    private int sequence;

    @FieldDoc("改签后的航班起飞时间")
    @JsonProperty("NewTakeOffTime")
    @XmlElement(name = "NewTakeOffTime", nillable = true)
    private Calendar newTakeOffTime;

    @FieldDoc("改签后的航班到达时间")
    @JsonProperty("NewArrivalTime")
    @XmlElement(name = "NewArrivalTime", nillable = true)
    private Calendar newArrivalTime;

    @FieldDoc("改签后的到达航站楼编号")
    @JsonProperty("NewAPortBuildingID")
    @XmlElement(name = "NewAPortBuildingID", nillable = true)
    private Integer newAPortBuildingID;

    @FieldDoc("改签后的到达航站楼名称")
    @JsonProperty("NewAPortBuildingName")
    @XmlElement(name = "NewAPortBuildingName")
    private String newAPortBuildingName;

    @FieldDoc("改签后的出发航站楼编号")
    @JsonProperty("NewDPortBuildingID")
    @XmlElement(name = "NewDPortBuildingID", nillable = true)
    private Integer newDPortBuildingID;

    @FieldDoc("改签后的出发航站楼名称")
    @JsonProperty("NewDPortBuildingName")
    @XmlElement(name = "NewDPortBuildingName")
    private String newDPortBuildingName;

    @FieldDoc("改签后的航班号")
    @JsonProperty("NewFlightNo")
    @XmlElement(name = "NewFlightNo")
    private String newFlightNo;

    @FieldDoc("改签后的子舱位")
    @JsonProperty("NewSubClass")
    @XmlElement(name = "NewSubClass")
    private String newSubClass;

    @FieldDoc("改签后的大舱位（Y、C、F）")
    @JsonProperty("NewClass")
    @XmlElement(name = "NewClass")
    private String newClass;

    @FieldDoc("改签后的到达机场")
    @JsonProperty("NewAPort")
    @XmlElement(name = "NewAPort")
    private String newAPort;

    @FieldDoc("改签后的出发机场")
    @JsonProperty("NewDPort")
    @XmlElement(name = "NewDPort")
    private String newDPort;

    @FieldDoc("改签后的记录编号")
    @JsonProperty("RecordNo")
    @XmlElement(name = "RecordNo")
    private String recordNo;

    @FieldDoc("改签后的航司大编码")
    @JsonProperty("AirLineRecordNo")
    @XmlElement(name = "AirLineRecordNo")
    private String airLineRecordNo;

    @FieldDoc("改签后的订位的OfficeNO")
    @JsonProperty("OfficeNO")
    @XmlElement(name = "OfficeNO")
    private String officeNO;

    @FieldDoc("实际承运航班号")
    @JsonProperty("CarrierFlightNo")
    @XmlElement(name = "CarrierFlightNo")
    private String carrierFlightNo;

    @FieldDoc("改签后的出发城市编码")
    @JsonProperty("NewDCity")
    @XmlElement(name = "NewDCity", nillable = true)
    private Integer newDCity;

    @FieldDoc("改签后的到达城市编码")
    @JsonProperty("NewACity")
    @XmlElement(name = "NewACity", nillable = true)
    private Integer newACity;

    @FieldDoc("是否改签程")
    @JsonProperty("IsRebookSequence")
    @XmlElement(name = "IsRebookSequence")
    private boolean isRebookSequence;

    @FieldDoc("补贴金")
    @JsonProperty("Subsidy")
    @XmlElement(name = "Subsidy", nillable = true)
    private BigDecimal subsidy;

    @FieldDoc("面价")
    @JsonProperty("PrintPrice")
    @XmlElement(name = "PrintPrice", nillable = true)
    private BigDecimal printPrice;

    @FieldDoc("售价")
    @JsonProperty("SalePrice")
    @XmlElement(name = "SalePrice", nillable = true)
    private BigDecimal salePrice;

    @FieldDoc("油费")
    @JsonProperty("OilFee")
    @XmlElement(name = "OilFee", nillable = true)
    private BigDecimal oilFee;

    @FieldDoc("税")
    @JsonProperty("Tax")
    @XmlElement(name = "Tax", nillable = true)
    private BigDecimal tax;

    @FieldDoc("币种（RMB,HKD,USD等）")
    @JsonProperty("Currency")
    @XmlElement(name = "Currency")
    private String currency;

    @FieldDoc("汇率(相对人民币的)")
    @JsonProperty("CurrencyRate")
    @XmlElement(name = "CurrencyRate")
    private BigDecimal currencyRate;

    @FieldDoc("总改签费(由差价,改期费,升舱费按几种不同公式计算出来)")
    @JsonProperty("TotalRebookFee")
    @XmlElement(name = "TotalRebookFee", nillable = true)
    private BigDecimal totalRebookFee;

    @FieldDoc("改期费")
    @JsonProperty("DateChangeFee")
    @XmlElement(name = "DateChangeFee", nillable = true)
    private BigDecimal dateChangeFee;

    @FieldDoc("机票差价")
    @JsonProperty("PriceDifferential")
    @XmlElement(name = "PriceDifferential", nillable = true)
    private BigDecimal priceDifferential;

    @FieldDoc("税差")
    @JsonProperty("TaxDifferential")
    @XmlElement(name = "TaxDifferential", nillable = true)
    private BigDecimal taxDifferential;

    @FieldDoc("供应商币种（RMB,HKD,USD等）")
    @JsonProperty("SupplierCurrency")
    @XmlElement(name = "SupplierCurrency")
    private String supplierCurrency;

    @FieldDoc("供应商汇率(相对人民币的)")
    @JsonProperty("SupplierCurrencyRate")
    @XmlElement(name = "SupplierCurrencyRate")
    private BigDecimal supplierCurrencyRate;

    @FieldDoc("供应商总改签费(由差价,改期费,升舱费按几种不同公式计算出来)")
    @JsonProperty("SupplierTotalRebookFee")
    @XmlElement(name = "SupplierTotalRebookFee", nillable = true)
    private BigDecimal supplierTotalRebookFee;

    @FieldDoc("供应商更改费")
    @JsonProperty("SupplierDateChangeFee")
    @XmlElement(name = "SupplierDateChangeFee", nillable = true)
    private BigDecimal supplierDateChangeFee;

    @FieldDoc("供应商差价")
    @JsonProperty("SupplierPriceDifferential")
    @XmlElement(name = "SupplierPriceDifferential", nillable = true)
    private BigDecimal supplierPriceDifferential;

    @FieldDoc("供应商税差")
    @JsonProperty("SupplierTaxDifferential")
    @XmlElement(name = "SupplierTaxDifferential", nillable = true)
    private BigDecimal supplierTaxDifferential;

    @FieldDoc("供应商服务费，用于结算，-客人，来自o_refrevservicefee表")
    @JsonProperty("SupplierServiceFeeForCustom")
    @XmlElement(name = "SupplierServiceFeeForCustom", nillable = true)
    private BigDecimal supplierServiceFeeForCustom;

    @FieldDoc("携程服务费，用于结算，-客人，来自o_refrevservicefee表")
    @JsonProperty("CtripServiceFeeForCustom")
    @XmlElement(name = "CtripServiceFeeForCustom", nillable = true)
    private BigDecimal ctripServiceFeeForCustom;

    @FieldDoc("航司服务费，用于结算，-客人，来自o_refrevservicefee表")
    @JsonProperty("AirlineServiceFeeForCustom")
    @XmlElement(name = "AirlineServiceFeeForCustom", nillable = true)
    private BigDecimal airlineServiceFeeForCustom;

    @FieldDoc("供应商服务费，用于结算，-供应商，来自o_refrevservicefee表")
    @JsonProperty("SupplierServiceFeeForSupplier")
    @XmlElement(name = "SupplierServiceFeeForSupplier", nillable = true)
    private BigDecimal supplierServiceFeeForSupplier;

    @FieldDoc("携程服务费，用于结算，-供应商，来自o_refrevservicefee表")
    @JsonProperty("CtripServiceFeeForSupplier")
    @XmlElement(name = "CtripServiceFeeForSupplier", nillable = true)
    private BigDecimal ctripServiceFeeForSupplier;

    @FieldDoc("航司服务费，用于结算，-供应商，来自o_refrevservicefee表")
    @JsonProperty("AirlineServiceFeeForSupplier")
    @XmlElement(name = "AirlineServiceFeeForSupplier", nillable = true)
    private BigDecimal airlineServiceFeeForSupplier;

    @FieldDoc("是否地面程(T：是，F：否)")
    @JsonProperty("IsSurface")
    @XmlElement(name = "IsSurface")
    private String isSurface;

    @FieldDoc("改签后的航班起飞北京时间")
    @JsonProperty("NewTakeOffTimeOfBeijing")
    @XmlElement(name = "NewTakeOffTimeOfBeijing", nillable = true)
    private Calendar newTakeOffTimeOfBeijing;

    @FieldDoc("改签后的航班到达北京时间")
    @JsonProperty("NewArriveTimeOfBeijing")
    @XmlElement(name = "NewArriveTimeOfBeijing", nillable = true)
    private Calendar newArriveTimeOfBeijing;

    @FieldDoc("供应商售价")
    @JsonProperty("SupplierSalePrice")
    @XmlElement(name = "SupplierSalePrice", nillable = true)
    private BigDecimal supplierSalePrice;

    @FieldDoc("供应商税")
    @JsonProperty("SupplierTax")
    @XmlElement(name = "SupplierTax", nillable = true)
    private BigDecimal supplierTax;

    @FieldDoc("机型")
    @JsonProperty("CraftType")
    @XmlElement(name = "CraftType")
    private String craftType;

    @FieldDoc("飞行时长")
    @JsonProperty("Duration")
    @XmlElement(name = "Duration", nillable = true)
    private Integer duration;

    /**
     * 原始多程航班对应客人选择的航段编号
     */
    public int getSegmentNo() {
        return this.segmentNo;
    }

    public void setSegmentNo(int segmentNo) {
        this.segmentNo = segmentNo;
    }

    /**
     * 改签后的航段序号
     */
    public int getSequence() {
        return this.sequence;
    }

    public void setSequence(int sequence) {
        this.sequence = sequence;
    }

    /**
     * 改签后的航班起飞时间
     */
    public Calendar getNewTakeOffTime() {
        return this.newTakeOffTime;
    }

    public void setNewTakeOffTime(Calendar newTakeOffTime) {
        this.newTakeOffTime = newTakeOffTime;
    }

    /**
     * 改签后的航班到达时间
     */
    public Calendar getNewArrivalTime() {
        return this.newArrivalTime;
    }

    public void setNewArrivalTime(Calendar newArrivalTime) {
        this.newArrivalTime = newArrivalTime;
    }

    /**
     * 改签后的到达航站楼编号
     */
    public Integer getNewAPortBuildingID() {
        return this.newAPortBuildingID;
    }

    public void setNewAPortBuildingID(Integer newAPortBuildingID) {
        this.newAPortBuildingID = newAPortBuildingID;
    }

    /**
     * 改签后的到达航站楼名称
     */
    public String getNewAPortBuildingName() {
        return this.newAPortBuildingName;
    }

    public void setNewAPortBuildingName(String newAPortBuildingName) {
        this.newAPortBuildingName = newAPortBuildingName;
    }

    /**
     * 改签后的出发航站楼编号
     */
    public Integer getNewDPortBuildingID() {
        return this.newDPortBuildingID;
    }

    public void setNewDPortBuildingID(Integer newDPortBuildingID) {
        this.newDPortBuildingID = newDPortBuildingID;
    }

    /**
     * 改签后的出发航站楼名称
     */
    public String getNewDPortBuildingName() {
        return this.newDPortBuildingName;
    }

    public void setNewDPortBuildingName(String newDPortBuildingName) {
        this.newDPortBuildingName = newDPortBuildingName;
    }

    /**
     * 改签后的航班号
     */
    public String getNewFlightNo() {
        return this.newFlightNo;
    }

    public void setNewFlightNo(String newFlightNo) {
        this.newFlightNo = newFlightNo;
    }

    /**
     * 改签后的子舱位
     */
    public String getNewSubClass() {
        return this.newSubClass;
    }

    public void setNewSubClass(String newSubClass) {
        this.newSubClass = newSubClass;
    }

    /**
     * 改签后的大舱位（Y、C、F）
     */
    public String getNewClass() {
        return this.newClass;
    }

    public void setNewClass(String newClass) {
        this.newClass = newClass;
    }

    /**
     * 改签后的到达机场
     */
    public String getNewAPort() {
        return this.newAPort;
    }

    public void setNewAPort(String newAPort) {
        this.newAPort = newAPort;
    }

    /**
     * 改签后的出发机场
     */
    public String getNewDPort() {
        return this.newDPort;
    }

    public void setNewDPort(String newDPort) {
        this.newDPort = newDPort;
    }

    /**
     * 改签后的记录编号
     */
    public String getRecordNo() {
        return this.recordNo;
    }

    public void setRecordNo(String recordNo) {
        this.recordNo = recordNo;
    }

    /**
     * 改签后的航司大编码
     */
    public String getAirLineRecordNo() {
        return this.airLineRecordNo;
    }

    public void setAirLineRecordNo(String airLineRecordNo) {
        this.airLineRecordNo = airLineRecordNo;
    }

    /**
     * 改签后的订位的OfficeNO
     */
    public String getOfficeNO() {
        return this.officeNO;
    }

    public void setOfficeNO(String officeNO) {
        this.officeNO = officeNO;
    }

    /**
     * 实际承运航班号
     */
    public String getCarrierFlightNo() {
        return this.carrierFlightNo;
    }

    public void setCarrierFlightNo(String carrierFlightNo) {
        this.carrierFlightNo = carrierFlightNo;
    }

    /**
     * 改签后的出发城市编码
     */
    public Integer getNewDCity() {
        return this.newDCity;
    }

    public void setNewDCity(Integer newDCity) {
        this.newDCity = newDCity;
    }

    /**
     * 改签后的到达城市编码
     */
    public Integer getNewACity() {
        return this.newACity;
    }

    public void setNewACity(Integer newACity) {
        this.newACity = newACity;
    }

    /**
     * 是否改签程
     */
    public boolean getIsRebookSequence() {
        return this.isRebookSequence;
    }

    public void setIsRebookSequence(boolean isRebookSequence) {
        this.isRebookSequence = isRebookSequence;
    }

    /**
     * 补贴金
     */
    public BigDecimal getSubsidy() {
        return this.subsidy;
    }

    public void setSubsidy(BigDecimal subsidy) {
        this.subsidy = subsidy;
    }

    /**
     * 面价
     */
    public BigDecimal getPrintPrice() {
        return this.printPrice;
    }

    public void setPrintPrice(BigDecimal printPrice) {
        this.printPrice = printPrice;
    }

    /**
     * 售价
     */
    public BigDecimal getSalePrice() {
        return this.salePrice;
    }

    public void setSalePrice(BigDecimal salePrice) {
        this.salePrice = salePrice;
    }

    /**
     * 油费
     */
    public BigDecimal getOilFee() {
        return this.oilFee;
    }

    public void setOilFee(BigDecimal oilFee) {
        this.oilFee = oilFee;
    }

    /**
     * 税
     */
    public BigDecimal getTax() {
        return this.tax;
    }

    public void setTax(BigDecimal tax) {
        this.tax = tax;
    }

    /**
     * 币种（RMB,HKD,USD等）
     */
    public String getCurrency() {
        return this.currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    /**
     * 汇率(相对人民币的)
     */
    public BigDecimal getCurrencyRate() {
        return this.currencyRate;
    }

    public void setCurrencyRate(BigDecimal currencyRate) {
        this.currencyRate = currencyRate;
    }

    /**
     * 总改签费(由差价,改期费,升舱费按几种不同公式计算出来)
     */
    public BigDecimal getTotalRebookFee() {
        return this.totalRebookFee;
    }

    public void setTotalRebookFee(BigDecimal totalRebookFee) {
        this.totalRebookFee = totalRebookFee;
    }

    /**
     * 改期费
     */
    public BigDecimal getDateChangeFee() {
        return this.dateChangeFee;
    }

    public void setDateChangeFee(BigDecimal dateChangeFee) {
        this.dateChangeFee = dateChangeFee;
    }

    /**
     * 机票差价
     */
    public BigDecimal getPriceDifferential() {
        return this.priceDifferential;
    }

    public void setPriceDifferential(BigDecimal priceDifferential) {
        this.priceDifferential = priceDifferential;
    }

    /**
     * 税差
     */
    public BigDecimal getTaxDifferential() {
        return this.taxDifferential;
    }

    public void setTaxDifferential(BigDecimal taxDifferential) {
        this.taxDifferential = taxDifferential;
    }

    /**
     * 供应商币种（RMB,HKD,USD等）
     */
    public String getSupplierCurrency() {
        return this.supplierCurrency;
    }

    public void setSupplierCurrency(String supplierCurrency) {
        this.supplierCurrency = supplierCurrency;
    }

    /**
     * 供应商汇率(相对人民币的)
     */
    public BigDecimal getSupplierCurrencyRate() {
        return this.supplierCurrencyRate;
    }

    public void setSupplierCurrencyRate(BigDecimal supplierCurrencyRate) {
        this.supplierCurrencyRate = supplierCurrencyRate;
    }

    /**
     * 供应商总改签费(由差价,改期费,升舱费按几种不同公式计算出来)
     */
    public BigDecimal getSupplierTotalRebookFee() {
        return this.supplierTotalRebookFee;
    }

    public void setSupplierTotalRebookFee(BigDecimal supplierTotalRebookFee) {
        this.supplierTotalRebookFee = supplierTotalRebookFee;
    }

    /**
     * 供应商更改费
     */
    public BigDecimal getSupplierDateChangeFee() {
        return this.supplierDateChangeFee;
    }

    public void setSupplierDateChangeFee(BigDecimal supplierDateChangeFee) {
        this.supplierDateChangeFee = supplierDateChangeFee;
    }

    /**
     * 供应商差价
     */
    public BigDecimal getSupplierPriceDifferential() {
        return this.supplierPriceDifferential;
    }

    public void setSupplierPriceDifferential(BigDecimal supplierPriceDifferential) {
        this.supplierPriceDifferential = supplierPriceDifferential;
    }

    /**
     * 供应商税差
     */
    public BigDecimal getSupplierTaxDifferential() {
        return this.supplierTaxDifferential;
    }

    public void setSupplierTaxDifferential(BigDecimal supplierTaxDifferential) {
        this.supplierTaxDifferential = supplierTaxDifferential;
    }

    /**
     * 供应商服务费，用于结算，-客人，来自o_refrevservicefee表
     */
    public BigDecimal getSupplierServiceFeeForCustom() {
        return this.supplierServiceFeeForCustom;
    }

    public void setSupplierServiceFeeForCustom(BigDecimal supplierServiceFeeForCustom) {
        this.supplierServiceFeeForCustom = supplierServiceFeeForCustom;
    }

    /**
     * 携程服务费，用于结算，-客人，来自o_refrevservicefee表
     */
    public BigDecimal getCtripServiceFeeForCustom() {
        return this.ctripServiceFeeForCustom;
    }

    public void setCtripServiceFeeForCustom(BigDecimal ctripServiceFeeForCustom) {
        this.ctripServiceFeeForCustom = ctripServiceFeeForCustom;
    }

    /**
     * 航司服务费，用于结算，-客人，来自o_refrevservicefee表
     */
    public BigDecimal getAirlineServiceFeeForCustom() {
        return this.airlineServiceFeeForCustom;
    }

    public void setAirlineServiceFeeForCustom(BigDecimal airlineServiceFeeForCustom) {
        this.airlineServiceFeeForCustom = airlineServiceFeeForCustom;
    }

    /**
     * 供应商服务费，用于结算，-供应商，来自o_refrevservicefee表
     */
    public BigDecimal getSupplierServiceFeeForSupplier() {
        return this.supplierServiceFeeForSupplier;
    }

    public void setSupplierServiceFeeForSupplier(BigDecimal supplierServiceFeeForSupplier) {
        this.supplierServiceFeeForSupplier = supplierServiceFeeForSupplier;
    }

    /**
     * 携程服务费，用于结算，-供应商，来自o_refrevservicefee表
     */
    public BigDecimal getCtripServiceFeeForSupplier() {
        return this.ctripServiceFeeForSupplier;
    }

    public void setCtripServiceFeeForSupplier(BigDecimal ctripServiceFeeForSupplier) {
        this.ctripServiceFeeForSupplier = ctripServiceFeeForSupplier;
    }

    /**
     * 航司服务费，用于结算，-供应商，来自o_refrevservicefee表
     */
    public BigDecimal getAirlineServiceFeeForSupplier() {
        return this.airlineServiceFeeForSupplier;
    }

    public void setAirlineServiceFeeForSupplier(BigDecimal airlineServiceFeeForSupplier) {
        this.airlineServiceFeeForSupplier = airlineServiceFeeForSupplier;
    }

    /**
     * 是否地面程(T：是，F：否)
     */
    public String getIsSurface() {
        return this.isSurface;
    }

    public void setIsSurface(String isSurface) {
        this.isSurface = isSurface;
    }

    /**
     * 改签后的航班起飞北京时间
     */
    public Calendar getNewTakeOffTimeOfBeijing() {
        return this.newTakeOffTimeOfBeijing;
    }

    public void setNewTakeOffTimeOfBeijing(Calendar newTakeOffTimeOfBeijing) {
        this.newTakeOffTimeOfBeijing = newTakeOffTimeOfBeijing;
    }

    /**
     * 改签后的航班到达北京时间
     */
    public Calendar getNewArriveTimeOfBeijing() {
        return this.newArriveTimeOfBeijing;
    }

    public void setNewArriveTimeOfBeijing(Calendar newArriveTimeOfBeijing) {
        this.newArriveTimeOfBeijing = newArriveTimeOfBeijing;
    }

    /**
     * 供应商售价
     */
    public BigDecimal getSupplierSalePrice() {
        return this.supplierSalePrice;
    }

    public void setSupplierSalePrice(BigDecimal supplierSalePrice) {
        this.supplierSalePrice = supplierSalePrice;
    }

    /**
     * 供应商税
     */
    public BigDecimal getSupplierTax() {
        return this.supplierTax;
    }

    public void setSupplierTax(BigDecimal supplierTax) {
        this.supplierTax = supplierTax;
    }

    /**
     * 机型
     */
    public String getCraftType() {
        return this.craftType;
    }

    public void setCraftType(String craftType) {
        this.craftType = craftType;
    }

    /**
     * 飞行时长
     */
    public Integer getDuration() {
        return this.duration;
    }

    public void setDuration(Integer duration) {
        this.duration = duration;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (int) this.segmentNo;
            case 1: return (int) this.sequence;
            case 2: return (Calendar) this.newTakeOffTime;
            case 3: return (Calendar) this.newArrivalTime;
            case 4: return (Integer) this.newAPortBuildingID;
            case 5: return (String) this.newAPortBuildingName;
            case 6: return (Integer) this.newDPortBuildingID;
            case 7: return (String) this.newDPortBuildingName;
            case 8: return (String) this.newFlightNo;
            case 9: return (String) this.newSubClass;
            case 10: return (String) this.newClass;
            case 11: return (String) this.newAPort;
            case 12: return (String) this.newDPort;
            case 13: return (String) this.recordNo;
            case 14: return (String) this.airLineRecordNo;
            case 15: return (String) this.officeNO;
            case 16: return (String) this.carrierFlightNo;
            case 17: return (Integer) this.newDCity;
            case 18: return (Integer) this.newACity;
            case 19: return (boolean) this.isRebookSequence;
            case 20: return TypeConverter.convert(this.subsidy, String.class);
            case 21: return TypeConverter.convert(this.printPrice, String.class);
            case 22: return TypeConverter.convert(this.salePrice, String.class);
            case 23: return TypeConverter.convert(this.oilFee, String.class);
            case 24: return TypeConverter.convert(this.tax, String.class);
            case 25: return (String) this.currency;
            case 26: return TypeConverter.convert(this.currencyRate, String.class);
            case 27: return TypeConverter.convert(this.totalRebookFee, String.class);
            case 28: return TypeConverter.convert(this.dateChangeFee, String.class);
            case 29: return TypeConverter.convert(this.priceDifferential, String.class);
            case 30: return TypeConverter.convert(this.taxDifferential, String.class);
            case 31: return (String) this.supplierCurrency;
            case 32: return TypeConverter.convert(this.supplierCurrencyRate, String.class);
            case 33: return TypeConverter.convert(this.supplierTotalRebookFee, String.class);
            case 34: return TypeConverter.convert(this.supplierDateChangeFee, String.class);
            case 35: return TypeConverter.convert(this.supplierPriceDifferential, String.class);
            case 36: return TypeConverter.convert(this.supplierTaxDifferential, String.class);
            case 37: return TypeConverter.convert(this.supplierServiceFeeForCustom, String.class);
            case 38: return TypeConverter.convert(this.ctripServiceFeeForCustom, String.class);
            case 39: return TypeConverter.convert(this.airlineServiceFeeForCustom, String.class);
            case 40: return TypeConverter.convert(this.supplierServiceFeeForSupplier, String.class);
            case 41: return TypeConverter.convert(this.ctripServiceFeeForSupplier, String.class);
            case 42: return TypeConverter.convert(this.airlineServiceFeeForSupplier, String.class);
            case 43: return (String) this.isSurface;
            case 44: return (Calendar) this.newTakeOffTimeOfBeijing;
            case 45: return (Calendar) this.newArriveTimeOfBeijing;
            case 46: return TypeConverter.convert(this.supplierSalePrice, String.class);
            case 47: return TypeConverter.convert(this.supplierTax, String.class);
            case 48: return (String) this.craftType;
            case 49: return (Integer) this.duration;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.segmentNo = (int)fieldValue; break;
            case 1: this.sequence = (int)fieldValue; break;
            case 2: this.newTakeOffTime = (Calendar)fieldValue; break;
            case 3: this.newArrivalTime = (Calendar)fieldValue; break;
            case 4: this.newAPortBuildingID = (Integer)fieldValue; break;
            case 5: this.newAPortBuildingName = (String)fieldValue; break;
            case 6: this.newDPortBuildingID = (Integer)fieldValue; break;
            case 7: this.newDPortBuildingName = (String)fieldValue; break;
            case 8: this.newFlightNo = (String)fieldValue; break;
            case 9: this.newSubClass = (String)fieldValue; break;
            case 10: this.newClass = (String)fieldValue; break;
            case 11: this.newAPort = (String)fieldValue; break;
            case 12: this.newDPort = (String)fieldValue; break;
            case 13: this.recordNo = (String)fieldValue; break;
            case 14: this.airLineRecordNo = (String)fieldValue; break;
            case 15: this.officeNO = (String)fieldValue; break;
            case 16: this.carrierFlightNo = (String)fieldValue; break;
            case 17: this.newDCity = (Integer)fieldValue; break;
            case 18: this.newACity = (Integer)fieldValue; break;
            case 19: this.isRebookSequence = (boolean)fieldValue; break;
            case 20: this.subsidy = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 21: this.printPrice = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 22: this.salePrice = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 23: this.oilFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 24: this.tax = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 25: this.currency = (String)fieldValue; break;
            case 26: this.currencyRate = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 27: this.totalRebookFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 28: this.dateChangeFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 29: this.priceDifferential = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 30: this.taxDifferential = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 31: this.supplierCurrency = (String)fieldValue; break;
            case 32: this.supplierCurrencyRate = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 33: this.supplierTotalRebookFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 34: this.supplierDateChangeFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 35: this.supplierPriceDifferential = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 36: this.supplierTaxDifferential = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 37: this.supplierServiceFeeForCustom = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 38: this.ctripServiceFeeForCustom = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 39: this.airlineServiceFeeForCustom = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 40: this.supplierServiceFeeForSupplier = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 41: this.ctripServiceFeeForSupplier = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 42: this.airlineServiceFeeForSupplier = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 43: this.isSurface = (String)fieldValue; break;
            case 44: this.newTakeOffTimeOfBeijing = (Calendar)fieldValue; break;
            case 45: this.newArriveTimeOfBeijing = (Calendar)fieldValue; break;
            case 46: this.supplierSalePrice = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 47: this.supplierTax = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 48: this.craftType = (String)fieldValue; break;
            case 49: this.duration = (Integer)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final RebookingNewFlightItem other = (RebookingNewFlightItem)obj;
        return
            Objects.equal(this.segmentNo, other.segmentNo) && 
            Objects.equal(this.sequence, other.sequence) && 
            Objects.equal(this.newTakeOffTime, other.newTakeOffTime) && 
            Objects.equal(this.newArrivalTime, other.newArrivalTime) && 
            Objects.equal(this.newAPortBuildingID, other.newAPortBuildingID) && 
            Objects.equal(this.newAPortBuildingName, other.newAPortBuildingName) && 
            Objects.equal(this.newDPortBuildingID, other.newDPortBuildingID) && 
            Objects.equal(this.newDPortBuildingName, other.newDPortBuildingName) && 
            Objects.equal(this.newFlightNo, other.newFlightNo) && 
            Objects.equal(this.newSubClass, other.newSubClass) && 
            Objects.equal(this.newClass, other.newClass) && 
            Objects.equal(this.newAPort, other.newAPort) && 
            Objects.equal(this.newDPort, other.newDPort) && 
            Objects.equal(this.recordNo, other.recordNo) && 
            Objects.equal(this.airLineRecordNo, other.airLineRecordNo) && 
            Objects.equal(this.officeNO, other.officeNO) && 
            Objects.equal(this.carrierFlightNo, other.carrierFlightNo) && 
            Objects.equal(this.newDCity, other.newDCity) && 
            Objects.equal(this.newACity, other.newACity) && 
            Objects.equal(this.isRebookSequence, other.isRebookSequence) && 
            Objects.equal(this.subsidy, other.subsidy) && 
            Objects.equal(this.printPrice, other.printPrice) && 
            Objects.equal(this.salePrice, other.salePrice) && 
            Objects.equal(this.oilFee, other.oilFee) && 
            Objects.equal(this.tax, other.tax) && 
            Objects.equal(this.currency, other.currency) && 
            Objects.equal(this.currencyRate, other.currencyRate) && 
            Objects.equal(this.totalRebookFee, other.totalRebookFee) && 
            Objects.equal(this.dateChangeFee, other.dateChangeFee) && 
            Objects.equal(this.priceDifferential, other.priceDifferential) && 
            Objects.equal(this.taxDifferential, other.taxDifferential) && 
            Objects.equal(this.supplierCurrency, other.supplierCurrency) && 
            Objects.equal(this.supplierCurrencyRate, other.supplierCurrencyRate) && 
            Objects.equal(this.supplierTotalRebookFee, other.supplierTotalRebookFee) && 
            Objects.equal(this.supplierDateChangeFee, other.supplierDateChangeFee) && 
            Objects.equal(this.supplierPriceDifferential, other.supplierPriceDifferential) && 
            Objects.equal(this.supplierTaxDifferential, other.supplierTaxDifferential) && 
            Objects.equal(this.supplierServiceFeeForCustom, other.supplierServiceFeeForCustom) && 
            Objects.equal(this.ctripServiceFeeForCustom, other.ctripServiceFeeForCustom) && 
            Objects.equal(this.airlineServiceFeeForCustom, other.airlineServiceFeeForCustom) && 
            Objects.equal(this.supplierServiceFeeForSupplier, other.supplierServiceFeeForSupplier) && 
            Objects.equal(this.ctripServiceFeeForSupplier, other.ctripServiceFeeForSupplier) && 
            Objects.equal(this.airlineServiceFeeForSupplier, other.airlineServiceFeeForSupplier) && 
            Objects.equal(this.isSurface, other.isSurface) && 
            Objects.equal(this.newTakeOffTimeOfBeijing, other.newTakeOffTimeOfBeijing) && 
            Objects.equal(this.newArriveTimeOfBeijing, other.newArriveTimeOfBeijing) && 
            Objects.equal(this.supplierSalePrice, other.supplierSalePrice) && 
            Objects.equal(this.supplierTax, other.supplierTax) && 
            Objects.equal(this.craftType, other.craftType) && 
            Objects.equal(this.duration, other.duration);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.segmentNo);
        result = 31 * result + Objects.hashCode(this.sequence);
        result = 31 * result + Objects.hashCode(this.newTakeOffTime);
        result = 31 * result + Objects.hashCode(this.newArrivalTime);
        result = 31 * result + Objects.hashCode(this.newAPortBuildingID);
        result = 31 * result + Objects.hashCode(this.newAPortBuildingName);
        result = 31 * result + Objects.hashCode(this.newDPortBuildingID);
        result = 31 * result + Objects.hashCode(this.newDPortBuildingName);
        result = 31 * result + Objects.hashCode(this.newFlightNo);
        result = 31 * result + Objects.hashCode(this.newSubClass);
        result = 31 * result + Objects.hashCode(this.newClass);
        result = 31 * result + Objects.hashCode(this.newAPort);
        result = 31 * result + Objects.hashCode(this.newDPort);
        result = 31 * result + Objects.hashCode(this.recordNo);
        result = 31 * result + Objects.hashCode(this.airLineRecordNo);
        result = 31 * result + Objects.hashCode(this.officeNO);
        result = 31 * result + Objects.hashCode(this.carrierFlightNo);
        result = 31 * result + Objects.hashCode(this.newDCity);
        result = 31 * result + Objects.hashCode(this.newACity);
        result = 31 * result + Objects.hashCode(this.isRebookSequence);
        result = 31 * result + Objects.hashCode(this.subsidy);
        result = 31 * result + Objects.hashCode(this.printPrice);
        result = 31 * result + Objects.hashCode(this.salePrice);
        result = 31 * result + Objects.hashCode(this.oilFee);
        result = 31 * result + Objects.hashCode(this.tax);
        result = 31 * result + Objects.hashCode(this.currency);
        result = 31 * result + Objects.hashCode(this.currencyRate);
        result = 31 * result + Objects.hashCode(this.totalRebookFee);
        result = 31 * result + Objects.hashCode(this.dateChangeFee);
        result = 31 * result + Objects.hashCode(this.priceDifferential);
        result = 31 * result + Objects.hashCode(this.taxDifferential);
        result = 31 * result + Objects.hashCode(this.supplierCurrency);
        result = 31 * result + Objects.hashCode(this.supplierCurrencyRate);
        result = 31 * result + Objects.hashCode(this.supplierTotalRebookFee);
        result = 31 * result + Objects.hashCode(this.supplierDateChangeFee);
        result = 31 * result + Objects.hashCode(this.supplierPriceDifferential);
        result = 31 * result + Objects.hashCode(this.supplierTaxDifferential);
        result = 31 * result + Objects.hashCode(this.supplierServiceFeeForCustom);
        result = 31 * result + Objects.hashCode(this.ctripServiceFeeForCustom);
        result = 31 * result + Objects.hashCode(this.airlineServiceFeeForCustom);
        result = 31 * result + Objects.hashCode(this.supplierServiceFeeForSupplier);
        result = 31 * result + Objects.hashCode(this.ctripServiceFeeForSupplier);
        result = 31 * result + Objects.hashCode(this.airlineServiceFeeForSupplier);
        result = 31 * result + Objects.hashCode(this.isSurface);
        result = 31 * result + Objects.hashCode(this.newTakeOffTimeOfBeijing);
        result = 31 * result + Objects.hashCode(this.newArriveTimeOfBeijing);
        result = 31 * result + Objects.hashCode(this.supplierSalePrice);
        result = 31 * result + Objects.hashCode(this.supplierTax);
        result = 31 * result + Objects.hashCode(this.craftType);
        result = 31 * result + Objects.hashCode(this.duration);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("segmentNo", segmentNo)
            .add("sequence", sequence)
            .add("newTakeOffTime", newTakeOffTime)
            .add("newArrivalTime", newArrivalTime)
            .add("newAPortBuildingID", newAPortBuildingID)
            .add("newAPortBuildingName", newAPortBuildingName)
            .add("newDPortBuildingID", newDPortBuildingID)
            .add("newDPortBuildingName", newDPortBuildingName)
            .add("newFlightNo", newFlightNo)
            .add("newSubClass", newSubClass)
            .add("newClass", newClass)
            .add("newAPort", newAPort)
            .add("newDPort", newDPort)
            .add("recordNo", recordNo)
            .add("airLineRecordNo", airLineRecordNo)
            .add("officeNO", officeNO)
            .add("carrierFlightNo", carrierFlightNo)
            .add("newDCity", newDCity)
            .add("newACity", newACity)
            .add("isRebookSequence", isRebookSequence)
            .add("subsidy", subsidy)
            .add("printPrice", printPrice)
            .add("salePrice", salePrice)
            .add("oilFee", oilFee)
            .add("tax", tax)
            .add("currency", currency)
            .add("currencyRate", currencyRate)
            .add("totalRebookFee", totalRebookFee)
            .add("dateChangeFee", dateChangeFee)
            .add("priceDifferential", priceDifferential)
            .add("taxDifferential", taxDifferential)
            .add("supplierCurrency", supplierCurrency)
            .add("supplierCurrencyRate", supplierCurrencyRate)
            .add("supplierTotalRebookFee", supplierTotalRebookFee)
            .add("supplierDateChangeFee", supplierDateChangeFee)
            .add("supplierPriceDifferential", supplierPriceDifferential)
            .add("supplierTaxDifferential", supplierTaxDifferential)
            .add("supplierServiceFeeForCustom", supplierServiceFeeForCustom)
            .add("ctripServiceFeeForCustom", ctripServiceFeeForCustom)
            .add("airlineServiceFeeForCustom", airlineServiceFeeForCustom)
            .add("supplierServiceFeeForSupplier", supplierServiceFeeForSupplier)
            .add("ctripServiceFeeForSupplier", ctripServiceFeeForSupplier)
            .add("airlineServiceFeeForSupplier", airlineServiceFeeForSupplier)
            .add("isSurface", isSurface)
            .add("newTakeOffTimeOfBeijing", newTakeOffTimeOfBeijing)
            .add("newArriveTimeOfBeijing", newArriveTimeOfBeijing)
            .add("supplierSalePrice", supplierSalePrice)
            .add("supplierTax", supplierTax)
            .add("craftType", craftType)
            .add("duration", duration)
            .toString();
    }
}