/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.ibu.flight.internalws.models.thirdcontract.rebooking;

import com.ctriposs.baiji.convert.TypeConverter;
import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 *         改签优惠券信息
 *       
 */
@DtoDoc("改签优惠券信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RebookingCouponItem", namespace = "http://soa.ctrip.com/flight/Order/FlightOrderRebooking/v1", propOrder = {
    "rebookingApplicationCouponID",
    "couponCode",
    "couponPrice",
    "couponOwer",
    "couponStatus"
})
@SuppressWarnings("all")
public class RebookingCouponItem implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"RebookingCouponItem\",\"namespace\":\"" + RebookingCouponItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"rebookingApplicationCouponID\",\"type\":\"long\"},{\"name\":\"couponCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"couponPrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"couponOwer\",\"type\":[\"string\",\"null\"]},{\"name\":\"couponStatus\",\"type\":\"int\"}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public RebookingCouponItem(
        long rebookingApplicationCouponID, 
        String couponCode, 
        BigDecimal couponPrice, 
        String couponOwer, 
        int couponStatus) {
        this.rebookingApplicationCouponID = rebookingApplicationCouponID;
        this.couponCode = couponCode;
        this.couponPrice = couponPrice;
        this.couponOwer = couponOwer;
        this.couponStatus = couponStatus;
    }

    public RebookingCouponItem() {
        this.couponPrice = new BigDecimal(0);
    }

    @FieldDoc("改签费用明细表编号")
    @JsonProperty("RebookingApplicationCouponID")
    @XmlElement(name = "RebookingApplicationCouponID")
    private long rebookingApplicationCouponID;

    @FieldDoc("优惠券码")
    @JsonProperty("CouponCode")
    @XmlElement(name = "CouponCode")
    private String couponCode;

    @FieldDoc("优惠劵票面金额")
    @JsonProperty("CouponPrice")
    @XmlElement(name = "CouponPrice")
    private BigDecimal couponPrice;

    @FieldDoc("优惠劵使用人")
    @JsonProperty("CouponOwer")
    @XmlElement(name = "CouponOwer")
    private String couponOwer;

    @FieldDoc("优惠券状态[未使用1、冻结2、已使用3、无效4]")
    @JsonProperty("CouponStatus")
    @XmlElement(name = "CouponStatus")
    private int couponStatus;

    /**
     * 改签费用明细表编号
     */
    public long getRebookingApplicationCouponID() {
        return this.rebookingApplicationCouponID;
    }

    public void setRebookingApplicationCouponID(long rebookingApplicationCouponID) {
        this.rebookingApplicationCouponID = rebookingApplicationCouponID;
    }

    /**
     * 优惠券码
     */
    public String getCouponCode() {
        return this.couponCode;
    }

    public void setCouponCode(String couponCode) {
        this.couponCode = couponCode;
    }

    /**
     * 优惠劵票面金额
     */
    public BigDecimal getCouponPrice() {
        return this.couponPrice;
    }

    public void setCouponPrice(BigDecimal couponPrice) {
        this.couponPrice = couponPrice;
    }

    /**
     * 优惠劵使用人
     */
    public String getCouponOwer() {
        return this.couponOwer;
    }

    public void setCouponOwer(String couponOwer) {
        this.couponOwer = couponOwer;
    }

    /**
     * 优惠券状态[未使用1、冻结2、已使用3、无效4]
     */
    public int getCouponStatus() {
        return this.couponStatus;
    }

    public void setCouponStatus(int couponStatus) {
        this.couponStatus = couponStatus;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (long) this.rebookingApplicationCouponID;
            case 1: return (String) this.couponCode;
            case 2: return TypeConverter.convert(this.couponPrice, String.class);
            case 3: return (String) this.couponOwer;
            case 4: return (int) this.couponStatus;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.rebookingApplicationCouponID = (long)fieldValue; break;
            case 1: this.couponCode = (String)fieldValue; break;
            case 2: this.couponPrice = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 3: this.couponOwer = (String)fieldValue; break;
            case 4: this.couponStatus = (int)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final RebookingCouponItem other = (RebookingCouponItem)obj;
        return
            Objects.equal(this.rebookingApplicationCouponID, other.rebookingApplicationCouponID) && 
            Objects.equal(this.couponCode, other.couponCode) && 
            Objects.equal(this.couponPrice, other.couponPrice) && 
            Objects.equal(this.couponOwer, other.couponOwer) && 
            Objects.equal(this.couponStatus, other.couponStatus);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.rebookingApplicationCouponID);
        result = 31 * result + Objects.hashCode(this.couponCode);
        result = 31 * result + Objects.hashCode(this.couponPrice);
        result = 31 * result + Objects.hashCode(this.couponOwer);
        result = 31 * result + Objects.hashCode(this.couponStatus);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("rebookingApplicationCouponID", rebookingApplicationCouponID)
            .add("couponCode", couponCode)
            .add("couponPrice", couponPrice)
            .add("couponOwer", couponOwer)
            .add("couponStatus", couponStatus)
            .toString();
    }
}