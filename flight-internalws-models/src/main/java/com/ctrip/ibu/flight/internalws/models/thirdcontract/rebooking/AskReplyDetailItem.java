/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.ibu.flight.internalws.models.thirdcontract.rebooking;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.util.Calendar;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 *         咨询单回复明细
 *       
 */
@DtoDoc("咨询单回复明细")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AskReplyDetailItem", namespace = "http://soa.ctrip.com/flight/Order/FlightOrderRebooking/v1", propOrder = {
    "rescheduleAskRepDetailID",
    "segmentNo",
    "sequence",
    "takeOffTime",
    "arrivalTime",
    "aPortBuildingID",
    "aPortBuildingName",
    "dPortBuildingID",
    "dPortBuildingName",
    "flightNo",
    "subClass",
    "clazz",
    "aPort",
    "dPort",
    "recordNo",
    "officeNO",
    "carrierFlightNo",
    "dCity",
    "aCity",
    "flyType",
    "craftType",
    "noShowTime",
    "isConfirm",
    "aNoShowNonRer"
})
@SuppressWarnings("all")
public class AskReplyDetailItem implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"AskReplyDetailItem\",\"namespace\":\"" + AskReplyDetailItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"rescheduleAskRepDetailID\",\"type\":\"long\"},{\"name\":\"segmentNo\",\"type\":\"int\"},{\"name\":\"sequence\",\"type\":\"int\"},{\"name\":\"takeOffTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"arrivalTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"aPortBuildingID\",\"type\":[\"int\",\"null\"]},{\"name\":\"aPortBuildingName\",\"type\":[\"string\",\"null\"]},{\"name\":\"dPortBuildingID\",\"type\":[\"int\",\"null\"]},{\"name\":\"dPortBuildingName\",\"type\":[\"string\",\"null\"]},{\"name\":\"flightNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"subClass\",\"type\":[\"string\",\"null\"]},{\"name\":\"Class\",\"type\":[\"string\",\"null\"]},{\"name\":\"aPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"dPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"recordNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"officeNO\",\"type\":[\"string\",\"null\"]},{\"name\":\"carrierFlightNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"dCity\",\"type\":[\"int\",\"null\"]},{\"name\":\"aCity\",\"type\":[\"int\",\"null\"]},{\"name\":\"flyType\",\"type\":[\"string\",\"null\"]},{\"name\":\"craftType\",\"type\":[\"string\",\"null\"]},{\"name\":\"noShowTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"isConfirm\",\"type\":[\"string\",\"null\"]},{\"name\":\"aNoShowNonRer\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public AskReplyDetailItem(
        long rescheduleAskRepDetailID, 
        int segmentNo, 
        int sequence, 
        Calendar takeOffTime, 
        Calendar arrivalTime, 
        Integer aPortBuildingID, 
        String aPortBuildingName, 
        Integer dPortBuildingID, 
        String dPortBuildingName, 
        String flightNo, 
        String subClass, 
        String clazz, 
        String aPort, 
        String dPort, 
        String recordNo, 
        String officeNO, 
        String carrierFlightNo, 
        Integer dCity, 
        Integer aCity, 
        String flyType, 
        String craftType, 
        Calendar noShowTime, 
        String isConfirm, 
        String aNoShowNonRer) {
        this.rescheduleAskRepDetailID = rescheduleAskRepDetailID;
        this.segmentNo = segmentNo;
        this.sequence = sequence;
        this.takeOffTime = takeOffTime;
        this.arrivalTime = arrivalTime;
        this.aPortBuildingID = aPortBuildingID;
        this.aPortBuildingName = aPortBuildingName;
        this.dPortBuildingID = dPortBuildingID;
        this.dPortBuildingName = dPortBuildingName;
        this.flightNo = flightNo;
        this.subClass = subClass;
        this.clazz = clazz;
        this.aPort = aPort;
        this.dPort = dPort;
        this.recordNo = recordNo;
        this.officeNO = officeNO;
        this.carrierFlightNo = carrierFlightNo;
        this.dCity = dCity;
        this.aCity = aCity;
        this.flyType = flyType;
        this.craftType = craftType;
        this.noShowTime = noShowTime;
        this.isConfirm = isConfirm;
        this.aNoShowNonRer = aNoShowNonRer;
    }

    public AskReplyDetailItem() {
    }

    @FieldDoc("改签咨询回复明细ID")
    @JsonProperty("RescheduleAskRepDetailID")
    @XmlElement(name = "RescheduleAskRepDetailID")
    private long rescheduleAskRepDetailID;

    @FieldDoc("航程序号")
    @JsonProperty("SegmentNo")
    @XmlElement(name = "SegmentNo")
    private int segmentNo;

    @FieldDoc("航段序号")
    @JsonProperty("Sequence")
    @XmlElement(name = "Sequence")
    private int sequence;

    @FieldDoc("航班起飞时间")
    @JsonProperty("TakeOffTime")
    @XmlElement(name = "TakeOffTime", nillable = true)
    private Calendar takeOffTime;

    @FieldDoc("航班到达时间")
    @JsonProperty("ArrivalTime")
    @XmlElement(name = "ArrivalTime", nillable = true)
    private Calendar arrivalTime;

    @FieldDoc("到达航站楼编号")
    @JsonProperty("APortBuildingID")
    @XmlElement(name = "APortBuildingID", nillable = true)
    private Integer aPortBuildingID;

    @FieldDoc("到达航站楼名称")
    @JsonProperty("APortBuildingName")
    @XmlElement(name = "APortBuildingName")
    private String aPortBuildingName;

    @FieldDoc("出发航站楼编号")
    @JsonProperty("DPortBuildingID")
    @XmlElement(name = "DPortBuildingID", nillable = true)
    private Integer dPortBuildingID;

    @FieldDoc("出发航站楼名称")
    @JsonProperty("DPortBuildingName")
    @XmlElement(name = "DPortBuildingName")
    private String dPortBuildingName;

    @FieldDoc("航班号")
    @JsonProperty("FlightNo")
    @XmlElement(name = "FlightNo")
    private String flightNo;

    @FieldDoc("子舱位")
    @JsonProperty("SubClass")
    @XmlElement(name = "SubClass")
    private String subClass;

    @FieldDoc("大舱位（Y、C、F）")
    @JsonProperty("Class")
    @XmlElement(name = "Class")
    private String clazz;

    @FieldDoc("到达机场")
    @JsonProperty("APort")
    @XmlElement(name = "APort")
    private String aPort;

    @FieldDoc("出发机场")
    @JsonProperty("DPort")
    @XmlElement(name = "DPort")
    private String dPort;

    @FieldDoc("记录编号PNR")
    @JsonProperty("RecordNo")
    @XmlElement(name = "RecordNo")
    private String recordNo;

    @FieldDoc("订位的OfficeNO")
    @JsonProperty("OfficeNO")
    @XmlElement(name = "OfficeNO")
    private String officeNO;

    @FieldDoc("实际承运航班号")
    @JsonProperty("CarrierFlightNo")
    @XmlElement(name = "CarrierFlightNo")
    private String carrierFlightNo;

    @FieldDoc("出发城市编码")
    @JsonProperty("DCity")
    @XmlElement(name = "DCity", nillable = true)
    private Integer dCity;

    @FieldDoc("到达城市编码")
    @JsonProperty("ACity")
    @XmlElement(name = "ACity", nillable = true)
    private Integer aCity;

    @FieldDoc("飞行类型（T：直飞，C：中转）")
    @JsonProperty("FlyType")
    @XmlElement(name = "FlyType")
    private String flyType;

    @FieldDoc("机型（B：大，C：中，S：小）")
    @JsonProperty("CraftType")
    @XmlElement(name = "CraftType")
    private String craftType;

    @FieldDoc("NoShow时间")
    @JsonProperty("NoShowTime")
    @XmlElement(name = "NoShowTime", nillable = true)
    private Calendar noShowTime;

    @FieldDoc("是否用户确认的航段(T：是，F：否)")
    @JsonProperty("IsConfirm")
    @XmlElement(name = "IsConfirm")
    private String isConfirm;

    @FieldDoc("NoShow后是否不可改（T：不可改，F：可改）")
    @JsonProperty("ANoShowNonRer")
    @XmlElement(name = "ANoShowNonRer")
    private String aNoShowNonRer;

    /**
     * 改签咨询回复明细ID
     */
    public long getRescheduleAskRepDetailID() {
        return this.rescheduleAskRepDetailID;
    }

    public void setRescheduleAskRepDetailID(long rescheduleAskRepDetailID) {
        this.rescheduleAskRepDetailID = rescheduleAskRepDetailID;
    }

    /**
     * 航程序号
     */
    public int getSegmentNo() {
        return this.segmentNo;
    }

    public void setSegmentNo(int segmentNo) {
        this.segmentNo = segmentNo;
    }

    /**
     * 航段序号
     */
    public int getSequence() {
        return this.sequence;
    }

    public void setSequence(int sequence) {
        this.sequence = sequence;
    }

    /**
     * 航班起飞时间
     */
    public Calendar getTakeOffTime() {
        return this.takeOffTime;
    }

    public void setTakeOffTime(Calendar takeOffTime) {
        this.takeOffTime = takeOffTime;
    }

    /**
     * 航班到达时间
     */
    public Calendar getArrivalTime() {
        return this.arrivalTime;
    }

    public void setArrivalTime(Calendar arrivalTime) {
        this.arrivalTime = arrivalTime;
    }

    /**
     * 到达航站楼编号
     */
    public Integer getAPortBuildingID() {
        return this.aPortBuildingID;
    }

    public void setAPortBuildingID(Integer aPortBuildingID) {
        this.aPortBuildingID = aPortBuildingID;
    }

    /**
     * 到达航站楼名称
     */
    public String getAPortBuildingName() {
        return this.aPortBuildingName;
    }

    public void setAPortBuildingName(String aPortBuildingName) {
        this.aPortBuildingName = aPortBuildingName;
    }

    /**
     * 出发航站楼编号
     */
    public Integer getDPortBuildingID() {
        return this.dPortBuildingID;
    }

    public void setDPortBuildingID(Integer dPortBuildingID) {
        this.dPortBuildingID = dPortBuildingID;
    }

    /**
     * 出发航站楼名称
     */
    public String getDPortBuildingName() {
        return this.dPortBuildingName;
    }

    public void setDPortBuildingName(String dPortBuildingName) {
        this.dPortBuildingName = dPortBuildingName;
    }

    /**
     * 航班号
     */
    public String getFlightNo() {
        return this.flightNo;
    }

    public void setFlightNo(String flightNo) {
        this.flightNo = flightNo;
    }

    /**
     * 子舱位
     */
    public String getSubClass() {
        return this.subClass;
    }

    public void setSubClass(String subClass) {
        this.subClass = subClass;
    }

    /**
     * 大舱位（Y、C、F）
     */
    public String getClazz() {
        return this.clazz;
    }

    public void setClazz(String clazz) {
        this.clazz = clazz;
    }

    /**
     * 到达机场
     */
    public String getAPort() {
        return this.aPort;
    }

    public void setAPort(String aPort) {
        this.aPort = aPort;
    }

    /**
     * 出发机场
     */
    public String getDPort() {
        return this.dPort;
    }

    public void setDPort(String dPort) {
        this.dPort = dPort;
    }

    /**
     * 记录编号PNR
     */
    public String getRecordNo() {
        return this.recordNo;
    }

    public void setRecordNo(String recordNo) {
        this.recordNo = recordNo;
    }

    /**
     * 订位的OfficeNO
     */
    public String getOfficeNO() {
        return this.officeNO;
    }

    public void setOfficeNO(String officeNO) {
        this.officeNO = officeNO;
    }

    /**
     * 实际承运航班号
     */
    public String getCarrierFlightNo() {
        return this.carrierFlightNo;
    }

    public void setCarrierFlightNo(String carrierFlightNo) {
        this.carrierFlightNo = carrierFlightNo;
    }

    /**
     * 出发城市编码
     */
    public Integer getDCity() {
        return this.dCity;
    }

    public void setDCity(Integer dCity) {
        this.dCity = dCity;
    }

    /**
     * 到达城市编码
     */
    public Integer getACity() {
        return this.aCity;
    }

    public void setACity(Integer aCity) {
        this.aCity = aCity;
    }

    /**
     * 飞行类型（T：直飞，C：中转）
     */
    public String getFlyType() {
        return this.flyType;
    }

    public void setFlyType(String flyType) {
        this.flyType = flyType;
    }

    /**
     * 机型（B：大，C：中，S：小）
     */
    public String getCraftType() {
        return this.craftType;
    }

    public void setCraftType(String craftType) {
        this.craftType = craftType;
    }

    /**
     * NoShow时间
     */
    public Calendar getNoShowTime() {
        return this.noShowTime;
    }

    public void setNoShowTime(Calendar noShowTime) {
        this.noShowTime = noShowTime;
    }

    /**
     * 是否用户确认的航段(T：是，F：否)
     */
    public String getIsConfirm() {
        return this.isConfirm;
    }

    public void setIsConfirm(String isConfirm) {
        this.isConfirm = isConfirm;
    }

    /**
     * NoShow后是否不可改（T：不可改，F：可改）
     */
    public String getANoShowNonRer() {
        return this.aNoShowNonRer;
    }

    public void setANoShowNonRer(String aNoShowNonRer) {
        this.aNoShowNonRer = aNoShowNonRer;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (long) this.rescheduleAskRepDetailID;
            case 1: return (int) this.segmentNo;
            case 2: return (int) this.sequence;
            case 3: return (Calendar) this.takeOffTime;
            case 4: return (Calendar) this.arrivalTime;
            case 5: return (Integer) this.aPortBuildingID;
            case 6: return (String) this.aPortBuildingName;
            case 7: return (Integer) this.dPortBuildingID;
            case 8: return (String) this.dPortBuildingName;
            case 9: return (String) this.flightNo;
            case 10: return (String) this.subClass;
            case 11: return (String) this.clazz;
            case 12: return (String) this.aPort;
            case 13: return (String) this.dPort;
            case 14: return (String) this.recordNo;
            case 15: return (String) this.officeNO;
            case 16: return (String) this.carrierFlightNo;
            case 17: return (Integer) this.dCity;
            case 18: return (Integer) this.aCity;
            case 19: return (String) this.flyType;
            case 20: return (String) this.craftType;
            case 21: return (Calendar) this.noShowTime;
            case 22: return (String) this.isConfirm;
            case 23: return (String) this.aNoShowNonRer;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.rescheduleAskRepDetailID = (long)fieldValue; break;
            case 1: this.segmentNo = (int)fieldValue; break;
            case 2: this.sequence = (int)fieldValue; break;
            case 3: this.takeOffTime = (Calendar)fieldValue; break;
            case 4: this.arrivalTime = (Calendar)fieldValue; break;
            case 5: this.aPortBuildingID = (Integer)fieldValue; break;
            case 6: this.aPortBuildingName = (String)fieldValue; break;
            case 7: this.dPortBuildingID = (Integer)fieldValue; break;
            case 8: this.dPortBuildingName = (String)fieldValue; break;
            case 9: this.flightNo = (String)fieldValue; break;
            case 10: this.subClass = (String)fieldValue; break;
            case 11: this.clazz = (String)fieldValue; break;
            case 12: this.aPort = (String)fieldValue; break;
            case 13: this.dPort = (String)fieldValue; break;
            case 14: this.recordNo = (String)fieldValue; break;
            case 15: this.officeNO = (String)fieldValue; break;
            case 16: this.carrierFlightNo = (String)fieldValue; break;
            case 17: this.dCity = (Integer)fieldValue; break;
            case 18: this.aCity = (Integer)fieldValue; break;
            case 19: this.flyType = (String)fieldValue; break;
            case 20: this.craftType = (String)fieldValue; break;
            case 21: this.noShowTime = (Calendar)fieldValue; break;
            case 22: this.isConfirm = (String)fieldValue; break;
            case 23: this.aNoShowNonRer = (String)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final AskReplyDetailItem other = (AskReplyDetailItem)obj;
        return
            Objects.equal(this.rescheduleAskRepDetailID, other.rescheduleAskRepDetailID) && 
            Objects.equal(this.segmentNo, other.segmentNo) && 
            Objects.equal(this.sequence, other.sequence) && 
            Objects.equal(this.takeOffTime, other.takeOffTime) && 
            Objects.equal(this.arrivalTime, other.arrivalTime) && 
            Objects.equal(this.aPortBuildingID, other.aPortBuildingID) && 
            Objects.equal(this.aPortBuildingName, other.aPortBuildingName) && 
            Objects.equal(this.dPortBuildingID, other.dPortBuildingID) && 
            Objects.equal(this.dPortBuildingName, other.dPortBuildingName) && 
            Objects.equal(this.flightNo, other.flightNo) && 
            Objects.equal(this.subClass, other.subClass) && 
            Objects.equal(this.clazz, other.clazz) && 
            Objects.equal(this.aPort, other.aPort) && 
            Objects.equal(this.dPort, other.dPort) && 
            Objects.equal(this.recordNo, other.recordNo) && 
            Objects.equal(this.officeNO, other.officeNO) && 
            Objects.equal(this.carrierFlightNo, other.carrierFlightNo) && 
            Objects.equal(this.dCity, other.dCity) && 
            Objects.equal(this.aCity, other.aCity) && 
            Objects.equal(this.flyType, other.flyType) && 
            Objects.equal(this.craftType, other.craftType) && 
            Objects.equal(this.noShowTime, other.noShowTime) && 
            Objects.equal(this.isConfirm, other.isConfirm) && 
            Objects.equal(this.aNoShowNonRer, other.aNoShowNonRer);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.rescheduleAskRepDetailID);
        result = 31 * result + Objects.hashCode(this.segmentNo);
        result = 31 * result + Objects.hashCode(this.sequence);
        result = 31 * result + Objects.hashCode(this.takeOffTime);
        result = 31 * result + Objects.hashCode(this.arrivalTime);
        result = 31 * result + Objects.hashCode(this.aPortBuildingID);
        result = 31 * result + Objects.hashCode(this.aPortBuildingName);
        result = 31 * result + Objects.hashCode(this.dPortBuildingID);
        result = 31 * result + Objects.hashCode(this.dPortBuildingName);
        result = 31 * result + Objects.hashCode(this.flightNo);
        result = 31 * result + Objects.hashCode(this.subClass);
        result = 31 * result + Objects.hashCode(this.clazz);
        result = 31 * result + Objects.hashCode(this.aPort);
        result = 31 * result + Objects.hashCode(this.dPort);
        result = 31 * result + Objects.hashCode(this.recordNo);
        result = 31 * result + Objects.hashCode(this.officeNO);
        result = 31 * result + Objects.hashCode(this.carrierFlightNo);
        result = 31 * result + Objects.hashCode(this.dCity);
        result = 31 * result + Objects.hashCode(this.aCity);
        result = 31 * result + Objects.hashCode(this.flyType);
        result = 31 * result + Objects.hashCode(this.craftType);
        result = 31 * result + Objects.hashCode(this.noShowTime);
        result = 31 * result + Objects.hashCode(this.isConfirm);
        result = 31 * result + Objects.hashCode(this.aNoShowNonRer);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("rescheduleAskRepDetailID", rescheduleAskRepDetailID)
            .add("segmentNo", segmentNo)
            .add("sequence", sequence)
            .add("takeOffTime", takeOffTime)
            .add("arrivalTime", arrivalTime)
            .add("aPortBuildingID", aPortBuildingID)
            .add("aPortBuildingName", aPortBuildingName)
            .add("dPortBuildingID", dPortBuildingID)
            .add("dPortBuildingName", dPortBuildingName)
            .add("flightNo", flightNo)
            .add("subClass", subClass)
            .add("clazz", clazz)
            .add("aPort", aPort)
            .add("dPort", dPort)
            .add("recordNo", recordNo)
            .add("officeNO", officeNO)
            .add("carrierFlightNo", carrierFlightNo)
            .add("dCity", dCity)
            .add("aCity", aCity)
            .add("flyType", flyType)
            .add("craftType", craftType)
            .add("noShowTime", noShowTime)
            .add("isConfirm", isConfirm)
            .add("aNoShowNonRer", aNoShowNonRer)
            .toString();
    }
}