/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.ibu.flight.internalws.models.thirdcontract.rebooking;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.util.Calendar;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 改期单处理进度明细
 */
@DtoDoc("改期单处理进度明细")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TicketingOrderRebookingProcess", namespace = "http://soa.ctrip.com/flight/Ticket/Rebooking/QueryApi/v1", propOrder = {
    "processName",
    "processTime"
})
@SuppressWarnings("all")
public class TicketingOrderRebookingProcess implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"TicketingOrderRebookingProcess\",\"namespace\":\"" + TicketingOrderRebookingProcess.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"processName\",\"type\":[\"string\",\"null\"]},{\"name\":\"processTime\",\"type\":[\"datetime\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public TicketingOrderRebookingProcess(
        String processName, 
        Calendar processTime) {
        this.processName = processName;
        this.processTime = processTime;
    }

    public TicketingOrderRebookingProcess() {
        this.processTime = new java.util.GregorianCalendar(1, 0, 1, 0, 0, 0);
        this.processTime.setTimeZone(java.util.TimeZone.getTimeZone("UTC"));
    }

    @FieldDoc("进度名")
    @JsonProperty("ProcessName")
    @XmlElement(name = "ProcessName")
    private String processName;

    @FieldDoc("进度时间")
    @JsonProperty("ProcessTime")
    @XmlElement(name = "ProcessTime")
    private Calendar processTime;

    /**
     * 进度名
     */
    public String getProcessName() {
        return this.processName;
    }

    public void setProcessName(String processName) {
        this.processName = processName;
    }

    /**
     * 进度时间
     */
    public Calendar getProcessTime() {
        return this.processTime;
    }

    public void setProcessTime(Calendar processTime) {
        this.processTime = processTime;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (String) this.processName;
            case 1: return (Calendar) this.processTime;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.processName = (String)fieldValue; break;
            case 1: this.processTime = (Calendar)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final TicketingOrderRebookingProcess other = (TicketingOrderRebookingProcess)obj;
        return
            Objects.equal(this.processName, other.processName) && 
            Objects.equal(this.processTime, other.processTime);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.processName);
        result = 31 * result + Objects.hashCode(this.processTime);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("processName", processName)
            .add("processTime", processTime)
            .toString();
    }
}