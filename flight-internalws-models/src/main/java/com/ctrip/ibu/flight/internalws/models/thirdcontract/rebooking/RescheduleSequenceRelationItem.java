/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.ibu.flight.internalws.models.thirdcontract.rebooking;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 *         改签程与原航程对应关系
 *       
 */
@DtoDoc("改签程与原航程对应关系")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RescheduleSequenceRelationItem", namespace = "http://soa.ctrip.com/flight/Order/FlightOrderRebooking/v1", propOrder = {
    "segmentNo",
    "originSequence",
    "newSequence",
    "isRebookSequence",
    "isSurface"
})
@SuppressWarnings("all")
public class RescheduleSequenceRelationItem implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"RescheduleSequenceRelationItem\",\"namespace\":\"" + RescheduleSequenceRelationItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"segmentNo\",\"type\":\"int\"},{\"name\":\"originSequence\",\"type\":\"int\"},{\"name\":\"newSequence\",\"type\":\"int\"},{\"name\":\"isRebookSequence\",\"type\":\"boolean\"},{\"name\":\"isSurface\",\"type\":\"boolean\"}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public RescheduleSequenceRelationItem(
        int segmentNo, 
        int originSequence, 
        int newSequence, 
        boolean isRebookSequence, 
        boolean isSurface) {
        this.segmentNo = segmentNo;
        this.originSequence = originSequence;
        this.newSequence = newSequence;
        this.isRebookSequence = isRebookSequence;
        this.isSurface = isSurface;
    }

    public RescheduleSequenceRelationItem() {
    }

    @FieldDoc("航段编号")
    @JsonProperty("SegmentNo")
    @XmlElement(name = "SegmentNo")
    private int segmentNo;

    @FieldDoc("原始航段序号")
    @JsonProperty("OriginSequence")
    @XmlElement(name = "OriginSequence")
    private int originSequence;

    @FieldDoc("新航段序号")
    @JsonProperty("NewSequence")
    @XmlElement(name = "NewSequence")
    private int newSequence;

    @FieldDoc("是否改签程")
    @JsonProperty("IsRebookSequence")
    @XmlElement(name = "IsRebookSequence")
    private boolean isRebookSequence;

    @FieldDoc("是否地面程")
    @JsonProperty("IsSurface")
    @XmlElement(name = "IsSurface")
    private boolean isSurface;

    /**
     * 航段编号
     */
    public int getSegmentNo() {
        return this.segmentNo;
    }

    public void setSegmentNo(int segmentNo) {
        this.segmentNo = segmentNo;
    }

    /**
     * 原始航段序号
     */
    public int getOriginSequence() {
        return this.originSequence;
    }

    public void setOriginSequence(int originSequence) {
        this.originSequence = originSequence;
    }

    /**
     * 新航段序号
     */
    public int getNewSequence() {
        return this.newSequence;
    }

    public void setNewSequence(int newSequence) {
        this.newSequence = newSequence;
    }

    /**
     * 是否改签程
     */
    public boolean getIsRebookSequence() {
        return this.isRebookSequence;
    }

    public void setIsRebookSequence(boolean isRebookSequence) {
        this.isRebookSequence = isRebookSequence;
    }

    /**
     * 是否地面程
     */
    public boolean getIsSurface() {
        return this.isSurface;
    }

    public void setIsSurface(boolean isSurface) {
        this.isSurface = isSurface;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (int) this.segmentNo;
            case 1: return (int) this.originSequence;
            case 2: return (int) this.newSequence;
            case 3: return (boolean) this.isRebookSequence;
            case 4: return (boolean) this.isSurface;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.segmentNo = (int)fieldValue; break;
            case 1: this.originSequence = (int)fieldValue; break;
            case 2: this.newSequence = (int)fieldValue; break;
            case 3: this.isRebookSequence = (boolean)fieldValue; break;
            case 4: this.isSurface = (boolean)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final RescheduleSequenceRelationItem other = (RescheduleSequenceRelationItem)obj;
        return
            Objects.equal(this.segmentNo, other.segmentNo) && 
            Objects.equal(this.originSequence, other.originSequence) && 
            Objects.equal(this.newSequence, other.newSequence) && 
            Objects.equal(this.isRebookSequence, other.isRebookSequence) && 
            Objects.equal(this.isSurface, other.isSurface);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.segmentNo);
        result = 31 * result + Objects.hashCode(this.originSequence);
        result = 31 * result + Objects.hashCode(this.newSequence);
        result = 31 * result + Objects.hashCode(this.isRebookSequence);
        result = 31 * result + Objects.hashCode(this.isSurface);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("segmentNo", segmentNo)
            .add("originSequence", originSequence)
            .add("newSequence", newSequence)
            .add("isRebookSequence", isRebookSequence)
            .add("isSurface", isSurface)
            .toString();
    }
}