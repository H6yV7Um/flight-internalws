/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.ibu.flight.internalws.models.thirdcontract.rebooking;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 *         咨询明细
 *       
 */
@DtoDoc("咨询明细")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AskDetailItem", namespace = "http://soa.ctrip.com/flight/Order/FlightOrderRebooking/v1", propOrder = {
    "rescheduleAskDetailID",
    "groupNo",
    "daPort",
    "takeOffDate",
    "takeOffTime",
    "flightNo",
    "bestPrice",
    "flyType",
    "clazz",
    "craftType"
})
@SuppressWarnings("all")
public class AskDetailItem implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"AskDetailItem\",\"namespace\":\"" + AskDetailItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"rescheduleAskDetailID\",\"type\":\"long\"},{\"name\":\"groupNo\",\"type\":\"int\"},{\"name\":\"daPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"takeOffDate\",\"type\":[\"string\",\"null\"]},{\"name\":\"takeOffTime\",\"type\":[\"string\",\"null\"]},{\"name\":\"flightNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"bestPrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"flyType\",\"type\":[\"string\",\"null\"]},{\"name\":\"Class\",\"type\":[\"string\",\"null\"]},{\"name\":\"craftType\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public AskDetailItem(
        long rescheduleAskDetailID, 
        int groupNo, 
        String daPort, 
        String takeOffDate, 
        String takeOffTime, 
        String flightNo, 
        String bestPrice, 
        String flyType, 
        String clazz, 
        String craftType) {
        this.rescheduleAskDetailID = rescheduleAskDetailID;
        this.groupNo = groupNo;
        this.daPort = daPort;
        this.takeOffDate = takeOffDate;
        this.takeOffTime = takeOffTime;
        this.flightNo = flightNo;
        this.bestPrice = bestPrice;
        this.flyType = flyType;
        this.clazz = clazz;
        this.craftType = craftType;
    }

    public AskDetailItem() {
    }

    @FieldDoc("咨询明细ID")
    @JsonProperty("RescheduleAskDetailID")
    @XmlElement(name = "RescheduleAskDetailID")
    private long rescheduleAskDetailID;

    @FieldDoc("咨询组序号")
    @JsonProperty("GroupNo")
    @XmlElement(name = "GroupNo")
    private int groupNo;

    @FieldDoc("行程信息")
    @JsonProperty("DAPort")
    @XmlElement(name = "DAPort")
    private String daPort;

    @FieldDoc("改签日期")
    @JsonProperty("TakeOffDate")
    @XmlElement(name = "TakeOffDate")
    private String takeOffDate;

    @FieldDoc("起飞时间段，可多个，例如：9:00-10:00；19:00-20:00")
    @JsonProperty("TakeOffTime")
    @XmlElement(name = "TakeOffTime")
    private String takeOffTime;

    @FieldDoc("航班号")
    @JsonProperty("FlightNo")
    @XmlElement(name = "FlightNo")
    private String flightNo;

    @FieldDoc("是否优先价格最优航班（T：是，F：不限）")
    @JsonProperty("BestPrice")
    @XmlElement(name = "BestPrice")
    private String bestPrice;

    @FieldDoc("飞行类型（T：直飞，C：中转，U：不限）")
    @JsonProperty("FlyType")
    @XmlElement(name = "FlyType")
    private String flyType;

    @FieldDoc("舱等（Y：经济舱，C：公务舱，F：头等舱，U：不限，多个用逗号隔开，例如：Y,C）")
    @JsonProperty("Class")
    @XmlElement(name = "Class")
    private String clazz;

    @FieldDoc("机型（B：大，C：中，S：小，U：不限，多个用逗号隔开，例如：B,C）")
    @JsonProperty("CraftType")
    @XmlElement(name = "CraftType")
    private String craftType;

    /**
     * 咨询明细ID
     */
    public long getRescheduleAskDetailID() {
        return this.rescheduleAskDetailID;
    }

    public void setRescheduleAskDetailID(long rescheduleAskDetailID) {
        this.rescheduleAskDetailID = rescheduleAskDetailID;
    }

    /**
     * 咨询组序号
     */
    public int getGroupNo() {
        return this.groupNo;
    }

    public void setGroupNo(int groupNo) {
        this.groupNo = groupNo;
    }

    /**
     * 行程信息
     */
    public String getDaPort() {
        return this.daPort;
    }

    public void setDaPort(String daPort) {
        this.daPort = daPort;
    }

    /**
     * 改签日期
     */
    public String getTakeOffDate() {
        return this.takeOffDate;
    }

    public void setTakeOffDate(String takeOffDate) {
        this.takeOffDate = takeOffDate;
    }

    /**
     * 起飞时间段，可多个，例如：9:00-10:00；19:00-20:00
     */
    public String getTakeOffTime() {
        return this.takeOffTime;
    }

    public void setTakeOffTime(String takeOffTime) {
        this.takeOffTime = takeOffTime;
    }

    /**
     * 航班号
     */
    public String getFlightNo() {
        return this.flightNo;
    }

    public void setFlightNo(String flightNo) {
        this.flightNo = flightNo;
    }

    /**
     * 是否优先价格最优航班（T：是，F：不限）
     */
    public String getBestPrice() {
        return this.bestPrice;
    }

    public void setBestPrice(String bestPrice) {
        this.bestPrice = bestPrice;
    }

    /**
     * 飞行类型（T：直飞，C：中转，U：不限）
     */
    public String getFlyType() {
        return this.flyType;
    }

    public void setFlyType(String flyType) {
        this.flyType = flyType;
    }

    /**
     * 舱等（Y：经济舱，C：公务舱，F：头等舱，U：不限，多个用逗号隔开，例如：Y,C）
     */
    public String getClazz() {
        return this.clazz;
    }

    public void setClazz(String clazz) {
        this.clazz = clazz;
    }

    /**
     * 机型（B：大，C：中，S：小，U：不限，多个用逗号隔开，例如：B,C）
     */
    public String getCraftType() {
        return this.craftType;
    }

    public void setCraftType(String craftType) {
        this.craftType = craftType;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (long) this.rescheduleAskDetailID;
            case 1: return (int) this.groupNo;
            case 2: return (String) this.daPort;
            case 3: return (String) this.takeOffDate;
            case 4: return (String) this.takeOffTime;
            case 5: return (String) this.flightNo;
            case 6: return (String) this.bestPrice;
            case 7: return (String) this.flyType;
            case 8: return (String) this.clazz;
            case 9: return (String) this.craftType;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.rescheduleAskDetailID = (long)fieldValue; break;
            case 1: this.groupNo = (int)fieldValue; break;
            case 2: this.daPort = (String)fieldValue; break;
            case 3: this.takeOffDate = (String)fieldValue; break;
            case 4: this.takeOffTime = (String)fieldValue; break;
            case 5: this.flightNo = (String)fieldValue; break;
            case 6: this.bestPrice = (String)fieldValue; break;
            case 7: this.flyType = (String)fieldValue; break;
            case 8: this.clazz = (String)fieldValue; break;
            case 9: this.craftType = (String)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final AskDetailItem other = (AskDetailItem)obj;
        return
            Objects.equal(this.rescheduleAskDetailID, other.rescheduleAskDetailID) && 
            Objects.equal(this.groupNo, other.groupNo) && 
            Objects.equal(this.daPort, other.daPort) && 
            Objects.equal(this.takeOffDate, other.takeOffDate) && 
            Objects.equal(this.takeOffTime, other.takeOffTime) && 
            Objects.equal(this.flightNo, other.flightNo) && 
            Objects.equal(this.bestPrice, other.bestPrice) && 
            Objects.equal(this.flyType, other.flyType) && 
            Objects.equal(this.clazz, other.clazz) && 
            Objects.equal(this.craftType, other.craftType);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.rescheduleAskDetailID);
        result = 31 * result + Objects.hashCode(this.groupNo);
        result = 31 * result + Objects.hashCode(this.daPort);
        result = 31 * result + Objects.hashCode(this.takeOffDate);
        result = 31 * result + Objects.hashCode(this.takeOffTime);
        result = 31 * result + Objects.hashCode(this.flightNo);
        result = 31 * result + Objects.hashCode(this.bestPrice);
        result = 31 * result + Objects.hashCode(this.flyType);
        result = 31 * result + Objects.hashCode(this.clazz);
        result = 31 * result + Objects.hashCode(this.craftType);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("rescheduleAskDetailID", rescheduleAskDetailID)
            .add("groupNo", groupNo)
            .add("daPort", daPort)
            .add("takeOffDate", takeOffDate)
            .add("takeOffTime", takeOffTime)
            .add("flightNo", flightNo)
            .add("bestPrice", bestPrice)
            .add("flyType", flyType)
            .add("clazz", clazz)
            .add("craftType", craftType)
            .toString();
    }
}