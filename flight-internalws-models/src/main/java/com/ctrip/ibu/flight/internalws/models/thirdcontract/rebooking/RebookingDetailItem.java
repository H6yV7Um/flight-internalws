/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.ibu.flight.internalws.models.thirdcontract.rebooking;

import com.ctriposs.baiji.convert.TypeConverter;
import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 *         改签详情
 *       
 */
@DtoDoc("改签详情")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RebookingDetailItem", namespace = "http://soa.ctrip.com/flight/Order/FlightOrderRebooking/v1", propOrder = {
    "rebookingApplicationID",
    "orderID",
    "externalOrderID",
    "requestTime",
    "clientSource",
    "createUser",
    "flightClass",
    "rebookingReasonType",
    "customerCashTime",
    "expectedFinishedTime",
    "applicationStatus",
    "uid",
    "orderFromCategory",
    "customerPayTime",
    "finishedTime",
    "paywayTypeId",
    "paywayTypeName",
    "payExternalNo",
    "fCardServiceFee",
    "payAmount",
    "payStatus",
    "isOldProcess",
    "dataChange_LastTime",
    "sendTicketFee",
    "getTicketWay",
    "isPayBeforeBookSeat",
    "payFailCode",
    "payFailReason",
    "rebookMethodConfigID",
    "paymentDeadline",
    "manualFlag",
    "isFirstPay",
    "isSelfPay",
    "rescheduleBillType",
    "baggageRemark",
    "sendTicketCity",
    "flightDescription",
    "ticketNoExpireDate",
    "ticketNoType",
    "flightAgency",
    "previousApplicationID",
    "airline",
    "rebookCounting",
    "bookSeatType",
    "sendSite",
    "newFlightAgency",
    "newSendSite",
    "originOrderID",
    "issueBillID",
    "sessionId",
    "rebookingApplicationFeeDetailID",
    "tradeAmount",
    "discountAmount",
    "isSimplifiedModel",
    "isValidPayAmount",
    "rebookingContactInfo",
    "rebookingFlightItemList",
    "rebookingNewFlightItemList",
    "rebookingPassengerItemList",
    "rebookingInvoiceInfo",
    "rebookingFailedInfo",
    "rebookingCouponItemList",
    "rescheduleFlowList",
    "rescheduleSequenceRelationList",
    "rescheduleAskList",
    "rescheduleAttributeList"
})
@SuppressWarnings("all")
public class RebookingDetailItem implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"RebookingDetailItem\",\"namespace\":\"" + RebookingDetailItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"rebookingApplicationID\",\"type\":\"long\"},{\"name\":\"orderID\",\"type\":\"long\"},{\"name\":\"externalOrderID\",\"type\":[\"string\",\"null\"]},{\"name\":\"requestTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"clientSource\",\"type\":[\"string\",\"null\"]},{\"name\":\"createUser\",\"type\":[\"string\",\"null\"]},{\"name\":\"flightClass\",\"type\":[\"string\",\"null\"]},{\"name\":\"rebookingReasonType\",\"type\":\"int\"},{\"name\":\"customerCashTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"expectedFinishedTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"applicationStatus\",\"type\":[\"string\",\"null\"]},{\"name\":\"uid\",\"type\":[\"string\",\"null\"]},{\"name\":\"orderFromCategory\",\"type\":\"int\"},{\"name\":\"customerPayTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"finishedTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"paywayTypeId\",\"type\":[\"string\",\"null\"]},{\"name\":\"paywayTypeName\",\"type\":[\"string\",\"null\"]},{\"name\":\"payExternalNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"fCardServiceFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"payAmount\",\"type\":[\"string\",\"null\"]},{\"name\":\"payStatus\",\"type\":[\"string\",\"null\"]},{\"name\":\"isOldProcess\",\"type\":[\"string\",\"null\"]},{\"name\":\"dataChange_LastTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"sendTicketFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"getTicketWay\",\"type\":[\"string\",\"null\"]},{\"name\":\"isPayBeforeBookSeat\",\"type\":[\"string\",\"null\"]},{\"name\":\"payFailCode\",\"type\":[\"int\",\"null\"]},{\"name\":\"payFailReason\",\"type\":[\"string\",\"null\"]},{\"name\":\"rebookMethodConfigID\",\"type\":[\"long\",\"null\"]},{\"name\":\"paymentDeadline\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"manualFlag\",\"type\":[\"string\",\"null\"]},{\"name\":\"isFirstPay\",\"type\":[\"string\",\"null\"]},{\"name\":\"isSelfPay\",\"type\":\"boolean\"},{\"name\":\"rescheduleBillType\",\"type\":[\"string\",\"null\"]},{\"name\":\"baggageRemark\",\"type\":[\"string\",\"null\"]},{\"name\":\"sendTicketCity\",\"type\":[\"int\",\"null\"]},{\"name\":\"flightDescription\",\"type\":[\"string\",\"null\"]},{\"name\":\"ticketNoExpireDate\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"ticketNoType\",\"type\":[\"int\",\"null\"]},{\"name\":\"flightAgency\",\"type\":\"int\"},{\"name\":\"previousApplicationID\",\"type\":[\"long\",\"null\"]},{\"name\":\"airline\",\"type\":[\"string\",\"null\"]},{\"name\":\"rebookCounting\",\"type\":[\"int\",\"null\"]},{\"name\":\"bookSeatType\",\"type\":[\"string\",\"null\"]},{\"name\":\"sendSite\",\"type\":\"int\"},{\"name\":\"newFlightAgency\",\"type\":[\"int\",\"null\"]},{\"name\":\"newSendSite\",\"type\":[\"int\",\"null\"]},{\"name\":\"originOrderID\",\"type\":\"long\"},{\"name\":\"issueBillID\",\"type\":\"long\"},{\"name\":\"sessionId\",\"type\":[\"string\",\"null\"]},{\"name\":\"rebookingApplicationFeeDetailID\",\"type\":[\"long\",\"null\"]},{\"name\":\"tradeAmount\",\"type\":[\"string\",\"null\"]},{\"name\":\"discountAmount\",\"type\":[\"string\",\"null\"]},{\"name\":\"isSimplifiedModel\",\"type\":[\"string\",\"null\"]},{\"name\":\"isValidPayAmount\",\"type\":[\"string\",\"null\"]},{\"name\":\"rebookingContactInfo\",\"type\":{\"type\":\"record\",\"name\":\"RebookingContactInfo\",\"namespace\":\"" + RebookingContactInfo.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"contactName\",\"type\":[\"string\",\"null\"]},{\"name\":\"countryCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"mobilePhone\",\"type\":[\"string\",\"null\"]},{\"name\":\"emailAddress\",\"type\":[\"string\",\"null\"]},{\"name\":\"resultConfirmType\",\"type\":\"int\"}]}},{\"name\":\"rebookingFlightItemList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RebookingFlightItem\",\"namespace\":\"" + RebookingFlightItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"segmentNo\",\"type\":\"int\"},{\"name\":\"sequence\",\"type\":\"int\"},{\"name\":\"flightSaleProductType\",\"type\":[\"int\",\"null\"]},{\"name\":\"originTakeOffTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"originArrivalTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"originAPortBuildingID\",\"type\":[\"int\",\"null\"]},{\"name\":\"originAPortBuildingName\",\"type\":[\"string\",\"null\"]},{\"name\":\"originDPortBuildingID\",\"type\":[\"int\",\"null\"]},{\"name\":\"originDPortBuildingName\",\"type\":[\"string\",\"null\"]},{\"name\":\"originFlightNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"originSubClass\",\"type\":[\"string\",\"null\"]},{\"name\":\"originClass\",\"type\":[\"string\",\"null\"]},{\"name\":\"originAPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"originDPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"carrierFlightNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"recordNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"isRebookSequence\",\"type\":\"boolean\"},{\"name\":\"originDCity\",\"type\":[\"int\",\"null\"]},{\"name\":\"originACity\",\"type\":[\"int\",\"null\"]},{\"name\":\"airLineRecordNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"officeNO\",\"type\":[\"string\",\"null\"]},{\"name\":\"isSurface\",\"type\":[\"string\",\"null\"]}]}}},{\"name\":\"rebookingNewFlightItemList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RebookingNewFlightItem\",\"namespace\":\"" + RebookingNewFlightItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"segmentNo\",\"type\":\"int\"},{\"name\":\"sequence\",\"type\":\"int\"},{\"name\":\"newTakeOffTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"newArrivalTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"newAPortBuildingID\",\"type\":[\"int\",\"null\"]},{\"name\":\"newAPortBuildingName\",\"type\":[\"string\",\"null\"]},{\"name\":\"newDPortBuildingID\",\"type\":[\"int\",\"null\"]},{\"name\":\"newDPortBuildingName\",\"type\":[\"string\",\"null\"]},{\"name\":\"newFlightNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"newSubClass\",\"type\":[\"string\",\"null\"]},{\"name\":\"newClass\",\"type\":[\"string\",\"null\"]},{\"name\":\"newAPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"newDPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"recordNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"airLineRecordNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"officeNO\",\"type\":[\"string\",\"null\"]},{\"name\":\"carrierFlightNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"newDCity\",\"type\":[\"int\",\"null\"]},{\"name\":\"newACity\",\"type\":[\"int\",\"null\"]},{\"name\":\"isRebookSequence\",\"type\":\"boolean\"},{\"name\":\"subsidy\",\"type\":[\"string\",\"null\"]},{\"name\":\"printPrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"salePrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"oilFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"tax\",\"type\":[\"string\",\"null\"]},{\"name\":\"currency\",\"type\":[\"string\",\"null\"]},{\"name\":\"currencyRate\",\"type\":[\"string\",\"null\"]},{\"name\":\"totalRebookFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"dateChangeFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"priceDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"taxDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierCurrency\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierCurrencyRate\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierTotalRebookFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierDateChangeFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierPriceDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierTaxDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierServiceFeeForCustom\",\"type\":[\"string\",\"null\"]},{\"name\":\"ctripServiceFeeForCustom\",\"type\":[\"string\",\"null\"]},{\"name\":\"airlineServiceFeeForCustom\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierServiceFeeForSupplier\",\"type\":[\"string\",\"null\"]},{\"name\":\"ctripServiceFeeForSupplier\",\"type\":[\"string\",\"null\"]},{\"name\":\"airlineServiceFeeForSupplier\",\"type\":[\"string\",\"null\"]},{\"name\":\"isSurface\",\"type\":[\"string\",\"null\"]},{\"name\":\"newTakeOffTimeOfBeijing\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"newArriveTimeOfBeijing\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"supplierSalePrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierTax\",\"type\":[\"string\",\"null\"]},{\"name\":\"craftType\",\"type\":[\"string\",\"null\"]},{\"name\":\"duration\",\"type\":[\"int\",\"null\"]}]}}},{\"name\":\"rebookingPassengerItemList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RebookingPassengerItem\",\"namespace\":\"" + RebookingPassengerItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"passengerName\",\"type\":[\"string\",\"null\"]},{\"name\":\"bookingUser\",\"type\":[\"string\",\"null\"]},{\"name\":\"ageType\",\"type\":[\"string\",\"null\"]},{\"name\":\"cardType\",\"type\":[\"int\",\"null\"]},{\"name\":\"cardNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"birthDayDate\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"nationality\",\"type\":[\"string\",\"null\"]},{\"name\":\"cardExpiryDate\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"ticketInfoList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TicketInfoItem\",\"namespace\":\"" + TicketInfoItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"sequence\",\"type\":\"int\"},{\"name\":\"airLineCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"ticketNO\",\"type\":[\"string\",\"null\"]}]}}},{\"name\":\"originTicketInfoList\",\"type\":{\"type\":\"array\",\"items\":\"TicketInfoItem\"}},{\"name\":\"courtesyTitle\",\"type\":[\"string\",\"null\"]},{\"name\":\"gender\",\"type\":[\"string\",\"null\"]}]}}},{\"name\":\"rebookingInvoiceInfo\",\"type\":{\"type\":\"record\",\"name\":\"RebookingInvoiceInfo\",\"namespace\":\"" + RebookingInvoiceInfo.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"title\",\"type\":[\"string\",\"null\"]},{\"name\":\"detail\",\"type\":[\"string\",\"null\"]},{\"name\":\"postCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"receiverName\",\"type\":[\"string\",\"null\"]},{\"name\":\"countryCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"receiverTel\",\"type\":[\"string\",\"null\"]},{\"name\":\"address\",\"type\":[\"string\",\"null\"]},{\"name\":\"isBefore\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"province\",\"type\":[\"string\",\"null\"]},{\"name\":\"city\",\"type\":[\"string\",\"null\"]},{\"name\":\"district\",\"type\":[\"string\",\"null\"]},{\"name\":\"expressPhone\",\"type\":[\"string\",\"null\"]},{\"name\":\"provinceId\",\"type\":[\"int\",\"null\"]},{\"name\":\"cityId\",\"type\":[\"int\",\"null\"]},{\"name\":\"districtId\",\"type\":[\"int\",\"null\"]},{\"name\":\"payType\",\"type\":[\"int\",\"null\"]},{\"name\":\"payCost\",\"type\":[\"int\",\"null\"]},{\"name\":\"email\",\"type\":[\"string\",\"null\"]},{\"name\":\"mailingType\",\"type\":[\"string\",\"null\"]},{\"name\":\"isEmail\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"reimbursementType\",\"type\":\"int\"},{\"name\":\"mainOrderID\",\"type\":\"long\"},{\"name\":\"invoiceTitleType\",\"type\":[\"string\",\"null\"]},{\"name\":\"taxpayerNumber\",\"type\":[\"string\",\"null\"]},{\"name\":\"companyAccount\",\"type\":[\"string\",\"null\"]},{\"name\":\"companyAddress\",\"type\":[\"string\",\"null\"]},{\"name\":\"companyTel\",\"type\":[\"string\",\"null\"]},{\"name\":\"companyBankName\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"rebookingFailedInfo\",\"type\":{\"type\":\"record\",\"name\":\"RebookingFailedInfo\",\"namespace\":\"" + RebookingFailedInfo.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"rebookingApplicationFailedID\",\"type\":\"long\"},{\"name\":\"reasonType\",\"type\":\"int\"},{\"name\":\"remark\",\"type\":[\"string\",\"null\"]},{\"name\":\"owner\",\"type\":[\"string\",\"null\"]},{\"name\":\"rebookingOrderDistributeTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"distributeID\",\"type\":[\"long\",\"null\"]},{\"name\":\"processStatus\",\"type\":[\"string\",\"null\"]},{\"name\":\"reminderCount\",\"type\":\"int\"},{\"name\":\"additionalInfoCount\",\"type\":\"int\"},{\"name\":\"reservationCount\",\"type\":\"int\"},{\"name\":\"resultId\",\"type\":\"long\"}]}},{\"name\":\"rebookingCouponItemList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RebookingCouponItem\",\"namespace\":\"" + RebookingCouponItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"rebookingApplicationCouponID\",\"type\":\"long\"},{\"name\":\"couponCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"couponPrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"couponOwer\",\"type\":[\"string\",\"null\"]},{\"name\":\"couponStatus\",\"type\":\"int\"}]}}},{\"name\":\"rescheduleFlowList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RescheduleFlowItem\",\"namespace\":\"" + RescheduleFlowItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"rescheduleFlowID\",\"type\":\"long\"},{\"name\":\"flowNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"isEstimate\",\"type\":\"boolean\"},{\"name\":\"estimatedStartTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"estimatedFinishTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"processContent\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FlowKvItem\",\"namespace\":\"" + FlowKvItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"key\",\"type\":[\"string\",\"null\"]},{\"name\":\"actionId\",\"type\":[\"string\",\"null\"]}]}}}]}}},{\"name\":\"rescheduleSequenceRelationList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RescheduleSequenceRelationItem\",\"namespace\":\"" + RescheduleSequenceRelationItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"segmentNo\",\"type\":\"int\"},{\"name\":\"originSequence\",\"type\":\"int\"},{\"name\":\"newSequence\",\"type\":\"int\"},{\"name\":\"isRebookSequence\",\"type\":\"boolean\"},{\"name\":\"isSurface\",\"type\":\"boolean\"}]}}},{\"name\":\"rescheduleAskList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RescheduleAskItem\",\"namespace\":\"" + RescheduleAskItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"rescheduleAskID\",\"type\":\"long\"},{\"name\":\"askStatus\",\"type\":[\"string\",\"null\"]},{\"name\":\"language\",\"type\":[\"string\",\"null\"]},{\"name\":\"bookingValidationDeadline\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"askDetailList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AskDetailItem\",\"namespace\":\"" + AskDetailItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"rescheduleAskDetailID\",\"type\":\"long\"},{\"name\":\"groupNo\",\"type\":\"int\"},{\"name\":\"daPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"takeOffDate\",\"type\":[\"string\",\"null\"]},{\"name\":\"takeOffTime\",\"type\":[\"string\",\"null\"]},{\"name\":\"flightNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"bestPrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"flyType\",\"type\":[\"string\",\"null\"]},{\"name\":\"Class\",\"type\":[\"string\",\"null\"]},{\"name\":\"craftType\",\"type\":[\"string\",\"null\"]}]}}},{\"name\":\"askReplyGroupList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AskReplyGroupItem\",\"namespace\":\"" + AskReplyGroupItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"groupNo\",\"type\":\"int\"},{\"name\":\"askReplySequenceRelationList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AskReplySequenceRelationItem\",\"namespace\":\"" + AskReplySequenceRelationItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"segmentNo\",\"type\":\"int\"},{\"name\":\"originSequence\",\"type\":\"int\"},{\"name\":\"newSequence\",\"type\":\"int\"},{\"name\":\"isRebookSequence\",\"type\":\"boolean\"},{\"name\":\"isSurface\",\"type\":\"boolean\"}]}}},{\"name\":\"askReplyDetailList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AskReplyDetailItem\",\"namespace\":\"" + AskReplyDetailItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"rescheduleAskRepDetailID\",\"type\":\"long\"},{\"name\":\"segmentNo\",\"type\":\"int\"},{\"name\":\"sequence\",\"type\":\"int\"},{\"name\":\"takeOffTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"arrivalTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"aPortBuildingID\",\"type\":[\"int\",\"null\"]},{\"name\":\"aPortBuildingName\",\"type\":[\"string\",\"null\"]},{\"name\":\"dPortBuildingID\",\"type\":[\"int\",\"null\"]},{\"name\":\"dPortBuildingName\",\"type\":[\"string\",\"null\"]},{\"name\":\"flightNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"subClass\",\"type\":[\"string\",\"null\"]},{\"name\":\"Class\",\"type\":[\"string\",\"null\"]},{\"name\":\"aPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"dPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"recordNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"officeNO\",\"type\":[\"string\",\"null\"]},{\"name\":\"carrierFlightNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"dCity\",\"type\":[\"int\",\"null\"]},{\"name\":\"aCity\",\"type\":[\"int\",\"null\"]},{\"name\":\"flyType\",\"type\":[\"string\",\"null\"]},{\"name\":\"craftType\",\"type\":[\"string\",\"null\"]},{\"name\":\"noShowTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"isConfirm\",\"type\":[\"string\",\"null\"]},{\"name\":\"aNoShowNonRer\",\"type\":[\"string\",\"null\"]}]}}},{\"name\":\"bNoShowFeeDetail\",\"type\":{\"type\":\"record\",\"name\":\"AskReplyFeeDetail\",\"namespace\":\"" + AskReplyFeeDetail.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"feeDetailID\",\"type\":\"long\"},{\"name\":\"payAmount\",\"type\":[\"string\",\"null\"]},{\"name\":\"printPrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"salePrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"oilFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"tax\",\"type\":[\"string\",\"null\"]},{\"name\":\"currency\",\"type\":[\"string\",\"null\"]},{\"name\":\"currencyRate\",\"type\":[\"string\",\"null\"]},{\"name\":\"totalRebookFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"dateChangeFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"priceDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"taxDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"ctripServiceFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierCurrency\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierCurrencyRate\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierTotalRebookFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierDateChangeFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierPriceDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierTaxDifferential\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierSalePrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"supplierTax\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"aNoShowFeeDetail\",\"type\":\"AskReplyFeeDetail\"}]}}}]}}},{\"name\":\"rescheduleAttributeList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RescheduleAttributeKvItem\",\"namespace\":\"" + RescheduleAttributeKvItem.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"key\",\"type\":[\"string\",\"null\"]},{\"name\":\"actionId\",\"type\":[\"string\",\"null\"]}]}}}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public RebookingDetailItem(
        long rebookingApplicationID, 
        long orderID, 
        String externalOrderID, 
        Calendar requestTime, 
        String clientSource, 
        String createUser, 
        String flightClass, 
        int rebookingReasonType, 
        Calendar customerCashTime, 
        Calendar expectedFinishedTime, 
        String applicationStatus, 
        String uid, 
        int orderFromCategory, 
        Calendar customerPayTime, 
        Calendar finishedTime, 
        String paywayTypeId, 
        String paywayTypeName, 
        String payExternalNo, 
        BigDecimal fCardServiceFee, 
        BigDecimal payAmount, 
        String payStatus, 
        String isOldProcess, 
        Calendar dataChange_LastTime, 
        BigDecimal sendTicketFee, 
        String getTicketWay, 
        String isPayBeforeBookSeat, 
        Integer payFailCode, 
        String payFailReason, 
        Long rebookMethodConfigID, 
        Calendar paymentDeadline, 
        String manualFlag, 
        String isFirstPay, 
        boolean isSelfPay, 
        String rescheduleBillType, 
        String baggageRemark, 
        Integer sendTicketCity, 
        String flightDescription, 
        Calendar ticketNoExpireDate, 
        Integer ticketNoType, 
        int flightAgency, 
        Long previousApplicationID, 
        String airline, 
        Integer rebookCounting, 
        String bookSeatType, 
        int sendSite, 
        Integer newFlightAgency, 
        Integer newSendSite, 
        long originOrderID, 
        long issueBillID, 
        String sessionId, 
        Long rebookingApplicationFeeDetailID, 
        BigDecimal tradeAmount, 
        BigDecimal discountAmount, 
        String isSimplifiedModel, 
        String isValidPayAmount, 
        RebookingContactInfo rebookingContactInfo, 
        List<RebookingFlightItem> rebookingFlightItemList, 
        List<RebookingNewFlightItem> rebookingNewFlightItemList, 
        List<RebookingPassengerItem> rebookingPassengerItemList, 
        RebookingInvoiceInfo rebookingInvoiceInfo, 
        RebookingFailedInfo rebookingFailedInfo, 
        List<RebookingCouponItem> rebookingCouponItemList, 
        List<RescheduleFlowItem> rescheduleFlowList, 
        List<RescheduleSequenceRelationItem> rescheduleSequenceRelationList, 
        List<RescheduleAskItem> rescheduleAskList, 
        List<RescheduleAttributeKvItem> rescheduleAttributeList) {
        this.rebookingApplicationID = rebookingApplicationID;
        this.orderID = orderID;
        this.externalOrderID = externalOrderID;
        this.requestTime = requestTime;
        this.clientSource = clientSource;
        this.createUser = createUser;
        this.flightClass = flightClass;
        this.rebookingReasonType = rebookingReasonType;
        this.customerCashTime = customerCashTime;
        this.expectedFinishedTime = expectedFinishedTime;
        this.applicationStatus = applicationStatus;
        this.uid = uid;
        this.orderFromCategory = orderFromCategory;
        this.customerPayTime = customerPayTime;
        this.finishedTime = finishedTime;
        this.paywayTypeId = paywayTypeId;
        this.paywayTypeName = paywayTypeName;
        this.payExternalNo = payExternalNo;
        this.fCardServiceFee = fCardServiceFee;
        this.payAmount = payAmount;
        this.payStatus = payStatus;
        this.isOldProcess = isOldProcess;
        this.dataChange_LastTime = dataChange_LastTime;
        this.sendTicketFee = sendTicketFee;
        this.getTicketWay = getTicketWay;
        this.isPayBeforeBookSeat = isPayBeforeBookSeat;
        this.payFailCode = payFailCode;
        this.payFailReason = payFailReason;
        this.rebookMethodConfigID = rebookMethodConfigID;
        this.paymentDeadline = paymentDeadline;
        this.manualFlag = manualFlag;
        this.isFirstPay = isFirstPay;
        this.isSelfPay = isSelfPay;
        this.rescheduleBillType = rescheduleBillType;
        this.baggageRemark = baggageRemark;
        this.sendTicketCity = sendTicketCity;
        this.flightDescription = flightDescription;
        this.ticketNoExpireDate = ticketNoExpireDate;
        this.ticketNoType = ticketNoType;
        this.flightAgency = flightAgency;
        this.previousApplicationID = previousApplicationID;
        this.airline = airline;
        this.rebookCounting = rebookCounting;
        this.bookSeatType = bookSeatType;
        this.sendSite = sendSite;
        this.newFlightAgency = newFlightAgency;
        this.newSendSite = newSendSite;
        this.originOrderID = originOrderID;
        this.issueBillID = issueBillID;
        this.sessionId = sessionId;
        this.rebookingApplicationFeeDetailID = rebookingApplicationFeeDetailID;
        this.tradeAmount = tradeAmount;
        this.discountAmount = discountAmount;
        this.isSimplifiedModel = isSimplifiedModel;
        this.isValidPayAmount = isValidPayAmount;
        this.rebookingContactInfo = rebookingContactInfo;
        this.rebookingFlightItemList = rebookingFlightItemList;
        this.rebookingNewFlightItemList = rebookingNewFlightItemList;
        this.rebookingPassengerItemList = rebookingPassengerItemList;
        this.rebookingInvoiceInfo = rebookingInvoiceInfo;
        this.rebookingFailedInfo = rebookingFailedInfo;
        this.rebookingCouponItemList = rebookingCouponItemList;
        this.rescheduleFlowList = rescheduleFlowList;
        this.rescheduleSequenceRelationList = rescheduleSequenceRelationList;
        this.rescheduleAskList = rescheduleAskList;
        this.rescheduleAttributeList = rescheduleAttributeList;
    }

    public RebookingDetailItem() {
        this.requestTime = new java.util.GregorianCalendar(1, 0, 1, 0, 0, 0);
        this.requestTime.setTimeZone(java.util.TimeZone.getTimeZone("UTC"));
        this.fCardServiceFee = new BigDecimal(0);
        this.dataChange_LastTime = new java.util.GregorianCalendar(1, 0, 1, 0, 0, 0);
        this.dataChange_LastTime.setTimeZone(java.util.TimeZone.getTimeZone("UTC"));
    }

    @FieldDoc("改签申请编号")
    @JsonProperty("RebookingApplicationID")
    @XmlElement(name = "RebookingApplicationID")
    private long rebookingApplicationID;

    @FieldDoc("机票订单号")
    @JsonProperty("OrderID")
    @XmlElement(name = "OrderID")
    private long orderID;

    @FieldDoc("非机票订单号，比如航司订单号，分销商订单号等，若是直联订单改签需要提供。如东航")
    @JsonProperty("ExternalOrderID")
    @XmlElement(name = "ExternalOrderID")
    private String externalOrderID;

    @FieldDoc("申请时间")
    @JsonProperty("RequestTime")
    @XmlElement(name = "RequestTime")
    private Calendar requestTime;

    @FieldDoc("请求来源方，指渠道，比如Online，Offline等，请按提供方约定使用")
    @JsonProperty("ClientSource")
    @XmlElement(name = "ClientSource")
    private String clientSource;

    @FieldDoc("一般是员工号")
    @JsonProperty("CreateUser")
    @XmlElement(name = "CreateUser")
    private String createUser;

    @FieldDoc("国际（I）或国内（N）")
    @JsonProperty("FlightClass")
    @XmlElement(name = "FlightClass")
    private String flightClass;

    @FieldDoc("改签原因 1普通自愿改签，2航变改签")
    @JsonProperty("RebookingReasonType")
    @XmlElement(name = "RebookingReasonType")
    private int rebookingReasonType;

    @FieldDoc("改签收银时间（支付成功的时间）")
    @JsonProperty("CustomerCashTime")
    @XmlElement(name = "CustomerCashTime", nillable = true)
    private Calendar customerCashTime;

    @FieldDoc("预计改签完成时间")
    @JsonProperty("ExpectedFinishedTime")
    @XmlElement(name = "ExpectedFinishedTime", nillable = true)
    private Calendar expectedFinishedTime;

    @FieldDoc("改签单状态.W 等待处理  P 处理中  S 改签成功 F 改签失败 C 改签取消")
    @JsonProperty("ApplicationStatus")
    @XmlElement(name = "ApplicationStatus")
    private String applicationStatus;

    @FieldDoc("客人UID")
    @JsonProperty("UID")
    @XmlElement(name = "UID")
    private String uid;

    @FieldDoc("订单来源[BigSystem/Vacation/English/AirHotel/Other（(0 全部，1 大系统，2 商旅， 3度假，4机酒,5英文, 6其他)）]")
    @JsonProperty("OrderFromCategory")
    @XmlElement(name = "OrderFromCategory")
    private int orderFromCategory;

    @FieldDoc("改签支付时间（跳转到支付平台的时间）")
    @JsonProperty("CustomerPayTime")
    @XmlElement(name = "CustomerPayTime", nillable = true)
    private Calendar customerPayTime;

    @FieldDoc("改签申请终态时间，比如完成，失败")
    @JsonProperty("FinishedTime")
    @XmlElement(name = "FinishedTime", nillable = true)
    private Calendar finishedTime;

    @FieldDoc("何种支付类型进行的支付")
    @JsonProperty("PaywayTypeId")
    @XmlElement(name = "PaywayTypeId")
    private String paywayTypeId;

    @FieldDoc("支付类型名称")
    @JsonProperty("PaywayTypeName")
    @XmlElement(name = "PaywayTypeName")
    private String paywayTypeName;

    @FieldDoc("网关支付ExternalNO")
    @JsonProperty("PayExternalNo")
    @XmlElement(name = "PayExternalNo")
    private String payExternalNo;

    @FieldDoc("外卡服务费")
    @JsonProperty("FCardServiceFee")
    @XmlElement(name = "FCardServiceFee")
    private BigDecimal fCardServiceFee;

    @FieldDoc("客人实付金额")
    @JsonProperty("PayAmount")
    @XmlElement(name = "PayAmount", nillable = true)
    private BigDecimal payAmount;

    @FieldDoc("支付状态.W 待支付 S 支付成功 R 退款成功 F 支付失败")
    @JsonProperty("PayStatus")
    @XmlElement(name = "PayStatus")
    private String payStatus;

    @FieldDoc("是否老流程,T:是，F:否")
    @JsonProperty("IsOldProcess")
    @XmlElement(name = "IsOldProcess")
    private String isOldProcess;

    @FieldDoc("最后修改时间")
    @JsonProperty("DataChange_LastTime")
    @XmlElement(name = "DataChange_LastTime")
    private Calendar dataChange_LastTime;

    @FieldDoc("送票费")
    @JsonProperty("SendTicketFee")
    @XmlElement(name = "SendTicketFee", nillable = true)
    private BigDecimal sendTicketFee;

    @FieldDoc("配送方式(PJN:不需要报销凭证,SND:送票,GET:取票, PJS:邮寄,CJS:商旅客户行程单定期配送)")
    @JsonProperty("GetTicketWay")
    @XmlElement(name = "GetTicketWay")
    private String getTicketWay;

    @FieldDoc("是否定位前支付(T：是，F：否)")
    @JsonProperty("IsPayBeforeBookSeat")
    @XmlElement(name = "IsPayBeforeBookSeat")
    private String isPayBeforeBookSeat;

    @FieldDoc("支付失败code")
    @JsonProperty("PayFailCode")
    @XmlElement(name = "PayFailCode", nillable = true)
    private Integer payFailCode;

    @FieldDoc("支付失败的原因")
    @JsonProperty("PayFailReason")
    @XmlElement(name = "PayFailReason")
    private String payFailReason;

    @FieldDoc("改签方式配置ID")
    @JsonProperty("RebookMethodConfigID")
    @XmlElement(name = "RebookMethodConfigID", nillable = true)
    private Long rebookMethodConfigID;

    @FieldDoc("支付时限")
    @JsonProperty("PaymentDeadline")
    @XmlElement(name = "PaymentDeadline", nillable = true)
    private Calendar paymentDeadline;

    @FieldDoc("人工处理标记")
    @JsonProperty("ManualFlag")
    @XmlElement(name = "ManualFlag")
    private String manualFlag;

    @FieldDoc("是否第一次支付")
    @JsonProperty("IsFirstPay")
    @XmlElement(name = "IsFirstPay")
    private String isFirstPay;

    @FieldDoc("是否自助支付")
    @JsonProperty("IsSelfPay")
    @XmlElement(name = "IsSelfPay")
    private boolean isSelfPay;

    @FieldDoc("申请单类型，Normal（常规改签单），NewOrder（新单模式），Simple（简化模式），Ask（咨询单）")
    @JsonProperty("RescheduleBillType")
    @XmlElement(name = "RescheduleBillType")
    private String rescheduleBillType;

    @FieldDoc("行李额说明")
    @JsonProperty("BaggageRemark")
    @XmlElement(name = "BaggageRemark")
    private String baggageRemark;

    @FieldDoc("出票城市")
    @JsonProperty("SendTicketCity")
    @XmlElement(name = "SendTicketCity", nillable = true)
    private Integer sendTicketCity;

    @FieldDoc("航班描述")
    @JsonProperty("FlightDescription")
    @XmlElement(name = "FlightDescription")
    private String flightDescription;

    @FieldDoc("过期时间")
    @JsonProperty("TicketNoExpireDate")
    @XmlElement(name = "TicketNoExpireDate", nillable = true)
    private Calendar ticketNoExpireDate;

    @FieldDoc("票种，1：BSP;2:B2B,3:B2C,4:P2P,5:BOP")
    @JsonProperty("TicketNoType")
    @XmlElement(name = "TicketNoType", nillable = true)
    private Integer ticketNoType;

    @FieldDoc("原始的改签票台，哪个票台来改")
    @JsonProperty("FlightAgency")
    @XmlElement(name = "FlightAgency")
    private int flightAgency;

    @FieldDoc("前一次该订单的改签申请单")
    @JsonProperty("PreviousApplicationID")
    @XmlElement(name = "PreviousApplicationID", nillable = true)
    private Long previousApplicationID;

    @FieldDoc("航空公司二字码")
    @JsonProperty("Airline")
    @XmlElement(name = "Airline")
    private String airline;

    @FieldDoc("表明第几次改，首次传1，第二次传2，依次类推")
    @JsonProperty("RebookCounting")
    @XmlElement(name = "RebookCounting", nillable = true)
    private Integer rebookCounting;

    @FieldDoc("订位类型（GDS-WS 1A-WS TS-WS 1B-WS ZY-WS TF-WS HX-WS）")
    @JsonProperty("BookSeatType")
    @XmlElement(name = "BookSeatType")
    private String bookSeatType;

    @FieldDoc("原始票点")
    @JsonProperty("SendSite")
    @XmlElement(name = "SendSite")
    private int sendSite;

    @FieldDoc("改签后的票台")
    @JsonProperty("NewFlightAgency")
    @XmlElement(name = "NewFlightAgency", nillable = true)
    private Integer newFlightAgency;

    @FieldDoc("改签后的票点")
    @JsonProperty("NewSendSite")
    @XmlElement(name = "NewSendSite", nillable = true)
    private Integer newSendSite;

    @FieldDoc("原始机票订单号")
    @JsonProperty("OriginOrderID")
    @XmlElement(name = "OriginOrderID")
    private long originOrderID;

    @FieldDoc("出票单号")
    @JsonProperty("IssueBillID")
    @XmlElement(name = "IssueBillID")
    private long issueBillID;

    @FieldDoc("会话Id,供出票使用")
    @JsonProperty("SessionId")
    @XmlElement(name = "SessionId")
    private String sessionId;

    @FieldDoc("改签费用明细编号")
    @JsonProperty("RebookingApplicationFeeDetailID")
    @XmlElement(name = "RebookingApplicationFeeDetailID", nillable = true)
    private Long rebookingApplicationFeeDetailID;

    @FieldDoc("应收金额")
    @JsonProperty("TradeAmount")
    @XmlElement(name = "TradeAmount", nillable = true)
    private BigDecimal tradeAmount;

    @FieldDoc("优惠券抵扣金额")
    @JsonProperty("DiscountAmount")
    @XmlElement(name = "DiscountAmount", nillable = true)
    private BigDecimal discountAmount;

    @FieldDoc("是否简化模式（T：是，F：否）")
    @JsonProperty("IsSimplifiedModel")
    @XmlElement(name = "IsSimplifiedModel")
    private String isSimplifiedModel;

    @FieldDoc("费用是否有效（T：有效，F：无效）")
    @JsonProperty("IsValidPayAmount")
    @XmlElement(name = "IsValidPayAmount")
    private String isValidPayAmount;

    @FieldDoc("改签联系人信息")
    @JsonProperty("RebookingContactInfo")
    @XmlElement(name = "RebookingContactInfo")
    private RebookingContactInfo rebookingContactInfo;

    @FieldDoc("改签原始航班信息")
    @JsonProperty("RebookingFlightItemList")
    @XmlElement(name = "RebookingFlightItem")
    @XmlElementWrapper(name = "RebookingFlightItemList")
    private List<RebookingFlightItem> rebookingFlightItemList;

    @FieldDoc("改签新航班信息")
    @JsonProperty("RebookingNewFlightItemList")
    @XmlElement(name = "RebookingNewFlightItem")
    @XmlElementWrapper(name = "RebookingNewFlightItemList")
    private List<RebookingNewFlightItem> rebookingNewFlightItemList;

    @FieldDoc("改签乘客信息")
    @JsonProperty("RebookingPassengerItemList")
    @XmlElement(name = "RebookingPassengerItem")
    @XmlElementWrapper(name = "RebookingPassengerItemList")
    private List<RebookingPassengerItem> rebookingPassengerItemList;

    @FieldDoc("改签发票信息")
    @JsonProperty("RebookingInvoiceInfo")
    @XmlElement(name = "RebookingInvoiceInfo")
    private RebookingInvoiceInfo rebookingInvoiceInfo;

    @FieldDoc("改签失败信息")
    @JsonProperty("RebookingFailedInfo")
    @XmlElement(name = "RebookingFailedInfo")
    private RebookingFailedInfo rebookingFailedInfo;

    @FieldDoc("改签优惠券信息")
    @JsonProperty("RebookingCouponItemList")
    @XmlElement(name = "RebookingCouponItem")
    @XmlElementWrapper(name = "RebookingCouponItemList")
    private List<RebookingCouponItem> rebookingCouponItemList;

    @FieldDoc("改签状态事件信息")
    @JsonProperty("RescheduleFlowList")
    @XmlElement(name = "RescheduleFlowItem")
    @XmlElementWrapper(name = "RescheduleFlowList")
    private List<RescheduleFlowItem> rescheduleFlowList;

    @FieldDoc("改签程与原航程对应关系")
    @JsonProperty("RescheduleSequenceRelationList")
    @XmlElement(name = "RescheduleSequenceRelationItem")
    @XmlElementWrapper(name = "RescheduleSequenceRelationList")
    private List<RescheduleSequenceRelationItem> rescheduleSequenceRelationList;

    @FieldDoc("改签咨询单集合")
    @JsonProperty("RescheduleAskList")
    @XmlElement(name = "RescheduleAskItem")
    @XmlElementWrapper(name = "RescheduleAskList")
    private List<RescheduleAskItem> rescheduleAskList;

    @FieldDoc("改签单属性(Key----Value)" +
              "人工已回填标记：ModifyFlag----T/F" +
              "0元费用确认标记：FreeRescheduleConfirmedFlag----T/F" +
              "继续支付标记：ContinuePayFlag----T/F" +
              "费用是否有效标记：ValidPayAmountFlag----T/F")
    @JsonProperty("RescheduleAttributeList")
    @XmlElement(name = "RescheduleAttributeKvItem")
    @XmlElementWrapper(name = "RescheduleAttributeList")
    private List<RescheduleAttributeKvItem> rescheduleAttributeList;

    /**
     * 改签申请编号
     */
    public long getRebookingApplicationID() {
        return this.rebookingApplicationID;
    }

    public void setRebookingApplicationID(long rebookingApplicationID) {
        this.rebookingApplicationID = rebookingApplicationID;
    }

    /**
     * 机票订单号
     */
    public long getOrderID() {
        return this.orderID;
    }

    public void setOrderID(long orderID) {
        this.orderID = orderID;
    }

    /**
     * 非机票订单号，比如航司订单号，分销商订单号等，若是直联订单改签需要提供。如东航
     */
    public String getExternalOrderID() {
        return this.externalOrderID;
    }

    public void setExternalOrderID(String externalOrderID) {
        this.externalOrderID = externalOrderID;
    }

    /**
     * 申请时间
     */
    public Calendar getRequestTime() {
        return this.requestTime;
    }

    public void setRequestTime(Calendar requestTime) {
        this.requestTime = requestTime;
    }

    /**
     * 请求来源方，指渠道，比如Online，Offline等，请按提供方约定使用
     */
    public String getClientSource() {
        return this.clientSource;
    }

    public void setClientSource(String clientSource) {
        this.clientSource = clientSource;
    }

    /**
     * 一般是员工号
     */
    public String getCreateUser() {
        return this.createUser;
    }

    public void setCreateUser(String createUser) {
        this.createUser = createUser;
    }

    /**
     * 国际（I）或国内（N）
     */
    public String getFlightClass() {
        return this.flightClass;
    }

    public void setFlightClass(String flightClass) {
        this.flightClass = flightClass;
    }

    /**
     * 改签原因 1普通自愿改签，2航变改签
     */
    public int getRebookingReasonType() {
        return this.rebookingReasonType;
    }

    public void setRebookingReasonType(int rebookingReasonType) {
        this.rebookingReasonType = rebookingReasonType;
    }

    /**
     * 改签收银时间（支付成功的时间）
     */
    public Calendar getCustomerCashTime() {
        return this.customerCashTime;
    }

    public void setCustomerCashTime(Calendar customerCashTime) {
        this.customerCashTime = customerCashTime;
    }

    /**
     * 预计改签完成时间
     */
    public Calendar getExpectedFinishedTime() {
        return this.expectedFinishedTime;
    }

    public void setExpectedFinishedTime(Calendar expectedFinishedTime) {
        this.expectedFinishedTime = expectedFinishedTime;
    }

    /**
     * 改签单状态.W 等待处理  P 处理中  S 改签成功 F 改签失败 C 改签取消
     */
    public String getApplicationStatus() {
        return this.applicationStatus;
    }

    public void setApplicationStatus(String applicationStatus) {
        this.applicationStatus = applicationStatus;
    }

    /**
     * 客人UID
     */
    public String getUid() {
        return this.uid;
    }

    public void setUid(String uid) {
        this.uid = uid;
    }

    /**
     * 订单来源[BigSystem/Vacation/English/AirHotel/Other（(0 全部，1 大系统，2 商旅， 3度假，4机酒,5英文, 6其他)）]
     */
    public int getOrderFromCategory() {
        return this.orderFromCategory;
    }

    public void setOrderFromCategory(int orderFromCategory) {
        this.orderFromCategory = orderFromCategory;
    }

    /**
     * 改签支付时间（跳转到支付平台的时间）
     */
    public Calendar getCustomerPayTime() {
        return this.customerPayTime;
    }

    public void setCustomerPayTime(Calendar customerPayTime) {
        this.customerPayTime = customerPayTime;
    }

    /**
     * 改签申请终态时间，比如完成，失败
     */
    public Calendar getFinishedTime() {
        return this.finishedTime;
    }

    public void setFinishedTime(Calendar finishedTime) {
        this.finishedTime = finishedTime;
    }

    /**
     * 何种支付类型进行的支付
     */
    public String getPaywayTypeId() {
        return this.paywayTypeId;
    }

    public void setPaywayTypeId(String paywayTypeId) {
        this.paywayTypeId = paywayTypeId;
    }

    /**
     * 支付类型名称
     */
    public String getPaywayTypeName() {
        return this.paywayTypeName;
    }

    public void setPaywayTypeName(String paywayTypeName) {
        this.paywayTypeName = paywayTypeName;
    }

    /**
     * 网关支付ExternalNO
     */
    public String getPayExternalNo() {
        return this.payExternalNo;
    }

    public void setPayExternalNo(String payExternalNo) {
        this.payExternalNo = payExternalNo;
    }

    /**
     * 外卡服务费
     */
    public BigDecimal getFCardServiceFee() {
        return this.fCardServiceFee;
    }

    public void setFCardServiceFee(BigDecimal fCardServiceFee) {
        this.fCardServiceFee = fCardServiceFee;
    }

    /**
     * 客人实付金额
     */
    public BigDecimal getPayAmount() {
        return this.payAmount;
    }

    public void setPayAmount(BigDecimal payAmount) {
        this.payAmount = payAmount;
    }

    /**
     * 支付状态.W 待支付 S 支付成功 R 退款成功 F 支付失败
     */
    public String getPayStatus() {
        return this.payStatus;
    }

    public void setPayStatus(String payStatus) {
        this.payStatus = payStatus;
    }

    /**
     * 是否老流程,T:是，F:否
     */
    public String getIsOldProcess() {
        return this.isOldProcess;
    }

    public void setIsOldProcess(String isOldProcess) {
        this.isOldProcess = isOldProcess;
    }

    /**
     * 最后修改时间
     */
    public Calendar getDataChange_LastTime() {
        return this.dataChange_LastTime;
    }

    public void setDataChange_LastTime(Calendar dataChange_LastTime) {
        this.dataChange_LastTime = dataChange_LastTime;
    }

    /**
     * 送票费
     */
    public BigDecimal getSendTicketFee() {
        return this.sendTicketFee;
    }

    public void setSendTicketFee(BigDecimal sendTicketFee) {
        this.sendTicketFee = sendTicketFee;
    }

    /**
     * 配送方式(PJN:不需要报销凭证,SND:送票,GET:取票, PJS:邮寄,CJS:商旅客户行程单定期配送)
     */
    public String getGetTicketWay() {
        return this.getTicketWay;
    }

    public void setGetTicketWay(String getTicketWay) {
        this.getTicketWay = getTicketWay;
    }

    /**
     * 是否定位前支付(T：是，F：否)
     */
    public String getIsPayBeforeBookSeat() {
        return this.isPayBeforeBookSeat;
    }

    public void setIsPayBeforeBookSeat(String isPayBeforeBookSeat) {
        this.isPayBeforeBookSeat = isPayBeforeBookSeat;
    }

    /**
     * 支付失败code
     */
    public Integer getPayFailCode() {
        return this.payFailCode;
    }

    public void setPayFailCode(Integer payFailCode) {
        this.payFailCode = payFailCode;
    }

    /**
     * 支付失败的原因
     */
    public String getPayFailReason() {
        return this.payFailReason;
    }

    public void setPayFailReason(String payFailReason) {
        this.payFailReason = payFailReason;
    }

    /**
     * 改签方式配置ID
     */
    public Long getRebookMethodConfigID() {
        return this.rebookMethodConfigID;
    }

    public void setRebookMethodConfigID(Long rebookMethodConfigID) {
        this.rebookMethodConfigID = rebookMethodConfigID;
    }

    /**
     * 支付时限
     */
    public Calendar getPaymentDeadline() {
        return this.paymentDeadline;
    }

    public void setPaymentDeadline(Calendar paymentDeadline) {
        this.paymentDeadline = paymentDeadline;
    }

    /**
     * 人工处理标记
     */
    public String getManualFlag() {
        return this.manualFlag;
    }

    public void setManualFlag(String manualFlag) {
        this.manualFlag = manualFlag;
    }

    /**
     * 是否第一次支付
     */
    public String getIsFirstPay() {
        return this.isFirstPay;
    }

    public void setIsFirstPay(String isFirstPay) {
        this.isFirstPay = isFirstPay;
    }

    /**
     * 是否自助支付
     */
    public boolean getIsSelfPay() {
        return this.isSelfPay;
    }

    public void setIsSelfPay(boolean isSelfPay) {
        this.isSelfPay = isSelfPay;
    }

    /**
     * 申请单类型，Normal（常规改签单），NewOrder（新单模式），Simple（简化模式），Ask（咨询单）
     */
    public String getRescheduleBillType() {
        return this.rescheduleBillType;
    }

    public void setRescheduleBillType(String rescheduleBillType) {
        this.rescheduleBillType = rescheduleBillType;
    }

    /**
     * 行李额说明
     */
    public String getBaggageRemark() {
        return this.baggageRemark;
    }

    public void setBaggageRemark(String baggageRemark) {
        this.baggageRemark = baggageRemark;
    }

    /**
     * 出票城市
     */
    public Integer getSendTicketCity() {
        return this.sendTicketCity;
    }

    public void setSendTicketCity(Integer sendTicketCity) {
        this.sendTicketCity = sendTicketCity;
    }

    /**
     * 航班描述
     */
    public String getFlightDescription() {
        return this.flightDescription;
    }

    public void setFlightDescription(String flightDescription) {
        this.flightDescription = flightDescription;
    }

    /**
     * 过期时间
     */
    public Calendar getTicketNoExpireDate() {
        return this.ticketNoExpireDate;
    }

    public void setTicketNoExpireDate(Calendar ticketNoExpireDate) {
        this.ticketNoExpireDate = ticketNoExpireDate;
    }

    /**
     * 票种，1：BSP;2:B2B,3:B2C,4:P2P,5:BOP
     */
    public Integer getTicketNoType() {
        return this.ticketNoType;
    }

    public void setTicketNoType(Integer ticketNoType) {
        this.ticketNoType = ticketNoType;
    }

    /**
     * 原始的改签票台，哪个票台来改
     */
    public int getFlightAgency() {
        return this.flightAgency;
    }

    public void setFlightAgency(int flightAgency) {
        this.flightAgency = flightAgency;
    }

    /**
     * 前一次该订单的改签申请单
     */
    public Long getPreviousApplicationID() {
        return this.previousApplicationID;
    }

    public void setPreviousApplicationID(Long previousApplicationID) {
        this.previousApplicationID = previousApplicationID;
    }

    /**
     * 航空公司二字码
     */
    public String getAirline() {
        return this.airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }

    /**
     * 表明第几次改，首次传1，第二次传2，依次类推
     */
    public Integer getRebookCounting() {
        return this.rebookCounting;
    }

    public void setRebookCounting(Integer rebookCounting) {
        this.rebookCounting = rebookCounting;
    }

    /**
     * 订位类型（GDS-WS\ 1A-WS\ TS-WS\ 1B-WS\ ZY-WS\ TF-WS\HX-WS）
     */
    public String getBookSeatType() {
        return this.bookSeatType;
    }

    public void setBookSeatType(String bookSeatType) {
        this.bookSeatType = bookSeatType;
    }

    /**
     * 原始票点
     */
    public int getSendSite() {
        return this.sendSite;
    }

    public void setSendSite(int sendSite) {
        this.sendSite = sendSite;
    }

    /**
     * 改签后的票台
     */
    public Integer getNewFlightAgency() {
        return this.newFlightAgency;
    }

    public void setNewFlightAgency(Integer newFlightAgency) {
        this.newFlightAgency = newFlightAgency;
    }

    /**
     * 改签后的票点
     */
    public Integer getNewSendSite() {
        return this.newSendSite;
    }

    public void setNewSendSite(Integer newSendSite) {
        this.newSendSite = newSendSite;
    }

    /**
     * 原始机票订单号
     */
    public long getOriginOrderID() {
        return this.originOrderID;
    }

    public void setOriginOrderID(long originOrderID) {
        this.originOrderID = originOrderID;
    }

    /**
     * 出票单号
     */
    public long getIssueBillID() {
        return this.issueBillID;
    }

    public void setIssueBillID(long issueBillID) {
        this.issueBillID = issueBillID;
    }

    /**
     * 会话Id,供出票使用
     */
    public String getSessionId() {
        return this.sessionId;
    }

    public void setSessionId(String sessionId) {
        this.sessionId = sessionId;
    }

    /**
     * 改签费用明细编号
     */
    public Long getRebookingApplicationFeeDetailID() {
        return this.rebookingApplicationFeeDetailID;
    }

    public void setRebookingApplicationFeeDetailID(Long rebookingApplicationFeeDetailID) {
        this.rebookingApplicationFeeDetailID = rebookingApplicationFeeDetailID;
    }

    /**
     * 应收金额
     */
    public BigDecimal getTradeAmount() {
        return this.tradeAmount;
    }

    public void setTradeAmount(BigDecimal tradeAmount) {
        this.tradeAmount = tradeAmount;
    }

    /**
     * 优惠券抵扣金额
     */
    public BigDecimal getDiscountAmount() {
        return this.discountAmount;
    }

    public void setDiscountAmount(BigDecimal discountAmount) {
        this.discountAmount = discountAmount;
    }

    /**
     * 是否简化模式（T：是，F：否）
     */
    public String getIsSimplifiedModel() {
        return this.isSimplifiedModel;
    }

    public void setIsSimplifiedModel(String isSimplifiedModel) {
        this.isSimplifiedModel = isSimplifiedModel;
    }

    /**
     * 费用是否有效（T：有效，F：无效）
     */
    public String getIsValidPayAmount() {
        return this.isValidPayAmount;
    }

    public void setIsValidPayAmount(String isValidPayAmount) {
        this.isValidPayAmount = isValidPayAmount;
    }

    /**
     * 改签联系人信息
     */
    public RebookingContactInfo getRebookingContactInfo() {
        return this.rebookingContactInfo;
    }

    public void setRebookingContactInfo(RebookingContactInfo rebookingContactInfo) {
        this.rebookingContactInfo = rebookingContactInfo;
    }

    /**
     * 改签原始航班信息
     */
    public List<RebookingFlightItem> getRebookingFlightItemList() {
        return this.rebookingFlightItemList;
    }

    public void setRebookingFlightItemList(List<RebookingFlightItem> rebookingFlightItemList) {
        this.rebookingFlightItemList = rebookingFlightItemList;
    }

    /**
     * 改签新航班信息
     */
    public List<RebookingNewFlightItem> getRebookingNewFlightItemList() {
        return this.rebookingNewFlightItemList;
    }

    public void setRebookingNewFlightItemList(List<RebookingNewFlightItem> rebookingNewFlightItemList) {
        this.rebookingNewFlightItemList = rebookingNewFlightItemList;
    }

    /**
     * 改签乘客信息
     */
    public List<RebookingPassengerItem> getRebookingPassengerItemList() {
        return this.rebookingPassengerItemList;
    }

    public void setRebookingPassengerItemList(List<RebookingPassengerItem> rebookingPassengerItemList) {
        this.rebookingPassengerItemList = rebookingPassengerItemList;
    }

    /**
     * 改签发票信息
     */
    public RebookingInvoiceInfo getRebookingInvoiceInfo() {
        return this.rebookingInvoiceInfo;
    }

    public void setRebookingInvoiceInfo(RebookingInvoiceInfo rebookingInvoiceInfo) {
        this.rebookingInvoiceInfo = rebookingInvoiceInfo;
    }

    /**
     * 改签失败信息
     */
    public RebookingFailedInfo getRebookingFailedInfo() {
        return this.rebookingFailedInfo;
    }

    public void setRebookingFailedInfo(RebookingFailedInfo rebookingFailedInfo) {
        this.rebookingFailedInfo = rebookingFailedInfo;
    }

    /**
     * 改签优惠券信息
     */
    public List<RebookingCouponItem> getRebookingCouponItemList() {
        return this.rebookingCouponItemList;
    }

    public void setRebookingCouponItemList(List<RebookingCouponItem> rebookingCouponItemList) {
        this.rebookingCouponItemList = rebookingCouponItemList;
    }

    /**
     * 改签状态事件信息
     */
    public List<RescheduleFlowItem> getRescheduleFlowList() {
        return this.rescheduleFlowList;
    }

    public void setRescheduleFlowList(List<RescheduleFlowItem> rescheduleFlowList) {
        this.rescheduleFlowList = rescheduleFlowList;
    }

    /**
     * 改签程与原航程对应关系
     */
    public List<RescheduleSequenceRelationItem> getRescheduleSequenceRelationList() {
        return this.rescheduleSequenceRelationList;
    }

    public void setRescheduleSequenceRelationList(List<RescheduleSequenceRelationItem> rescheduleSequenceRelationList) {
        this.rescheduleSequenceRelationList = rescheduleSequenceRelationList;
    }

    /**
     * 改签咨询单集合
     */
    public List<RescheduleAskItem> getRescheduleAskList() {
        return this.rescheduleAskList;
    }

    public void setRescheduleAskList(List<RescheduleAskItem> rescheduleAskList) {
        this.rescheduleAskList = rescheduleAskList;
    }

    /**
     * 改签单属性(Key----Value)
     *             人工已回填标记：ModifyFlag----T/F
     *             0元费用确认标记：FreeRescheduleConfirmedFlag----T/F
     *             继续支付标记：ContinuePayFlag----T/F
     *             费用是否有效标记：ValidPayAmountFlag----T/F
     */
    public List<RescheduleAttributeKvItem> getRescheduleAttributeList() {
        return this.rescheduleAttributeList;
    }

    public void setRescheduleAttributeList(List<RescheduleAttributeKvItem> rescheduleAttributeList) {
        this.rescheduleAttributeList = rescheduleAttributeList;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (long) this.rebookingApplicationID;
            case 1: return (long) this.orderID;
            case 2: return (String) this.externalOrderID;
            case 3: return (Calendar) this.requestTime;
            case 4: return (String) this.clientSource;
            case 5: return (String) this.createUser;
            case 6: return (String) this.flightClass;
            case 7: return (int) this.rebookingReasonType;
            case 8: return (Calendar) this.customerCashTime;
            case 9: return (Calendar) this.expectedFinishedTime;
            case 10: return (String) this.applicationStatus;
            case 11: return (String) this.uid;
            case 12: return (int) this.orderFromCategory;
            case 13: return (Calendar) this.customerPayTime;
            case 14: return (Calendar) this.finishedTime;
            case 15: return (String) this.paywayTypeId;
            case 16: return (String) this.paywayTypeName;
            case 17: return (String) this.payExternalNo;
            case 18: return TypeConverter.convert(this.fCardServiceFee, String.class);
            case 19: return TypeConverter.convert(this.payAmount, String.class);
            case 20: return (String) this.payStatus;
            case 21: return (String) this.isOldProcess;
            case 22: return (Calendar) this.dataChange_LastTime;
            case 23: return TypeConverter.convert(this.sendTicketFee, String.class);
            case 24: return (String) this.getTicketWay;
            case 25: return (String) this.isPayBeforeBookSeat;
            case 26: return (Integer) this.payFailCode;
            case 27: return (String) this.payFailReason;
            case 28: return (Long) this.rebookMethodConfigID;
            case 29: return (Calendar) this.paymentDeadline;
            case 30: return (String) this.manualFlag;
            case 31: return (String) this.isFirstPay;
            case 32: return (boolean) this.isSelfPay;
            case 33: return (String) this.rescheduleBillType;
            case 34: return (String) this.baggageRemark;
            case 35: return (Integer) this.sendTicketCity;
            case 36: return (String) this.flightDescription;
            case 37: return (Calendar) this.ticketNoExpireDate;
            case 38: return (Integer) this.ticketNoType;
            case 39: return (int) this.flightAgency;
            case 40: return (Long) this.previousApplicationID;
            case 41: return (String) this.airline;
            case 42: return (Integer) this.rebookCounting;
            case 43: return (String) this.bookSeatType;
            case 44: return (int) this.sendSite;
            case 45: return (Integer) this.newFlightAgency;
            case 46: return (Integer) this.newSendSite;
            case 47: return (long) this.originOrderID;
            case 48: return (long) this.issueBillID;
            case 49: return (String) this.sessionId;
            case 50: return (Long) this.rebookingApplicationFeeDetailID;
            case 51: return TypeConverter.convert(this.tradeAmount, String.class);
            case 52: return TypeConverter.convert(this.discountAmount, String.class);
            case 53: return (String) this.isSimplifiedModel;
            case 54: return (String) this.isValidPayAmount;
            case 55: return (RebookingContactInfo) this.rebookingContactInfo;
            case 56: return (List<RebookingFlightItem>) this.rebookingFlightItemList;
            case 57: return (List<RebookingNewFlightItem>) this.rebookingNewFlightItemList;
            case 58: return (List<RebookingPassengerItem>) this.rebookingPassengerItemList;
            case 59: return (RebookingInvoiceInfo) this.rebookingInvoiceInfo;
            case 60: return (RebookingFailedInfo) this.rebookingFailedInfo;
            case 61: return (List<RebookingCouponItem>) this.rebookingCouponItemList;
            case 62: return (List<RescheduleFlowItem>) this.rescheduleFlowList;
            case 63: return (List<RescheduleSequenceRelationItem>) this.rescheduleSequenceRelationList;
            case 64: return (List<RescheduleAskItem>) this.rescheduleAskList;
            case 65: return (List<RescheduleAttributeKvItem>) this.rescheduleAttributeList;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.rebookingApplicationID = (long)fieldValue; break;
            case 1: this.orderID = (long)fieldValue; break;
            case 2: this.externalOrderID = (String)fieldValue; break;
            case 3: this.requestTime = (Calendar)fieldValue; break;
            case 4: this.clientSource = (String)fieldValue; break;
            case 5: this.createUser = (String)fieldValue; break;
            case 6: this.flightClass = (String)fieldValue; break;
            case 7: this.rebookingReasonType = (int)fieldValue; break;
            case 8: this.customerCashTime = (Calendar)fieldValue; break;
            case 9: this.expectedFinishedTime = (Calendar)fieldValue; break;
            case 10: this.applicationStatus = (String)fieldValue; break;
            case 11: this.uid = (String)fieldValue; break;
            case 12: this.orderFromCategory = (int)fieldValue; break;
            case 13: this.customerPayTime = (Calendar)fieldValue; break;
            case 14: this.finishedTime = (Calendar)fieldValue; break;
            case 15: this.paywayTypeId = (String)fieldValue; break;
            case 16: this.paywayTypeName = (String)fieldValue; break;
            case 17: this.payExternalNo = (String)fieldValue; break;
            case 18: this.fCardServiceFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 19: this.payAmount = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 20: this.payStatus = (String)fieldValue; break;
            case 21: this.isOldProcess = (String)fieldValue; break;
            case 22: this.dataChange_LastTime = (Calendar)fieldValue; break;
            case 23: this.sendTicketFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 24: this.getTicketWay = (String)fieldValue; break;
            case 25: this.isPayBeforeBookSeat = (String)fieldValue; break;
            case 26: this.payFailCode = (Integer)fieldValue; break;
            case 27: this.payFailReason = (String)fieldValue; break;
            case 28: this.rebookMethodConfigID = (Long)fieldValue; break;
            case 29: this.paymentDeadline = (Calendar)fieldValue; break;
            case 30: this.manualFlag = (String)fieldValue; break;
            case 31: this.isFirstPay = (String)fieldValue; break;
            case 32: this.isSelfPay = (boolean)fieldValue; break;
            case 33: this.rescheduleBillType = (String)fieldValue; break;
            case 34: this.baggageRemark = (String)fieldValue; break;
            case 35: this.sendTicketCity = (Integer)fieldValue; break;
            case 36: this.flightDescription = (String)fieldValue; break;
            case 37: this.ticketNoExpireDate = (Calendar)fieldValue; break;
            case 38: this.ticketNoType = (Integer)fieldValue; break;
            case 39: this.flightAgency = (int)fieldValue; break;
            case 40: this.previousApplicationID = (Long)fieldValue; break;
            case 41: this.airline = (String)fieldValue; break;
            case 42: this.rebookCounting = (Integer)fieldValue; break;
            case 43: this.bookSeatType = (String)fieldValue; break;
            case 44: this.sendSite = (int)fieldValue; break;
            case 45: this.newFlightAgency = (Integer)fieldValue; break;
            case 46: this.newSendSite = (Integer)fieldValue; break;
            case 47: this.originOrderID = (long)fieldValue; break;
            case 48: this.issueBillID = (long)fieldValue; break;
            case 49: this.sessionId = (String)fieldValue; break;
            case 50: this.rebookingApplicationFeeDetailID = (Long)fieldValue; break;
            case 51: this.tradeAmount = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 52: this.discountAmount = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 53: this.isSimplifiedModel = (String)fieldValue; break;
            case 54: this.isValidPayAmount = (String)fieldValue; break;
            case 55: this.rebookingContactInfo = (RebookingContactInfo)fieldValue; break;
            case 56: this.rebookingFlightItemList = (List<RebookingFlightItem>)fieldValue; break;
            case 57: this.rebookingNewFlightItemList = (List<RebookingNewFlightItem>)fieldValue; break;
            case 58: this.rebookingPassengerItemList = (List<RebookingPassengerItem>)fieldValue; break;
            case 59: this.rebookingInvoiceInfo = (RebookingInvoiceInfo)fieldValue; break;
            case 60: this.rebookingFailedInfo = (RebookingFailedInfo)fieldValue; break;
            case 61: this.rebookingCouponItemList = (List<RebookingCouponItem>)fieldValue; break;
            case 62: this.rescheduleFlowList = (List<RescheduleFlowItem>)fieldValue; break;
            case 63: this.rescheduleSequenceRelationList = (List<RescheduleSequenceRelationItem>)fieldValue; break;
            case 64: this.rescheduleAskList = (List<RescheduleAskItem>)fieldValue; break;
            case 65: this.rescheduleAttributeList = (List<RescheduleAttributeKvItem>)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final RebookingDetailItem other = (RebookingDetailItem)obj;
        return
            Objects.equal(this.rebookingApplicationID, other.rebookingApplicationID) && 
            Objects.equal(this.orderID, other.orderID) && 
            Objects.equal(this.externalOrderID, other.externalOrderID) && 
            Objects.equal(this.requestTime, other.requestTime) && 
            Objects.equal(this.clientSource, other.clientSource) && 
            Objects.equal(this.createUser, other.createUser) && 
            Objects.equal(this.flightClass, other.flightClass) && 
            Objects.equal(this.rebookingReasonType, other.rebookingReasonType) && 
            Objects.equal(this.customerCashTime, other.customerCashTime) && 
            Objects.equal(this.expectedFinishedTime, other.expectedFinishedTime) && 
            Objects.equal(this.applicationStatus, other.applicationStatus) && 
            Objects.equal(this.uid, other.uid) && 
            Objects.equal(this.orderFromCategory, other.orderFromCategory) && 
            Objects.equal(this.customerPayTime, other.customerPayTime) && 
            Objects.equal(this.finishedTime, other.finishedTime) && 
            Objects.equal(this.paywayTypeId, other.paywayTypeId) && 
            Objects.equal(this.paywayTypeName, other.paywayTypeName) && 
            Objects.equal(this.payExternalNo, other.payExternalNo) && 
            Objects.equal(this.fCardServiceFee, other.fCardServiceFee) && 
            Objects.equal(this.payAmount, other.payAmount) && 
            Objects.equal(this.payStatus, other.payStatus) && 
            Objects.equal(this.isOldProcess, other.isOldProcess) && 
            Objects.equal(this.dataChange_LastTime, other.dataChange_LastTime) && 
            Objects.equal(this.sendTicketFee, other.sendTicketFee) && 
            Objects.equal(this.getTicketWay, other.getTicketWay) && 
            Objects.equal(this.isPayBeforeBookSeat, other.isPayBeforeBookSeat) && 
            Objects.equal(this.payFailCode, other.payFailCode) && 
            Objects.equal(this.payFailReason, other.payFailReason) && 
            Objects.equal(this.rebookMethodConfigID, other.rebookMethodConfigID) && 
            Objects.equal(this.paymentDeadline, other.paymentDeadline) && 
            Objects.equal(this.manualFlag, other.manualFlag) && 
            Objects.equal(this.isFirstPay, other.isFirstPay) && 
            Objects.equal(this.isSelfPay, other.isSelfPay) && 
            Objects.equal(this.rescheduleBillType, other.rescheduleBillType) && 
            Objects.equal(this.baggageRemark, other.baggageRemark) && 
            Objects.equal(this.sendTicketCity, other.sendTicketCity) && 
            Objects.equal(this.flightDescription, other.flightDescription) && 
            Objects.equal(this.ticketNoExpireDate, other.ticketNoExpireDate) && 
            Objects.equal(this.ticketNoType, other.ticketNoType) && 
            Objects.equal(this.flightAgency, other.flightAgency) && 
            Objects.equal(this.previousApplicationID, other.previousApplicationID) && 
            Objects.equal(this.airline, other.airline) && 
            Objects.equal(this.rebookCounting, other.rebookCounting) && 
            Objects.equal(this.bookSeatType, other.bookSeatType) && 
            Objects.equal(this.sendSite, other.sendSite) && 
            Objects.equal(this.newFlightAgency, other.newFlightAgency) && 
            Objects.equal(this.newSendSite, other.newSendSite) && 
            Objects.equal(this.originOrderID, other.originOrderID) && 
            Objects.equal(this.issueBillID, other.issueBillID) && 
            Objects.equal(this.sessionId, other.sessionId) && 
            Objects.equal(this.rebookingApplicationFeeDetailID, other.rebookingApplicationFeeDetailID) && 
            Objects.equal(this.tradeAmount, other.tradeAmount) && 
            Objects.equal(this.discountAmount, other.discountAmount) && 
            Objects.equal(this.isSimplifiedModel, other.isSimplifiedModel) && 
            Objects.equal(this.isValidPayAmount, other.isValidPayAmount) && 
            Objects.equal(this.rebookingContactInfo, other.rebookingContactInfo) && 
            Objects.equal(this.rebookingFlightItemList, other.rebookingFlightItemList) && 
            Objects.equal(this.rebookingNewFlightItemList, other.rebookingNewFlightItemList) && 
            Objects.equal(this.rebookingPassengerItemList, other.rebookingPassengerItemList) && 
            Objects.equal(this.rebookingInvoiceInfo, other.rebookingInvoiceInfo) && 
            Objects.equal(this.rebookingFailedInfo, other.rebookingFailedInfo) && 
            Objects.equal(this.rebookingCouponItemList, other.rebookingCouponItemList) && 
            Objects.equal(this.rescheduleFlowList, other.rescheduleFlowList) && 
            Objects.equal(this.rescheduleSequenceRelationList, other.rescheduleSequenceRelationList) && 
            Objects.equal(this.rescheduleAskList, other.rescheduleAskList) && 
            Objects.equal(this.rescheduleAttributeList, other.rescheduleAttributeList);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.rebookingApplicationID);
        result = 31 * result + Objects.hashCode(this.orderID);
        result = 31 * result + Objects.hashCode(this.externalOrderID);
        result = 31 * result + Objects.hashCode(this.requestTime);
        result = 31 * result + Objects.hashCode(this.clientSource);
        result = 31 * result + Objects.hashCode(this.createUser);
        result = 31 * result + Objects.hashCode(this.flightClass);
        result = 31 * result + Objects.hashCode(this.rebookingReasonType);
        result = 31 * result + Objects.hashCode(this.customerCashTime);
        result = 31 * result + Objects.hashCode(this.expectedFinishedTime);
        result = 31 * result + Objects.hashCode(this.applicationStatus);
        result = 31 * result + Objects.hashCode(this.uid);
        result = 31 * result + Objects.hashCode(this.orderFromCategory);
        result = 31 * result + Objects.hashCode(this.customerPayTime);
        result = 31 * result + Objects.hashCode(this.finishedTime);
        result = 31 * result + Objects.hashCode(this.paywayTypeId);
        result = 31 * result + Objects.hashCode(this.paywayTypeName);
        result = 31 * result + Objects.hashCode(this.payExternalNo);
        result = 31 * result + Objects.hashCode(this.fCardServiceFee);
        result = 31 * result + Objects.hashCode(this.payAmount);
        result = 31 * result + Objects.hashCode(this.payStatus);
        result = 31 * result + Objects.hashCode(this.isOldProcess);
        result = 31 * result + Objects.hashCode(this.dataChange_LastTime);
        result = 31 * result + Objects.hashCode(this.sendTicketFee);
        result = 31 * result + Objects.hashCode(this.getTicketWay);
        result = 31 * result + Objects.hashCode(this.isPayBeforeBookSeat);
        result = 31 * result + Objects.hashCode(this.payFailCode);
        result = 31 * result + Objects.hashCode(this.payFailReason);
        result = 31 * result + Objects.hashCode(this.rebookMethodConfigID);
        result = 31 * result + Objects.hashCode(this.paymentDeadline);
        result = 31 * result + Objects.hashCode(this.manualFlag);
        result = 31 * result + Objects.hashCode(this.isFirstPay);
        result = 31 * result + Objects.hashCode(this.isSelfPay);
        result = 31 * result + Objects.hashCode(this.rescheduleBillType);
        result = 31 * result + Objects.hashCode(this.baggageRemark);
        result = 31 * result + Objects.hashCode(this.sendTicketCity);
        result = 31 * result + Objects.hashCode(this.flightDescription);
        result = 31 * result + Objects.hashCode(this.ticketNoExpireDate);
        result = 31 * result + Objects.hashCode(this.ticketNoType);
        result = 31 * result + Objects.hashCode(this.flightAgency);
        result = 31 * result + Objects.hashCode(this.previousApplicationID);
        result = 31 * result + Objects.hashCode(this.airline);
        result = 31 * result + Objects.hashCode(this.rebookCounting);
        result = 31 * result + Objects.hashCode(this.bookSeatType);
        result = 31 * result + Objects.hashCode(this.sendSite);
        result = 31 * result + Objects.hashCode(this.newFlightAgency);
        result = 31 * result + Objects.hashCode(this.newSendSite);
        result = 31 * result + Objects.hashCode(this.originOrderID);
        result = 31 * result + Objects.hashCode(this.issueBillID);
        result = 31 * result + Objects.hashCode(this.sessionId);
        result = 31 * result + Objects.hashCode(this.rebookingApplicationFeeDetailID);
        result = 31 * result + Objects.hashCode(this.tradeAmount);
        result = 31 * result + Objects.hashCode(this.discountAmount);
        result = 31 * result + Objects.hashCode(this.isSimplifiedModel);
        result = 31 * result + Objects.hashCode(this.isValidPayAmount);
        result = 31 * result + Objects.hashCode(this.rebookingContactInfo);
        result = 31 * result + Objects.hashCode(this.rebookingFlightItemList);
        result = 31 * result + Objects.hashCode(this.rebookingNewFlightItemList);
        result = 31 * result + Objects.hashCode(this.rebookingPassengerItemList);
        result = 31 * result + Objects.hashCode(this.rebookingInvoiceInfo);
        result = 31 * result + Objects.hashCode(this.rebookingFailedInfo);
        result = 31 * result + Objects.hashCode(this.rebookingCouponItemList);
        result = 31 * result + Objects.hashCode(this.rescheduleFlowList);
        result = 31 * result + Objects.hashCode(this.rescheduleSequenceRelationList);
        result = 31 * result + Objects.hashCode(this.rescheduleAskList);
        result = 31 * result + Objects.hashCode(this.rescheduleAttributeList);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("rebookingApplicationID", rebookingApplicationID)
            .add("orderID", orderID)
            .add("externalOrderID", externalOrderID)
            .add("requestTime", requestTime)
            .add("clientSource", clientSource)
            .add("createUser", createUser)
            .add("flightClass", flightClass)
            .add("rebookingReasonType", rebookingReasonType)
            .add("customerCashTime", customerCashTime)
            .add("expectedFinishedTime", expectedFinishedTime)
            .add("applicationStatus", applicationStatus)
            .add("uid", uid)
            .add("orderFromCategory", orderFromCategory)
            .add("customerPayTime", customerPayTime)
            .add("finishedTime", finishedTime)
            .add("paywayTypeId", paywayTypeId)
            .add("paywayTypeName", paywayTypeName)
            .add("payExternalNo", payExternalNo)
            .add("fCardServiceFee", fCardServiceFee)
            .add("payAmount", payAmount)
            .add("payStatus", payStatus)
            .add("isOldProcess", isOldProcess)
            .add("dataChange_LastTime", dataChange_LastTime)
            .add("sendTicketFee", sendTicketFee)
            .add("getTicketWay", getTicketWay)
            .add("isPayBeforeBookSeat", isPayBeforeBookSeat)
            .add("payFailCode", payFailCode)
            .add("payFailReason", payFailReason)
            .add("rebookMethodConfigID", rebookMethodConfigID)
            .add("paymentDeadline", paymentDeadline)
            .add("manualFlag", manualFlag)
            .add("isFirstPay", isFirstPay)
            .add("isSelfPay", isSelfPay)
            .add("rescheduleBillType", rescheduleBillType)
            .add("baggageRemark", baggageRemark)
            .add("sendTicketCity", sendTicketCity)
            .add("flightDescription", flightDescription)
            .add("ticketNoExpireDate", ticketNoExpireDate)
            .add("ticketNoType", ticketNoType)
            .add("flightAgency", flightAgency)
            .add("previousApplicationID", previousApplicationID)
            .add("airline", airline)
            .add("rebookCounting", rebookCounting)
            .add("bookSeatType", bookSeatType)
            .add("sendSite", sendSite)
            .add("newFlightAgency", newFlightAgency)
            .add("newSendSite", newSendSite)
            .add("originOrderID", originOrderID)
            .add("issueBillID", issueBillID)
            .add("sessionId", sessionId)
            .add("rebookingApplicationFeeDetailID", rebookingApplicationFeeDetailID)
            .add("tradeAmount", tradeAmount)
            .add("discountAmount", discountAmount)
            .add("isSimplifiedModel", isSimplifiedModel)
            .add("isValidPayAmount", isValidPayAmount)
            .add("rebookingContactInfo", rebookingContactInfo)
            .add("rebookingFlightItemList", rebookingFlightItemList)
            .add("rebookingNewFlightItemList", rebookingNewFlightItemList)
            .add("rebookingPassengerItemList", rebookingPassengerItemList)
            .add("rebookingInvoiceInfo", rebookingInvoiceInfo)
            .add("rebookingFailedInfo", rebookingFailedInfo)
            .add("rebookingCouponItemList", rebookingCouponItemList)
            .add("rescheduleFlowList", rescheduleFlowList)
            .add("rescheduleSequenceRelationList", rescheduleSequenceRelationList)
            .add("rescheduleAskList", rescheduleAskList)
            .add("rescheduleAttributeList", rescheduleAttributeList)
            .toString();
    }
}